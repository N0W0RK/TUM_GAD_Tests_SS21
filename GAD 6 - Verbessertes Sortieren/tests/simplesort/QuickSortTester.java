package tests.simplesort;

import gad.simplesort.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

class QuickSortTester {

    @BeforeEach
    void printLine() {
        System.out.println("-------------------------");
    }

    /**
     * Tests the quicksort using the last pivot
     * Tests WITHOUT SELECTION SORT OPTIMISATION
     * Within the curly brackets is the expected log to be found
     * @author Aamin
     */
    @Test
    public void testQuickSortBasic() {
        Quicksort quicksort = new Quicksort(PivotFinder.getLastPivot(), 0);
        int[] array;
        int[] sortedArray;
        FastLoggingResult fastLoggingResult;
        List<String> expectedResult;

        array = new int[] {44, -44, -33, -34, 8, -5, -47, -24, 49, 3, 34};
        sortedArray = new int[]{-47, -44, -34, -33, -24, -5, 3, 8, 34, 44, 49};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [44, -44, -33, -34, 8, -5, -47, -24, 49, 3, 34] in [0, 10]");
            expectedResult.add("\n	LPA : [3, -44, -33, -34, 8, -5, -47, -24, 34, 44, 49] in [0, 7]");
            expectedResult.add("\n	LPA : [3, -44, -33, -34, 8, -5, -47, -24, 34, 44, 49] in [9, 10]");
            expectedResult.add("\nQS : [3, -44, -33, -34, 8, -5, -47, -24, 34, 44, 49] in [0, 7]");
            expectedResult.add("\n	LPA : [-47, -44, -33, -34, -24, -5, 3, 8, 34, 44, 49] in [0, 3]");
            expectedResult.add("\n	LPA : [-47, -44, -33, -34, -24, -5, 3, 8, 34, 44, 49] in [5, 7]");
            expectedResult.add("\nQS : [-47, -44, -33, -34, -24, -5, 3, 8, 34, 44, 49] in [0, 3]");
            expectedResult.add("\n	LPA : [-47, -44, -34, -33, -24, -5, 3, 8, 34, 44, 49] in [0, 1]");
            expectedResult.add("\n	LPA : [-47, -44, -34, -33, -24, -5, 3, 8, 34, 44, 49] in [3, 3]");
            expectedResult.add("\nQS : [-47, -44, -34, -33, -24, -5, 3, 8, 34, 44, 49] in [0, 1]");
            expectedResult.add("\n	LPA : [-47, -44, -34, -33, -24, -5, 3, 8, 34, 44, 49] in [0, 0]");
            expectedResult.add("\n	LPA : [-47, -44, -34, -33, -24, -5, 3, 8, 34, 44, 49] in [2, 1]");
            expectedResult.add("\nQS : [-47, -44, -34, -33, -24, -5, 3, 8, 34, 44, 49] in [5, 7]");
            expectedResult.add("\n	LPA : [-47, -44, -34, -33, -24, -5, 3, 8, 34, 44, 49] in [5, 6]");
            expectedResult.add("\n	LPA : [-47, -44, -34, -33, -24, -5, 3, 8, 34, 44, 49] in [8, 7]");
            expectedResult.add("\nQS : [-47, -44, -34, -33, -24, -5, 3, 8, 34, 44, 49] in [5, 6]");
            expectedResult.add("\n	LPA : [-47, -44, -34, -33, -24, -5, 3, 8, 34, 44, 49] in [5, 5]");
            expectedResult.add("\n	LPA : [-47, -44, -34, -33, -24, -5, 3, 8, 34, 44, 49] in [7, 6]");
            expectedResult.add("\nQS : [-47, -44, -34, -33, -24, -5, 3, 8, 34, 44, 49] in [9, 10]");
            expectedResult.add("\n	LPA : [-47, -44, -34, -33, -24, -5, 3, 8, 34, 44, 49] in [9, 9]");
            expectedResult.add("\n	LPA : [-47, -44, -34, -33, -24, -5, 3, 8, 34, 44, 49] in [11, 10]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {6, 37, 10, 5, -35, -25, -31, 4, -40, 27, 12, 43, -16, 30, -45, -18};
        sortedArray = new int[]{-45, -40, -35, -31, -25, -18, -16, 4, 5, 6, 10, 12, 27, 30, 37, 43};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [6, 37, 10, 5, -35, -25, -31, 4, -40, 27, 12, 43, -16, 30, -45, -18] in [0, 15]");
            expectedResult.add("\n	LPA : [-45, -40, -31, -25, -35, -18, 10, 4, 37, 27, 12, 43, -16, 30, 6, 5] in [0, 4]");
            expectedResult.add("\n	LPA : [-45, -40, -31, -25, -35, -18, 10, 4, 37, 27, 12, 43, -16, 30, 6, 5] in [6, 15]");
            expectedResult.add("\nQS : [-45, -40, -31, -25, -35, -18, 10, 4, 37, 27, 12, 43, -16, 30, 6, 5] in [0, 4]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -25, -31, -18, 10, 4, 37, 27, 12, 43, -16, 30, 6, 5] in [0, 1]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -25, -31, -18, 10, 4, 37, 27, 12, 43, -16, 30, 6, 5] in [3, 4]");
            expectedResult.add("\nQS : [-45, -40, -35, -25, -31, -18, 10, 4, 37, 27, 12, 43, -16, 30, 6, 5] in [0, 1]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -25, -31, -18, 10, 4, 37, 27, 12, 43, -16, 30, 6, 5] in [0, 0]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -25, -31, -18, 10, 4, 37, 27, 12, 43, -16, 30, 6, 5] in [2, 1]");
            expectedResult.add("\nQS : [-45, -40, -35, -25, -31, -18, 10, 4, 37, 27, 12, 43, -16, 30, 6, 5] in [3, 4]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, 10, 4, 37, 27, 12, 43, -16, 30, 6, 5] in [3, 2]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, 10, 4, 37, 27, 12, 43, -16, 30, 6, 5] in [4, 4]");
            expectedResult.add("\nQS : [-45, -40, -35, -31, -25, -18, 10, 4, 37, 27, 12, 43, -16, 30, 6, 5] in [6, 15]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [6, 7]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [9, 15]");
            expectedResult.add("\nQS : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [6, 7]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [6, 6]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [8, 7]");
            expectedResult.add("\nQS : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [9, 15]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 27, 12, 6, 10, 30, 37, 43] in [9, 13]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 27, 12, 6, 10, 30, 37, 43] in [15, 15]");
            expectedResult.add("\nQS : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 27, 12, 6, 10, 30, 37, 43] in [9, 13]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 27, 12, 6, 10, 30, 37, 43] in [9, 12]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 27, 12, 6, 10, 30, 37, 43] in [14, 13]");
            expectedResult.add("\nQS : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 27, 12, 6, 10, 30, 37, 43] in [9, 12]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 6, 10, 27, 12, 30, 37, 43] in [9, 9]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 6, 10, 27, 12, 30, 37, 43] in [11, 12]");
            expectedResult.add("\nQS : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 6, 10, 27, 12, 30, 37, 43] in [11, 12]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 6, 10, 12, 27, 30, 37, 43] in [11, 10]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 6, 10, 12, 27, 30, 37, 43] in [12, 12]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {-33, 48, 39, -5, -45, -37, -11, 48, -28, -7, -48, -39, 27, 2, 11, 39, 22, 19, -27, -38, -43};
        sortedArray = new int[]{-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -7, -5, 2, 11, 19, 22, 27, 39, 39, 48, 48};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [-33, 48, 39, -5, -45, -37, -11, 48, -28, -7, -48, -39, 27, 2, 11, 39, 22, 19, -27, -38, -43] in [0, 20]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -5, 48, -37, -11, 48, -28, -7, -33, -39, 27, 2, 11, 39, 22, 19, -27, -38, 39] in [0, 1]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -5, 48, -37, -11, 48, -28, -7, -33, -39, 27, 2, 11, 39, 22, 19, -27, -38, 39] in [3, 20]");
            expectedResult.add("\nQS : [-48, -45, -43, -5, 48, -37, -11, 48, -28, -7, -33, -39, 27, 2, 11, 39, 22, 19, -27, -38, 39] in [0, 1]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -5, 48, -37, -11, 48, -28, -7, -33, -39, 27, 2, 11, 39, 22, 19, -27, -38, 39] in [0, 0]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -5, 48, -37, -11, 48, -28, -7, -33, -39, 27, 2, 11, 39, 22, 19, -27, -38, 39] in [2, 1]");
            expectedResult.add("\nQS : [-48, -45, -43, -5, 48, -37, -11, 48, -28, -7, -33, -39, 27, 2, 11, 39, 22, 19, -27, -38, 39] in [3, 20]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -5, -38, -37, -11, -27, -28, -7, -33, -39, 27, 2, 11, 19, 22, 39, 48, 48, 39] in [3, 16]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -5, -38, -37, -11, -27, -28, -7, -33, -39, 27, 2, 11, 19, 22, 39, 48, 48, 39] in [18, 20]");
            expectedResult.add("\nQS : [-48, -45, -43, -5, -38, -37, -11, -27, -28, -7, -33, -39, 27, 2, 11, 19, 22, 39, 48, 48, 39] in [3, 16]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -5, -38, -37, -11, -27, -28, -7, -33, -39, 19, 2, 11, 22, 27, 39, 48, 48, 39] in [3, 14]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -5, -38, -37, -11, -27, -28, -7, -33, -39, 19, 2, 11, 22, 27, 39, 48, 48, 39] in [16, 16]");
            expectedResult.add("\nQS : [-48, -45, -43, -5, -38, -37, -11, -27, -28, -7, -33, -39, 19, 2, 11, 22, 27, 39, 48, 48, 39] in [3, 14]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -5, -38, -37, -11, -27, -28, -7, -33, -39, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [3, 12]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -5, -38, -37, -11, -27, -28, -7, -33, -39, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [14, 14]");
            expectedResult.add("\nQS : [-48, -45, -43, -5, -38, -37, -11, -27, -28, -7, -33, -39, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [3, 12]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -5, -38, -37, -11, -27, -28, -7, -33, -39, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [3, 11]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -5, -38, -37, -11, -27, -28, -7, -33, -39, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [13, 12]");
            expectedResult.add("\nQS : [-48, -45, -43, -5, -38, -37, -11, -27, -28, -7, -33, -39, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [3, 11]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -11, -27, -28, -7, -33, -5, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [3, 2]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -11, -27, -28, -7, -33, -5, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [4, 11]");
            expectedResult.add("\nQS : [-48, -45, -43, -39, -38, -37, -11, -27, -28, -7, -33, -5, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [4, 11]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -11, -27, -28, -7, -33, -5, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [4, 10]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -11, -27, -28, -7, -33, -5, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [12, 11]");
            expectedResult.add("\nQS : [-48, -45, -43, -39, -38, -37, -11, -27, -28, -7, -33, -5, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [4, 10]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -27, -28, -7, -11, -5, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [4, 5]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -27, -28, -7, -11, -5, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [7, 10]");
            expectedResult.add("\nQS : [-48, -45, -43, -39, -38, -37, -33, -27, -28, -7, -11, -5, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [4, 5]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -27, -28, -7, -11, -5, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [4, 4]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -27, -28, -7, -11, -5, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [6, 5]");
            expectedResult.add("\nQS : [-48, -45, -43, -39, -38, -37, -33, -27, -28, -7, -11, -5, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [7, 10]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -27, -28, -11, -7, -5, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [7, 8]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -27, -28, -11, -7, -5, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [10, 10]");
            expectedResult.add("\nQS : [-48, -45, -43, -39, -38, -37, -33, -27, -28, -11, -7, -5, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [7, 8]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -7, -5, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [7, 6]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -7, -5, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [8, 8]");
            expectedResult.add("\nQS : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -7, -5, 2, 11, 19, 22, 27, 39, 48, 48, 39] in [18, 20]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -7, -5, 2, 11, 19, 22, 27, 39, 39, 48, 48] in [18, 17]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -7, -5, 2, 11, 19, 22, 27, 39, 39, 48, 48] in [19, 20]");
            expectedResult.add("\nQS : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -7, -5, 2, 11, 19, 22, 27, 39, 39, 48, 48] in [19, 20]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -7, -5, 2, 11, 19, 22, 27, 39, 39, 48, 48] in [19, 18]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -7, -5, 2, 11, 19, 22, 27, 39, 39, 48, 48] in [20, 20]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {-5, -4, 5, 48, -20, -7, -45, 45, -10, -31, -24, 45, -3, 38, -33, -26, 32, 18, -15, -1, 3, 2, -4, 11, 33, -25};
        sortedArray = new int[]{-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 38, 45, 45, 48};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [-5, -4, 5, 48, -20, -7, -45, 45, -10, -31, -24, 45, -3, 38, -33, -26, 32, 18, -15, -1, 3, 2, -4, 11, 33, -25] in [0, 25]");
            expectedResult.add("\n	LPA : [-26, -33, -31, -45, -25, -7, 48, 45, -10, 5, -24, 45, -3, 38, -4, -5, 32, 18, -15, -1, 3, 2, -4, 11, 33, -20] in [0, 3]");
            expectedResult.add("\n	LPA : [-26, -33, -31, -45, -25, -7, 48, 45, -10, 5, -24, 45, -3, 38, -4, -5, 32, 18, -15, -1, 3, 2, -4, 11, 33, -20] in [5, 25]");
            expectedResult.add("\nQS : [-26, -33, -31, -45, -25, -7, 48, 45, -10, 5, -24, 45, -3, 38, -4, -5, 32, 18, -15, -1, 3, 2, -4, 11, 33, -20] in [0, 3]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -7, 48, 45, -10, 5, -24, 45, -3, 38, -4, -5, 32, 18, -15, -1, 3, 2, -4, 11, 33, -20] in [0, -1]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -7, 48, 45, -10, 5, -24, 45, -3, 38, -4, -5, 32, 18, -15, -1, 3, 2, -4, 11, 33, -20] in [1, 3]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -7, 48, 45, -10, 5, -24, 45, -3, 38, -4, -5, 32, 18, -15, -1, 3, 2, -4, 11, 33, -20] in [1, 3]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -7, 48, 45, -10, 5, -24, 45, -3, 38, -4, -5, 32, 18, -15, -1, 3, 2, -4, 11, 33, -20] in [1, 2]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -7, 48, 45, -10, 5, -24, 45, -3, 38, -4, -5, 32, 18, -15, -1, 3, 2, -4, 11, 33, -20] in [4, 3]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -7, 48, 45, -10, 5, -24, 45, -3, 38, -4, -5, 32, 18, -15, -1, 3, 2, -4, 11, 33, -20] in [1, 2]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -7, 48, 45, -10, 5, -24, 45, -3, 38, -4, -5, 32, 18, -15, -1, 3, 2, -4, 11, 33, -20] in [1, 1]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -7, 48, 45, -10, 5, -24, 45, -3, 38, -4, -5, 32, 18, -15, -1, 3, 2, -4, 11, 33, -20] in [3, 2]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -7, 48, 45, -10, 5, -24, 45, -3, 38, -4, -5, 32, 18, -15, -1, 3, 2, -4, 11, 33, -20] in [5, 25]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, 45, -10, 5, -7, 45, -3, 38, -4, -5, 32, 18, -15, -1, 3, 2, -4, 11, 33, 48] in [5, 5]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, 45, -10, 5, -7, 45, -3, 38, -4, -5, 32, 18, -15, -1, 3, 2, -4, 11, 33, 48] in [7, 25]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, 45, -10, 5, -7, 45, -3, 38, -4, -5, 32, 18, -15, -1, 3, 2, -4, 11, 33, 48] in [7, 25]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, 45, -10, 5, -7, 45, -3, 38, -4, -5, 32, 18, -15, -1, 3, 2, -4, 11, 33, 48] in [7, 24]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, 45, -10, 5, -7, 45, -3, 38, -4, -5, 32, 18, -15, -1, 3, 2, -4, 11, 33, 48] in [26, 25]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, 45, -10, 5, -7, 45, -3, 38, -4, -5, 32, 18, -15, -1, 3, 2, -4, 11, 33, 48] in [7, 24]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, 11, -10, 5, -7, -4, -3, 2, -4, -5, 32, 18, -15, -1, 3, 33, 45, 45, 38, 48] in [7, 20]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, 11, -10, 5, -7, -4, -3, 2, -4, -5, 32, 18, -15, -1, 3, 33, 45, 45, 38, 48] in [22, 24]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, 11, -10, 5, -7, -4, -3, 2, -4, -5, 32, 18, -15, -1, 3, 33, 45, 45, 38, 48] in [7, 20]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -1, -10, -15, -7, -4, -3, 2, -4, -5, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [7, 15]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -1, -10, -15, -7, -4, -3, 2, -4, -5, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [17, 20]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -1, -10, -15, -7, -4, -3, 2, -4, -5, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [7, 15]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -7, -10, -15, -5, -4, -3, 2, -4, -1, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [7, 9]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -7, -10, -15, -5, -4, -3, 2, -4, -1, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [11, 15]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -7, -10, -15, -5, -4, -3, 2, -4, -1, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [7, 9]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -3, 2, -4, -1, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [7, 6]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -3, 2, -4, -1, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [8, 9]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -3, 2, -4, -1, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [8, 9]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -3, 2, -4, -1, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [8, 8]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -3, 2, -4, -1, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [10, 9]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -3, 2, -4, -1, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [11, 15]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -3, -4, -1, 2, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [11, 13]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -3, -4, -1, 2, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [15, 15]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -3, -4, -1, 2, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [11, 13]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -3, -4, -1, 2, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [11, 10]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -3, -4, -1, 2, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [12, 13]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -3, -4, -1, 2, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [12, 13]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [12, 11]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [13, 13]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [17, 20]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [17, 19]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [21, 20]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 18, 5, 11, 32, 33, 45, 45, 38, 48] in [17, 19]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 45, 45, 38, 48] in [17, 17]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 45, 45, 38, 48] in [19, 19]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 45, 45, 38, 48] in [22, 24]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 38, 45, 45, 48] in [22, 21]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 38, 45, 45, 48] in [23, 24]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 38, 45, 45, 48] in [23, 24]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 38, 45, 45, 48] in [23, 22]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 38, 45, 45, 48] in [24, 24]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());

    }

    /**
     * Tests the quicksort using the mid pivot
     * Tests WITHOUT SELECTION SORT OPTIMISATION
     * Within the curly brackets is the expected log to be found
     * @author Aamin
     */
    @Test
    public void testQuickSortMidPivot() {
        Quicksort quicksort = new Quicksort(PivotFinder.getMidPivot(), 0);
        int[] array;
        int[] sortedArray;
        FastLoggingResult fastLoggingResult;
        List<String> expectedResult;

        array = new int[] {-23, 36, -38, 21, -31, -28, 17, -12, 14, 29, 11};
        sortedArray = new int[]{-38, -31, -28, -23, -12, 11, 14, 17, 21, 29, 36};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [-23, 36, -38, 21, -31, -28, 17, -12, 14, 29, 11] in [0, 10]");
            expectedResult.add("\n	LPA : [-31, -38, -28, 21, -23, 11, 17, -12, 14, 29, 36] in [0, 1]");
            expectedResult.add("\n	LPA : [-31, -38, -28, 21, -23, 11, 17, -12, 14, 29, 36] in [3, 10]");
            expectedResult.add("\nQS : [-31, -38, -28, 21, -23, 11, 17, -12, 14, 29, 36] in [0, 1]");
            expectedResult.add("\n	LPA : [-38, -31, -28, 21, -23, 11, 17, -12, 14, 29, 36] in [0, 0]");
            expectedResult.add("\n	LPA : [-38, -31, -28, 21, -23, 11, 17, -12, 14, 29, 36] in [2, 1]");
            expectedResult.add("\nQS : [-38, -31, -28, 21, -23, 11, 17, -12, 14, 29, 36] in [3, 10]");
            expectedResult.add("\n	LPA : [-38, -31, -28, 14, -23, 11, -12, 17, 21, 29, 36] in [3, 6]");
            expectedResult.add("\n	LPA : [-38, -31, -28, 14, -23, 11, -12, 17, 21, 29, 36] in [8, 10]");
            expectedResult.add("\nQS : [-38, -31, -28, 14, -23, 11, -12, 17, 21, 29, 36] in [3, 6]");
            expectedResult.add("\n	LPA : [-38, -31, -28, -23, -12, 11, 14, 17, 21, 29, 36] in [3, 2]");
            expectedResult.add("\n	LPA : [-38, -31, -28, -23, -12, 11, 14, 17, 21, 29, 36] in [4, 6]");
            expectedResult.add("\nQS : [-38, -31, -28, -23, -12, 11, 14, 17, 21, 29, 36] in [4, 6]");
            expectedResult.add("\n	LPA : [-38, -31, -28, -23, -12, 11, 14, 17, 21, 29, 36] in [4, 4]");
            expectedResult.add("\n	LPA : [-38, -31, -28, -23, -12, 11, 14, 17, 21, 29, 36] in [6, 6]");
            expectedResult.add("\nQS : [-38, -31, -28, -23, -12, 11, 14, 17, 21, 29, 36] in [8, 10]");
            expectedResult.add("\n	LPA : [-38, -31, -28, -23, -12, 11, 14, 17, 21, 29, 36] in [8, 8]");
            expectedResult.add("\n	LPA : [-38, -31, -28, -23, -12, 11, 14, 17, 21, 29, 36] in [10, 10]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {-45, 22, 43, 29, -17, 29, -29, -14, -7, -42, -23, 31, -33, 7, 0, -41};
        sortedArray = new int[]{-45, -42, -41, -33, -29, -23, -17, -14, -7, 0, 7, 22, 29, 29, 31, 43};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [-45, 22, 43, 29, -17, 29, -29, -14, -7, -42, -23, 31, -33, 7, 0, -41] in [0, 15]");
            expectedResult.add("\n	LPA : [-45, -33, -23, -42, -17, -41, -29, -14, -7, 29, 43, 31, 22, 7, 0, 29] in [0, 6]");
            expectedResult.add("\n	LPA : [-45, -33, -23, -42, -17, -41, -29, -14, -7, 29, 43, 31, 22, 7, 0, 29] in [8, 15]");
            expectedResult.add("\nQS : [-45, -33, -23, -42, -17, -41, -29, -14, -7, 29, 43, 31, 22, 7, 0, 29] in [0, 6]");
            expectedResult.add("\n	LPA : [-45, -42, -23, -29, -17, -41, -33, -14, -7, 29, 43, 31, 22, 7, 0, 29] in [0, 0]");
            expectedResult.add("\n	LPA : [-45, -42, -23, -29, -17, -41, -33, -14, -7, 29, 43, 31, 22, 7, 0, 29] in [2, 6]");
            expectedResult.add("\nQS : [-45, -42, -23, -29, -17, -41, -33, -14, -7, 29, 43, 31, 22, 7, 0, 29] in [2, 6]");
            expectedResult.add("\n	LPA : [-45, -42, -23, -29, -33, -41, -17, -14, -7, 29, 43, 31, 22, 7, 0, 29] in [2, 5]");
            expectedResult.add("\n	LPA : [-45, -42, -23, -29, -33, -41, -17, -14, -7, 29, 43, 31, 22, 7, 0, 29] in [7, 6]");
            expectedResult.add("\nQS : [-45, -42, -23, -29, -33, -41, -17, -14, -7, 29, 43, 31, 22, 7, 0, 29] in [2, 5]");
            expectedResult.add("\n	LPA : [-45, -42, -33, -41, -29, -23, -17, -14, -7, 29, 43, 31, 22, 7, 0, 29] in [2, 3]");
            expectedResult.add("\n	LPA : [-45, -42, -33, -41, -29, -23, -17, -14, -7, 29, 43, 31, 22, 7, 0, 29] in [5, 5]");
            expectedResult.add("\nQS : [-45, -42, -33, -41, -29, -23, -17, -14, -7, 29, 43, 31, 22, 7, 0, 29] in [2, 3]");
            expectedResult.add("\n	LPA : [-45, -42, -41, -33, -29, -23, -17, -14, -7, 29, 43, 31, 22, 7, 0, 29] in [2, 2]");
            expectedResult.add("\n	LPA : [-45, -42, -41, -33, -29, -23, -17, -14, -7, 29, 43, 31, 22, 7, 0, 29] in [4, 3]");
            expectedResult.add("\nQS : [-45, -42, -41, -33, -29, -23, -17, -14, -7, 29, 43, 31, 22, 7, 0, 29] in [8, 15]");
            expectedResult.add("\n	LPA : [-45, -42, -41, -33, -29, -23, -17, -14, -7, 29, 0, 29, 22, 7, 31, 43] in [8, 13]");
            expectedResult.add("\n	LPA : [-45, -42, -41, -33, -29, -23, -17, -14, -7, 29, 0, 29, 22, 7, 31, 43] in [15, 15]");
            expectedResult.add("\nQS : [-45, -42, -41, -33, -29, -23, -17, -14, -7, 29, 0, 29, 22, 7, 31, 43] in [8, 13]");
            expectedResult.add("\n	LPA : [-45, -42, -41, -33, -29, -23, -17, -14, -7, 0, 7, 29, 22, 29, 31, 43] in [8, 8]");
            expectedResult.add("\n	LPA : [-45, -42, -41, -33, -29, -23, -17, -14, -7, 0, 7, 29, 22, 29, 31, 43] in [10, 13]");
            expectedResult.add("\nQS : [-45, -42, -41, -33, -29, -23, -17, -14, -7, 0, 7, 29, 22, 29, 31, 43] in [10, 13]");
            expectedResult.add("\n	LPA : [-45, -42, -41, -33, -29, -23, -17, -14, -7, 0, 7, 22, 29, 29, 31, 43] in [10, 11]");
            expectedResult.add("\n	LPA : [-45, -42, -41, -33, -29, -23, -17, -14, -7, 0, 7, 22, 29, 29, 31, 43] in [13, 13]");
            expectedResult.add("\nQS : [-45, -42, -41, -33, -29, -23, -17, -14, -7, 0, 7, 22, 29, 29, 31, 43] in [10, 11]");
            expectedResult.add("\n	LPA : [-45, -42, -41, -33, -29, -23, -17, -14, -7, 0, 7, 22, 29, 29, 31, 43] in [10, 9]");
            expectedResult.add("\n	LPA : [-45, -42, -41, -33, -29, -23, -17, -14, -7, 0, 7, 22, 29, 29, 31, 43] in [11, 11]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {11, 9, 14, 47, 45, 30, 16, 0, -44, -35, -29, 36, 12, -48, 16, 4, -13, 1, -50, -41, -11};
        sortedArray = new int[]{-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 4, 9, 11, 12, 14, 16, 16, 30, 36, 45, 47};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [11, 9, 14, 47, 45, 30, 16, 0, -44, -35, -29, 36, 12, -48, 16, 4, -13, 1, -50, -41, -11] in [0, 20]");
            expectedResult.add("\n	LPA : [-41, -50, -48, -35, -44, -29, 16, 0, 45, 47, -11, 36, 12, 14, 16, 4, -13, 1, 9, 11, 30] in [0, 4]");
            expectedResult.add("\n	LPA : [-41, -50, -48, -35, -44, -29, 16, 0, 45, 47, -11, 36, 12, 14, 16, 4, -13, 1, 9, 11, 30] in [6, 20]");
            expectedResult.add("\nQS : [-41, -50, -48, -35, -44, -29, 16, 0, 45, 47, -11, 36, 12, 14, 16, 4, -13, 1, 9, 11, 30] in [0, 4]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -35, -41, -29, 16, 0, 45, 47, -11, 36, 12, 14, 16, 4, -13, 1, 9, 11, 30] in [0, 0]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -35, -41, -29, 16, 0, 45, 47, -11, 36, 12, 14, 16, 4, -13, 1, 9, 11, 30] in [2, 4]");
            expectedResult.add("\nQS : [-50, -48, -44, -35, -41, -29, 16, 0, 45, 47, -11, 36, 12, 14, 16, 4, -13, 1, 9, 11, 30] in [2, 4]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, 16, 0, 45, 47, -11, 36, 12, 14, 16, 4, -13, 1, 9, 11, 30] in [2, 3]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, 16, 0, 45, 47, -11, 36, 12, 14, 16, 4, -13, 1, 9, 11, 30] in [5, 4]");
            expectedResult.add("\nQS : [-50, -48, -44, -41, -35, -29, 16, 0, 45, 47, -11, 36, 12, 14, 16, 4, -13, 1, 9, 11, 30] in [2, 3]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, 16, 0, 45, 47, -11, 36, 12, 14, 16, 4, -13, 1, 9, 11, 30] in [2, 1]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, 16, 0, 45, 47, -11, 36, 12, 14, 16, 4, -13, 1, 9, 11, 30] in [3, 3]");
            expectedResult.add("\nQS : [-50, -48, -44, -41, -35, -29, 16, 0, 45, 47, -11, 36, 12, 14, 16, 4, -13, 1, 9, 11, 30] in [6, 20]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, 11, 0, 9, 1, -11, -13, 12, 4, 14, 30, 36, 47, 45, 16, 16] in [6, 13]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, 11, 0, 9, 1, -11, -13, 12, 4, 14, 30, 36, 47, 45, 16, 16] in [15, 20]");
            expectedResult.add("\nQS : [-50, -48, -44, -41, -35, -29, 11, 0, 9, 1, -11, -13, 12, 4, 14, 30, 36, 47, 45, 16, 16] in [6, 13]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, -13, 0, -11, 1, 9, 11, 12, 4, 14, 30, 36, 47, 45, 16, 16] in [6, 8]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, -13, 0, -11, 1, 9, 11, 12, 4, 14, 30, 36, 47, 45, 16, 16] in [10, 13]");
            expectedResult.add("\nQS : [-50, -48, -44, -41, -35, -29, -13, 0, -11, 1, 9, 11, 12, 4, 14, 30, 36, 47, 45, 16, 16] in [6, 8]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 9, 11, 12, 4, 14, 30, 36, 47, 45, 16, 16] in [6, 7]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 9, 11, 12, 4, 14, 30, 36, 47, 45, 16, 16] in [9, 8]");
            expectedResult.add("\nQS : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 9, 11, 12, 4, 14, 30, 36, 47, 45, 16, 16] in [6, 7]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 9, 11, 12, 4, 14, 30, 36, 47, 45, 16, 16] in [6, 5]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 9, 11, 12, 4, 14, 30, 36, 47, 45, 16, 16] in [7, 7]");
            expectedResult.add("\nQS : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 9, 11, 12, 4, 14, 30, 36, 47, 45, 16, 16] in [10, 13]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 9, 4, 11, 12, 14, 30, 36, 47, 45, 16, 16] in [10, 11]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 9, 4, 11, 12, 14, 30, 36, 47, 45, 16, 16] in [13, 13]");
            expectedResult.add("\nQS : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 9, 4, 11, 12, 14, 30, 36, 47, 45, 16, 16] in [10, 11]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 4, 9, 11, 12, 14, 30, 36, 47, 45, 16, 16] in [10, 10]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 4, 9, 11, 12, 14, 30, 36, 47, 45, 16, 16] in [12, 11]");
            expectedResult.add("\nQS : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 4, 9, 11, 12, 14, 30, 36, 47, 45, 16, 16] in [15, 20]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 4, 9, 11, 12, 14, 30, 36, 16, 45, 16, 47] in [15, 19]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 4, 9, 11, 12, 14, 30, 36, 16, 45, 16, 47] in [21, 20]");
            expectedResult.add("\nQS : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 4, 9, 11, 12, 14, 30, 36, 16, 45, 16, 47] in [15, 19]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 4, 9, 11, 12, 14, 16, 16, 30, 45, 36, 47] in [15, 15]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 4, 9, 11, 12, 14, 16, 16, 30, 45, 36, 47] in [17, 19]");
            expectedResult.add("\nQS : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 4, 9, 11, 12, 14, 16, 16, 30, 45, 36, 47] in [17, 19]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 4, 9, 11, 12, 14, 16, 16, 30, 36, 45, 47] in [17, 18]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 4, 9, 11, 12, 14, 16, 16, 30, 36, 45, 47] in [20, 19]");
            expectedResult.add("\nQS : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 4, 9, 11, 12, 14, 16, 16, 30, 36, 45, 47] in [17, 18]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 4, 9, 11, 12, 14, 16, 16, 30, 36, 45, 47] in [17, 16]");
            expectedResult.add("\n	LPA : [-50, -48, -44, -41, -35, -29, -13, -11, 0, 1, 4, 9, 11, 12, 14, 16, 16, 30, 36, 45, 47] in [18, 18]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {-45, -10, -11, -9, 29, -20, -45, -39, -47, -11, -6, 8, -18, -32, 19, 24, -31, -21, 1, 9, -46, 6, -34, -7, -17, 39};
        sortedArray = new int[]{-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -9, -7, -6, 1, 6, 8, 9, 19, 24, 29, 39};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [-45, -10, -11, -9, 29, -20, -45, -39, -47, -11, -6, 8, -18, -32, 19, 24, -31, -21, 1, 9, -46, 6, -34, -7, -17, 39] in [0, 25]");
            expectedResult.add("\n	LPA : [-45, -34, -46, -21, -31, -20, -45, -39, -47, -32, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [0, 9]");
            expectedResult.add("\n	LPA : [-45, -34, -46, -21, -31, -20, -45, -39, -47, -32, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [11, 25]");
            expectedResult.add("\nQS : [-45, -34, -46, -21, -31, -20, -45, -39, -47, -32, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [0, 9]");
            expectedResult.add("\n	LPA : [-45, -34, -46, -47, -32, -39, -45, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [0, 6]");
            expectedResult.add("\n	LPA : [-45, -34, -46, -47, -32, -39, -45, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [8, 9]");
            expectedResult.add("\nQS : [-45, -34, -46, -47, -32, -39, -45, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [0, 6]");
            expectedResult.add("\n	LPA : [-47, -34, -46, -45, -32, -39, -45, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [0, -1]");
            expectedResult.add("\n	LPA : [-47, -34, -46, -45, -32, -39, -45, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [1, 6]");
            expectedResult.add("\nQS : [-47, -34, -46, -45, -32, -39, -45, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [1, 6]");
            expectedResult.add("\n	LPA : [-47, -45, -46, -45, -32, -39, -34, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [1, 2]");
            expectedResult.add("\n	LPA : [-47, -45, -46, -45, -32, -39, -34, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [4, 6]");
            expectedResult.add("\nQS : [-47, -45, -46, -45, -32, -39, -34, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [1, 2]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -32, -39, -34, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [1, 1]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -32, -39, -34, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [3, 2]");
            expectedResult.add("\nQS : [-47, -46, -45, -45, -32, -39, -34, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [4, 6]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [4, 3]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [5, 6]");
            expectedResult.add("\nQS : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [5, 6]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [5, 4]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [6, 6]");
            expectedResult.add("\nQS : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [8, 9]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [8, 7]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [9, 9]");
            expectedResult.add("\nQS : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, 8, 39, -11, 19, 24, 29, -9, 1, 9, -11, 6, -10, -7, -17, -6] in [11, 25]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -7, -11, -10, -11, -6, -9, 1, 9, 24, 6, 19, 39, 8, 29] in [11, 17]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -7, -11, -10, -11, -6, -9, 1, 9, 24, 6, 19, 39, 8, 29] in [19, 25]");
            expectedResult.add("\nQS : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -7, -11, -10, -11, -6, -9, 1, 9, 24, 6, 19, 39, 8, 29] in [11, 17]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -7, -6, -9, 1, 9, 24, 6, 19, 39, 8, 29] in [11, 13]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -7, -6, -9, 1, 9, 24, 6, 19, 39, 8, 29] in [15, 17]");
            expectedResult.add("\nQS : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -7, -6, -9, 1, 9, 24, 6, 19, 39, 8, 29] in [11, 13]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -7, -6, -9, 1, 9, 24, 6, 19, 39, 8, 29] in [11, 11]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -7, -6, -9, 1, 9, 24, 6, 19, 39, 8, 29] in [13, 13]");
            expectedResult.add("\nQS : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -7, -6, -9, 1, 9, 24, 6, 19, 39, 8, 29] in [15, 17]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -7, -9, -6, 1, 9, 24, 6, 19, 39, 8, 29] in [15, 16]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -7, -9, -6, 1, 9, 24, 6, 19, 39, 8, 29] in [18, 17]");
            expectedResult.add("\nQS : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -7, -9, -6, 1, 9, 24, 6, 19, 39, 8, 29] in [15, 16]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -9, -7, -6, 1, 9, 24, 6, 19, 39, 8, 29] in [15, 15]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -9, -7, -6, 1, 9, 24, 6, 19, 39, 8, 29] in [17, 16]");
            expectedResult.add("\nQS : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -9, -7, -6, 1, 9, 24, 6, 19, 39, 8, 29] in [19, 25]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -9, -7, -6, 1, 9, 8, 6, 19, 39, 24, 29] in [19, 21]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -9, -7, -6, 1, 9, 8, 6, 19, 39, 24, 29] in [23, 25]");
            expectedResult.add("\nQS : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -9, -7, -6, 1, 9, 8, 6, 19, 39, 24, 29] in [19, 21]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -9, -7, -6, 1, 6, 8, 9, 19, 39, 24, 29] in [19, 19]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -9, -7, -6, 1, 6, 8, 9, 19, 39, 24, 29] in [21, 21]");
            expectedResult.add("\nQS : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -9, -7, -6, 1, 6, 8, 9, 19, 39, 24, 29] in [23, 25]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -9, -7, -6, 1, 6, 8, 9, 19, 24, 29, 39] in [23, 22]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -9, -7, -6, 1, 6, 8, 9, 19, 24, 29, 39] in [24, 25]");
            expectedResult.add("\nQS : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -9, -7, -6, 1, 6, 8, 9, 19, 24, 29, 39] in [24, 25]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -9, -7, -6, 1, 6, 8, 9, 19, 24, 29, 39] in [24, 23]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -45, -39, -34, -32, -31, -21, -20, -18, -17, -11, -11, -10, -9, -7, -6, 1, 6, 8, 9, 19, 24, 29, 39] in [25, 25]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());
    }

    /**
     * Tests the quicksort using a random pivot (seed is provided)
     * Tests WITHOUT SELECTION SORT OPTIMISATION
     * Within the curly brackets is the expected log to be found
     * @author Aamin
     */
    @Test
    public void testQuickSortRandomPivot() {
        Quicksort quicksort = new Quicksort(PivotFinder.getRandomPivot(42069), 0);
        int[] array;
        int[] sortedArray;
        FastLoggingResult fastLoggingResult;
        List<String> expectedResult;

        array = new int[] {44, -44, -33, -34, 8, -5, -47, -24, 49, 3, 34};
        sortedArray = new int[]{-47, -44, -34, -33, -24, -5, 3, 8, 34, 44, 49};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [44, -44, -33, -34, 8, -5, -47, -24, 49, 3, 34] in [0, 10]");
            expectedResult.add("\n	LPA : [-47, -44, -33, -34, 8, -5, 34, -24, 49, 3, 44] in [0, -1]");
            expectedResult.add("\n	LPA : [-47, -44, -33, -34, 8, -5, 34, -24, 49, 3, 44] in [1, 10]");
            expectedResult.add("\nQS : [-47, -44, -33, -34, 8, -5, 34, -24, 49, 3, 44] in [1, 10]");
            expectedResult.add("\n	LPA : [-47, -44, -33, -34, 8, -5, 34, -24, 3, 44, 49] in [1, 8]");
            expectedResult.add("\n	LPA : [-47, -44, -33, -34, 8, -5, 34, -24, 3, 44, 49] in [10, 10]");
            expectedResult.add("\nQS : [-47, -44, -33, -34, 8, -5, 34, -24, 3, 44, 49] in [1, 8]");
            expectedResult.add("\n	LPA : [-47, -44, -33, -34, 3, -5, -24, 8, 34, 44, 49] in [1, 6]");
            expectedResult.add("\n	LPA : [-47, -44, -33, -34, 3, -5, -24, 8, 34, 44, 49] in [8, 8]");
            expectedResult.add("\nQS : [-47, -44, -33, -34, 3, -5, -24, 8, 34, 44, 49] in [1, 6]");
            expectedResult.add("\n	LPA : [-47, -44, -33, -34, -24, -5, 3, 8, 34, 44, 49] in [1, 5]");
            expectedResult.add("\n	LPA : [-47, -44, -33, -34, -24, -5, 3, 8, 34, 44, 49] in [7, 6]");
            expectedResult.add("\nQS : [-47, -44, -33, -34, -24, -5, 3, 8, 34, 44, 49] in [1, 5]");
            expectedResult.add("\n	LPA : [-47, -44, -34, -5, -24, -33, 3, 8, 34, 44, 49] in [1, 1]");
            expectedResult.add("\n	LPA : [-47, -44, -34, -5, -24, -33, 3, 8, 34, 44, 49] in [3, 5]");
            expectedResult.add("\nQS : [-47, -44, -34, -5, -24, -33, 3, 8, 34, 44, 49] in [3, 5]");
            expectedResult.add("\n	LPA : [-47, -44, -34, -33, -24, -5, 3, 8, 34, 44, 49] in [3, 3]");
            expectedResult.add("\n	LPA : [-47, -44, -34, -33, -24, -5, 3, 8, 34, 44, 49] in [5, 5]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {6, 37, 10, 5, -35, -25, -31, 4, -40, 27, 12, 43, -16, 30, -45, -18};
        sortedArray = new int[]{-45, -40, -35, -31, -25, -18, -16, 4, 5, 6, 10, 12, 27, 30, 37, 43};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [6, 37, 10, 5, -35, -25, -31, 4, -40, 27, 12, 43, -16, 30, -45, -18] in [0, 15]");
            expectedResult.add("\n	LPA : [-45, -40, -35, 5, -18, -25, -31, 4, 37, 27, 12, 43, -16, 30, 6, 10] in [0, 1]");
            expectedResult.add("\n	LPA : [-45, -40, -35, 5, -18, -25, -31, 4, 37, 27, 12, 43, -16, 30, 6, 10] in [3, 15]");
            expectedResult.add("\nQS : [-45, -40, -35, 5, -18, -25, -31, 4, 37, 27, 12, 43, -16, 30, 6, 10] in [0, 1]");
            expectedResult.add("\n	LPA : [-45, -40, -35, 5, -18, -25, -31, 4, 37, 27, 12, 43, -16, 30, 6, 10] in [0, -1]");
            expectedResult.add("\n	LPA : [-45, -40, -35, 5, -18, -25, -31, 4, 37, 27, 12, 43, -16, 30, 6, 10] in [1, 1]");
            expectedResult.add("\nQS : [-45, -40, -35, 5, -18, -25, -31, 4, 37, 27, 12, 43, -16, 30, 6, 10] in [3, 15]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -16, -18, -25, -31, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [3, 7]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -16, -18, -25, -31, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [9, 15]");
            expectedResult.add("\nQS : [-45, -40, -35, -16, -18, -25, -31, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [3, 7]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -16, -18, -25, -31, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [3, 6]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -16, -18, -25, -31, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [8, 7]");
            expectedResult.add("\nQS : [-45, -40, -35, -16, -18, -25, -31, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [3, 6]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -18, -25, -16, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [3, 2]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -18, -25, -16, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [4, 6]");
            expectedResult.add("\nQS : [-45, -40, -35, -31, -18, -25, -16, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [4, 6]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -18, -25, -16, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [4, 5]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -18, -25, -16, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [7, 6]");
            expectedResult.add("\nQS : [-45, -40, -35, -31, -18, -25, -16, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [4, 5]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [4, 4]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [6, 5]");
            expectedResult.add("\nQS : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 27, 12, 43, 10, 30, 6, 37] in [9, 15]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 27, 12, 6, 10, 30, 37, 43] in [9, 13]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 27, 12, 6, 10, 30, 37, 43] in [15, 15]");
            expectedResult.add("\nQS : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 27, 12, 6, 10, 30, 37, 43] in [9, 13]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 6, 10, 27, 30, 12, 37, 43] in [9, 9]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 6, 10, 27, 30, 12, 37, 43] in [11, 13]");
            expectedResult.add("\nQS : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 6, 10, 27, 30, 12, 37, 43] in [11, 13]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 6, 10, 12, 27, 30, 37, 43] in [11, 11]");
            expectedResult.add("\n	LPA : [-45, -40, -35, -31, -25, -18, -16, 4, 5, 6, 10, 12, 27, 30, 37, 43] in [13, 13]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {-33, 48, 39, -5, -45, -37, -11, 48, -28, -7, -48, -39, 27, 2, 11, 39, 22, 19, -27, -38, -43};
        sortedArray = new int[]{-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -7, -5, 2, 11, 19, 22, 27, 39, 39, 48, 48};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [-33, 48, 39, -5, -45, -37, -11, 48, -28, -7, -48, -39, 27, 2, 11, 39, 22, 19, -27, -38, -43] in [0, 20]");
            expectedResult.add("\n	LPA : [-33, -38, -27, -5, -45, -37, -11, 19, -28, -7, -48, -39, 27, 2, 11, -43, 22, 39, 39, 48, 48] in [0, 16]");
            expectedResult.add("\n	LPA : [-33, -38, -27, -5, -45, -37, -11, 19, -28, -7, -48, -39, 27, 2, 11, -43, 22, 39, 39, 48, 48] in [18, 20]");
            expectedResult.add("\nQS : [-33, -38, -27, -5, -45, -37, -11, 19, -28, -7, -48, -39, 27, 2, 11, -43, 22, 39, 39, 48, 48] in [0, 16]");
            expectedResult.add("\n	LPA : [-33, -38, -43, -39, -45, -37, -48, -28, 22, -7, -11, -5, 27, 2, 11, -27, 19, 39, 39, 48, 48] in [0, 6]");
            expectedResult.add("\n	LPA : [-33, -38, -43, -39, -45, -37, -48, -28, 22, -7, -11, -5, 27, 2, 11, -27, 19, 39, 39, 48, 48] in [8, 16]");
            expectedResult.add("\nQS : [-33, -38, -43, -39, -45, -37, -48, -28, 22, -7, -11, -5, 27, 2, 11, -27, 19, 39, 39, 48, 48] in [0, 6]");
            expectedResult.add("\n	LPA : [-45, -48, -43, -39, -38, -37, -33, -28, 22, -7, -11, -5, 27, 2, 11, -27, 19, 39, 39, 48, 48] in [0, 3]");
            expectedResult.add("\n	LPA : [-45, -48, -43, -39, -38, -37, -33, -28, 22, -7, -11, -5, 27, 2, 11, -27, 19, 39, 39, 48, 48] in [5, 6]");
            expectedResult.add("\nQS : [-45, -48, -43, -39, -38, -37, -33, -28, 22, -7, -11, -5, 27, 2, 11, -27, 19, 39, 39, 48, 48] in [0, 3]");
            expectedResult.add("\n	LPA : [-48, -39, -43, -45, -38, -37, -33, -28, 22, -7, -11, -5, 27, 2, 11, -27, 19, 39, 39, 48, 48] in [0, -1]");
            expectedResult.add("\n	LPA : [-48, -39, -43, -45, -38, -37, -33, -28, 22, -7, -11, -5, 27, 2, 11, -27, 19, 39, 39, 48, 48] in [1, 3]");
            expectedResult.add("\nQS : [-48, -39, -43, -45, -38, -37, -33, -28, 22, -7, -11, -5, 27, 2, 11, -27, 19, 39, 39, 48, 48] in [1, 3]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, 22, -7, -11, -5, 27, 2, 11, -27, 19, 39, 39, 48, 48] in [1, 1]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, 22, -7, -11, -5, 27, 2, 11, -27, 19, 39, 39, 48, 48] in [3, 3]");
            expectedResult.add("\nQS : [-48, -45, -43, -39, -38, -37, -33, -28, 22, -7, -11, -5, 27, 2, 11, -27, 19, 39, 39, 48, 48] in [5, 6]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, 22, -7, -11, -5, 27, 2, 11, -27, 19, 39, 39, 48, 48] in [5, 5]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, 22, -7, -11, -5, 27, 2, 11, -27, 19, 39, 39, 48, 48] in [7, 6]");
            expectedResult.add("\nQS : [-48, -45, -43, -39, -38, -37, -33, -28, 22, -7, -11, -5, 27, 2, 11, -27, 19, 39, 39, 48, 48] in [8, 16]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -7, -11, -5, 27, 2, 11, 19, 22, 39, 39, 48, 48] in [8, 7]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -7, -11, -5, 27, 2, 11, 19, 22, 39, 39, 48, 48] in [9, 16]");
            expectedResult.add("\nQS : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -7, -11, -5, 27, 2, 11, 19, 22, 39, 39, 48, 48] in [9, 16]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -7, -11, -5, 19, 2, 11, 22, 27, 39, 39, 48, 48] in [9, 14]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -7, -11, -5, 19, 2, 11, 22, 27, 39, 39, 48, 48] in [16, 16]");
            expectedResult.add("\nQS : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -7, -11, -5, 19, 2, 11, 22, 27, 39, 39, 48, 48] in [9, 14]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -7, -11, -5, 2, 11, 19, 22, 27, 39, 39, 48, 48] in [9, 11]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -7, -11, -5, 2, 11, 19, 22, 27, 39, 39, 48, 48] in [13, 14]");
            expectedResult.add("\nQS : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -7, -11, -5, 2, 11, 19, 22, 27, 39, 39, 48, 48] in [9, 11]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -5, -7, 2, 11, 19, 22, 27, 39, 39, 48, 48] in [9, 8]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -5, -7, 2, 11, 19, 22, 27, 39, 39, 48, 48] in [10, 11]");
            expectedResult.add("\nQS : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -5, -7, 2, 11, 19, 22, 27, 39, 39, 48, 48] in [10, 11]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -7, -5, 2, 11, 19, 22, 27, 39, 39, 48, 48] in [10, 10]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -7, -5, 2, 11, 19, 22, 27, 39, 39, 48, 48] in [12, 11]");
            expectedResult.add("\nQS : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -7, -5, 2, 11, 19, 22, 27, 39, 39, 48, 48] in [13, 14]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -7, -5, 2, 11, 19, 22, 27, 39, 39, 48, 48] in [13, 12]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -7, -5, 2, 11, 19, 22, 27, 39, 39, 48, 48] in [14, 14]");
            expectedResult.add("\nQS : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -7, -5, 2, 11, 19, 22, 27, 39, 39, 48, 48] in [18, 20]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -7, -5, 2, 11, 19, 22, 27, 39, 39, 48, 48] in [18, 18]");
            expectedResult.add("\n	LPA : [-48, -45, -43, -39, -38, -37, -33, -28, -27, -11, -7, -5, 2, 11, 19, 22, 27, 39, 39, 48, 48] in [20, 20]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {-5, -4, 5, 48, -20, -7, -45, 45, -10, -31, -24, 45, -3, 38, -33, -26, 32, 18, -15, -1, 3, 2, -4, 11, 33, -25};
        sortedArray = new int[]{-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 38, 45, 45, 48};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [-5, -4, 5, 48, -20, -7, -45, 45, -10, -31, -24, 45, -3, 38, -33, -26, 32, 18, -15, -1, 3, 2, -4, 11, 33, -25] in [0, 25]");
            expectedResult.add("\n	LPA : [-5, -4, 5, -25, -20, -7, -45, 11, -10, -31, -24, -4, -3, 2, -33, -26, 32, 18, -15, -1, 3, 33, 45, 45, 48, 38] in [0, 20]");
            expectedResult.add("\n	LPA : [-5, -4, 5, -25, -20, -7, -45, 11, -10, -31, -24, -4, -3, 2, -33, -26, 32, 18, -15, -1, 3, 33, 45, 45, 48, 38] in [22, 25]");
            expectedResult.add("\nQS : [-5, -4, 5, -25, -20, -7, -45, 11, -10, -31, -24, -4, -3, 2, -33, -26, 32, 18, -15, -1, 3, 33, 45, 45, 48, 38] in [0, 20]");
            expectedResult.add("\n	LPA : [-26, -33, -24, -25, -20, -31, -45, -15, -10, -7, 5, -4, -3, 2, -4, -5, 32, 18, 3, -1, 11, 33, 45, 45, 48, 38] in [0, 6]");
            expectedResult.add("\n	LPA : [-26, -33, -24, -25, -20, -31, -45, -15, -10, -7, 5, -4, -3, 2, -4, -5, 32, 18, 3, -1, 11, 33, 45, 45, 48, 38] in [8, 20]");
            expectedResult.add("\nQS : [-26, -33, -24, -25, -20, -31, -45, -15, -10, -7, 5, -4, -3, 2, -4, -5, 32, 18, 3, -1, 11, 33, 45, 45, 48, 38] in [0, 6]");
            expectedResult.add("\n	LPA : [-26, -33, -45, -25, -31, -24, -20, -15, -10, -7, 5, -4, -3, 2, -4, -5, 32, 18, 3, -1, 11, 33, 45, 45, 48, 38] in [0, 4]");
            expectedResult.add("\n	LPA : [-26, -33, -45, -25, -31, -24, -20, -15, -10, -7, 5, -4, -3, 2, -4, -5, 32, 18, 3, -1, 11, 33, 45, 45, 48, 38] in [6, 6]");
            expectedResult.add("\nQS : [-26, -33, -45, -25, -31, -24, -20, -15, -10, -7, 5, -4, -3, 2, -4, -5, 32, 18, 3, -1, 11, 33, 45, 45, 48, 38] in [0, 4]");
            expectedResult.add("\n	LPA : [-26, -33, -45, -31, -25, -24, -20, -15, -10, -7, 5, -4, -3, 2, -4, -5, 32, 18, 3, -1, 11, 33, 45, 45, 48, 38] in [0, 3]");
            expectedResult.add("\n	LPA : [-26, -33, -45, -31, -25, -24, -20, -15, -10, -7, 5, -4, -3, 2, -4, -5, 32, 18, 3, -1, 11, 33, 45, 45, 48, 38] in [5, 4]");
            expectedResult.add("\nQS : [-26, -33, -45, -31, -25, -24, -20, -15, -10, -7, 5, -4, -3, 2, -4, -5, 32, 18, 3, -1, 11, 33, 45, 45, 48, 38] in [0, 3]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, 5, -4, -3, 2, -4, -5, 32, 18, 3, -1, 11, 33, 45, 45, 48, 38] in [0, 1]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, 5, -4, -3, 2, -4, -5, 32, 18, 3, -1, 11, 33, 45, 45, 48, 38] in [3, 3]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, 5, -4, -3, 2, -4, -5, 32, 18, 3, -1, 11, 33, 45, 45, 48, 38] in [0, 1]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, 5, -4, -3, 2, -4, -5, 32, 18, 3, -1, 11, 33, 45, 45, 48, 38] in [0, 0]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, 5, -4, -3, 2, -4, -5, 32, 18, 3, -1, 11, 33, 45, 45, 48, 38] in [2, 1]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, 5, -4, -3, 2, -4, -5, 32, 18, 3, -1, 11, 33, 45, 45, 48, 38] in [8, 20]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, 5, -4, -3, 2, -4, -5, 32, 18, 3, -1, 11, 33, 45, 45, 48, 38] in [8, 7]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, 5, -4, -3, 2, -4, -5, 32, 18, 3, -1, 11, 33, 45, 45, 48, 38] in [9, 20]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, 5, -4, -3, 2, -4, -5, 32, 18, 3, -1, 11, 33, 45, 45, 48, 38] in [9, 20]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, 2, 11, 5, 32, 18, 3, -1, -3, 33, 45, 45, 48, 38] in [9, 11]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, 2, 11, 5, 32, 18, 3, -1, -3, 33, 45, 45, 48, 38] in [13, 20]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, 2, 11, 5, 32, 18, 3, -1, -3, 33, 45, 45, 48, 38] in [9, 11]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, 2, 11, 5, 32, 18, 3, -1, -3, 33, 45, 45, 48, 38] in [9, 8]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, 2, 11, 5, 32, 18, 3, -1, -3, 33, 45, 45, 48, 38] in [10, 11]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, 2, 11, 5, 32, 18, 3, -1, -3, 33, 45, 45, 48, 38] in [10, 11]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, 2, 11, 5, 32, 18, 3, -1, -3, 33, 45, 45, 48, 38] in [10, 9]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, 2, 11, 5, 32, 18, 3, -1, -3, 33, 45, 45, 48, 38] in [11, 11]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, 2, 11, 5, 32, 18, 3, -1, -3, 33, 45, 45, 48, 38] in [13, 20]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 32, 18, 3, 11, 5, 33, 45, 45, 48, 38] in [13, 14]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 32, 18, 3, 11, 5, 33, 45, 45, 48, 38] in [16, 20]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 32, 18, 3, 11, 5, 33, 45, 45, 48, 38] in [13, 14]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 32, 18, 3, 11, 5, 33, 45, 45, 48, 38] in [13, 13]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 32, 18, 3, 11, 5, 33, 45, 45, 48, 38] in [15, 14]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 32, 18, 3, 11, 5, 33, 45, 45, 48, 38] in [16, 20]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 5, 18, 3, 11, 32, 33, 45, 45, 48, 38] in [16, 19]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 5, 18, 3, 11, 32, 33, 45, 45, 48, 38] in [21, 20]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 5, 18, 3, 11, 32, 33, 45, 45, 48, 38] in [16, 19]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 45, 45, 48, 38] in [16, 16]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 45, 45, 48, 38] in [18, 19]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 45, 45, 48, 38] in [18, 19]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 45, 45, 48, 38] in [18, 17]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 45, 45, 48, 38] in [19, 19]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 45, 45, 48, 38] in [22, 25]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 38, 45, 48, 45] in [22, 22]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 38, 45, 48, 45] in [24, 25]");
            expectedResult.add("\nQS : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 38, 45, 48, 45] in [24, 25]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 38, 45, 45, 48] in [24, 24]");
            expectedResult.add("\n	LPA : [-45, -33, -31, -26, -25, -24, -20, -15, -10, -7, -5, -4, -4, -3, -1, 2, 3, 5, 11, 18, 32, 33, 38, 45, 45, 48] in [26, 25]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());
    }

    /**
     * Tests the quicksort using YOUR IMPLEMENTATION OF MEDIAN FRONT (Elements to be considered = 3)
     * Tests WITHOUT SELECTION SORT OPTIMISATION
     * Within the curly brackets is the expected log to be found
     * @author Aamin
     */
    @Test
    public void testQuickSortMedianPivotFront3() {
        Quicksort quicksort = new Quicksort(PivotFinder.getMedianPivotFront(3), 0);
        int[] array;
        int[] sortedArray;
        FastLoggingResult fastLoggingResult;
        List<String> expectedResult;

        array = new int[] {-23, 36, -38, 21, -31, -28, 17, -12, 14, 29, 11, -45, 22, 43, 29, -17};
        sortedArray = new int[]{-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 22, 29, 29, 36, 43};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [-23, 36, -38, 21, -31, -28, 17, -12, 14, 29, 11, -45, 22, 43, 29, -17] in [0, 15]");
            expectedResult.add("\n	LPA : [-45, -28, -38, -31, -23, 36, 17, -12, 14, 29, 11, -17, 22, 43, 29, 21] in [0, 3]");
            expectedResult.add("\n	LPA : [-45, -28, -38, -31, -23, 36, 17, -12, 14, 29, 11, -17, 22, 43, 29, 21] in [5, 15]");
            expectedResult.add("\nQS : [-45, -28, -38, -31, -23, 36, 17, -12, 14, 29, 11, -17, 22, 43, 29, 21] in [0, 3]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, 36, 17, -12, 14, 29, 11, -17, 22, 43, 29, 21] in [0, 0]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, 36, 17, -12, 14, 29, 11, -17, 22, 43, 29, 21] in [2, 3]");
            expectedResult.add("\nQS : [-45, -38, -31, -28, -23, 36, 17, -12, 14, 29, 11, -17, 22, 43, 29, 21] in [2, 3]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, 36, 17, -12, 14, 29, 11, -17, 22, 43, 29, 21] in [2, 1]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, 36, 17, -12, 14, 29, 11, -17, 22, 43, 29, 21] in [3, 3]");
            expectedResult.add("\nQS : [-45, -38, -31, -28, -23, 36, 17, -12, 14, 29, 11, -17, 22, 43, 29, 21] in [5, 15]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, 11, -12, 14, 17, 21, 36, 22, 43, 29, 29] in [5, 8]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, 11, -12, 14, 17, 21, 36, 22, 43, 29, 29] in [10, 15]");
            expectedResult.add("\nQS : [-45, -38, -31, -28, -23, -17, 11, -12, 14, 17, 21, 36, 22, 43, 29, 29] in [5, 8]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 14, 11, 17, 21, 36, 22, 43, 29, 29] in [5, 5]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 14, 11, 17, 21, 36, 22, 43, 29, 29] in [7, 8]");
            expectedResult.add("\nQS : [-45, -38, -31, -28, -23, -17, -12, 14, 11, 17, 21, 36, 22, 43, 29, 29] in [7, 8]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 36, 22, 43, 29, 29] in [7, 6]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 36, 22, 43, 29, 29] in [8, 8]");
            expectedResult.add("\nQS : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 36, 22, 43, 29, 29] in [10, 15]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 22, 29, 43, 29, 36] in [10, 10]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 22, 29, 43, 29, 36] in [12, 15]");
            expectedResult.add("\nQS : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 22, 29, 43, 29, 36] in [12, 15]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 22, 29, 29, 36, 43] in [12, 12]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 22, 29, 29, 36, 43] in [14, 15]");
            expectedResult.add("\nQS : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 22, 29, 29, 36, 43] in [14, 15]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 22, 29, 29, 36, 43] in [14, 13]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 22, 29, 29, 36, 43] in [15, 15]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {29, -29, -14, -7, -42, -23, 31, -33, 7, 0, -41, 11, 9, 14, 47, 45, 30, 16, 0, -44, -35};
        sortedArray = new int[]{-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 14, 16, 29, 30, 31, 45, 47};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [29, -29, -14, -7, -42, -23, 31, -33, 7, 0, -41, 11, 9, 14, 47, 45, 30, 16, 0, -44, -35] in [0, 20]");
            expectedResult.add("\n	LPA : [-44, -29, -35, -41, -42, -23, -33, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [0, 6]");
            expectedResult.add("\n	LPA : [-44, -29, -35, -41, -42, -23, -33, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [8, 20]");
            expectedResult.add("\nQS : [-44, -29, -35, -41, -42, -23, -33, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [0, 6]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -29, -23, -33, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [0, 2]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -29, -23, -33, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [4, 6]");
            expectedResult.add("\nQS : [-44, -42, -41, -35, -29, -23, -33, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [0, 2]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -29, -23, -33, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [0, 0]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -29, -23, -33, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [2, 2]");
            expectedResult.add("\nQS : [-44, -42, -41, -35, -29, -23, -33, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [4, 6]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [4, 4]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [6, 6]");
            expectedResult.add("\nQS : [-44, -42, -41, -35, -33, -29, -23, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [8, 20]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, 0, -7, 0, 11, 9, 14, 47, 45, 30, 16, 7, 29, 31] in [8, 9]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, 0, -7, 0, 11, 9, 14, 47, 45, 30, 16, 7, 29, 31] in [11, 20]");
            expectedResult.add("\nQS : [-44, -42, -41, -35, -33, -29, -23, -14, 0, -7, 0, 11, 9, 14, 47, 45, 30, 16, 7, 29, 31] in [8, 9]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 11, 9, 14, 47, 45, 30, 16, 7, 29, 31] in [8, 7]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 11, 9, 14, 47, 45, 30, 16, 7, 29, 31] in [9, 9]");
            expectedResult.add("\nQS : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 11, 9, 14, 47, 45, 30, 16, 7, 29, 31] in [11, 20]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 47, 45, 30, 16, 31, 29, 14] in [11, 12]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 47, 45, 30, 16, 31, 29, 14] in [14, 20]");
            expectedResult.add("\nQS : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 47, 45, 30, 16, 31, 29, 14] in [11, 12]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 47, 45, 30, 16, 31, 29, 14] in [11, 10]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 47, 45, 30, 16, 31, 29, 14] in [12, 12]");
            expectedResult.add("\nQS : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 47, 45, 30, 16, 31, 29, 14] in [14, 20]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 29, 14, 30, 16, 31, 45, 47] in [14, 18]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 29, 14, 30, 16, 31, 45, 47] in [20, 20]");
            expectedResult.add("\nQS : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 29, 14, 30, 16, 31, 45, 47] in [14, 18]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 16, 14, 29, 31, 30, 45, 47] in [14, 15]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 16, 14, 29, 31, 30, 45, 47] in [17, 18]");
            expectedResult.add("\nQS : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 16, 14, 29, 31, 30, 45, 47] in [14, 15]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 14, 16, 29, 31, 30, 45, 47] in [14, 13]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 14, 16, 29, 31, 30, 45, 47] in [15, 15]");
            expectedResult.add("\nQS : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 14, 16, 29, 31, 30, 45, 47] in [17, 18]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 14, 16, 29, 30, 31, 45, 47] in [17, 16]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 14, 16, 29, 30, 31, 45, 47] in [18, 18]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {-29, 36, 12, -48, 16, 4, -13, 1, -50, -41, -11, -45, -10, -11, -9, 29, -20, -45, -39, -47, -11, -6, 8, -18, -32, 19};
        sortedArray = new int[]{-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 1, 4, 8, 12, 16, 19, 29, 36};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [-29, 36, 12, -48, 16, 4, -13, 1, -50, -41, -11, -45, -10, -11, -9, 29, -20, -45, -39, -47, -11, -6, 8, -18, -32, 19] in [0, 25]");
            expectedResult.add("\n	LPA : [-29, -32, -18, -48, 8, 4, -13, 1, -50, -41, -11, -45, -10, -11, -9, -6, -20, -45, -39, -47, -11, 12, 16, 19, 36, 29] in [0, 20]");
            expectedResult.add("\n	LPA : [-29, -32, -18, -48, 8, 4, -13, 1, -50, -41, -11, -45, -10, -11, -9, -6, -20, -45, -39, -47, -11, 12, 16, 19, 36, 29] in [22, 25]");
            expectedResult.add("\nQS : [-29, -32, -18, -48, 8, 4, -13, 1, -50, -41, -11, -45, -10, -11, -9, -6, -20, -45, -39, -47, -11, 12, 16, 19, 36, 29] in [0, 20]");
            expectedResult.add("\n	LPA : [-47, -32, -39, -48, -45, -45, -41, -50, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [0, 7]");
            expectedResult.add("\n	LPA : [-47, -32, -39, -48, -45, -45, -41, -50, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [9, 20]");
            expectedResult.add("\nQS : [-47, -32, -39, -48, -45, -45, -41, -50, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [0, 7]");
            expectedResult.add("\n	LPA : [-47, -41, -50, -48, -45, -45, -39, -32, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [0, 5]");
            expectedResult.add("\n	LPA : [-47, -41, -50, -48, -45, -45, -39, -32, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [7, 7]");
            expectedResult.add("\nQS : [-47, -41, -50, -48, -45, -45, -39, -32, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [0, 5]");
            expectedResult.add("\n	LPA : [-48, -50, -47, -45, -45, -41, -39, -32, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [0, 1]");
            expectedResult.add("\n	LPA : [-48, -50, -47, -45, -45, -41, -39, -32, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [3, 5]");
            expectedResult.add("\nQS : [-48, -50, -47, -45, -45, -41, -39, -32, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [0, 1]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [0, -1]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [1, 1]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [3, 5]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [3, 3]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [5, 5]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [9, 20]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -13, -11, -18, -20, -11, -9, -6, -10, 8, 4, 1, -11, 12, 16, 19, 36, 29] in [9, 12]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -13, -11, -18, -20, -11, -9, -6, -10, 8, 4, 1, -11, 12, 16, 19, 36, 29] in [14, 20]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -13, -11, -18, -20, -11, -9, -6, -10, 8, 4, 1, -11, 12, 16, 19, 36, 29] in [9, 12]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -9, -6, -10, 8, 4, 1, -11, 12, 16, 19, 36, 29] in [9, 10]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -9, -6, -10, 8, 4, 1, -11, 12, 16, 19, 36, 29] in [12, 12]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -9, -6, -10, 8, 4, 1, -11, 12, 16, 19, 36, 29] in [9, 10]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -9, -6, -10, 8, 4, 1, -11, 12, 16, 19, 36, 29] in [9, 8]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -9, -6, -10, 8, 4, 1, -11, 12, 16, 19, 36, 29] in [10, 10]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -9, -6, -10, 8, 4, 1, -11, 12, 16, 19, 36, 29] in [14, 20]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, 8, 4, 1, -6, 12, 16, 19, 36, 29] in [14, 15]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, 8, 4, 1, -6, 12, 16, 19, 36, 29] in [17, 20]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, 8, 4, 1, -6, 12, 16, 19, 36, 29] in [14, 15]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, 8, 4, 1, -6, 12, 16, 19, 36, 29] in [14, 13]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, 8, 4, 1, -6, 12, 16, 19, 36, 29] in [15, 15]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, 8, 4, 1, -6, 12, 16, 19, 36, 29] in [17, 20]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, 1, -6, 4, 8, 12, 16, 19, 36, 29] in [17, 18]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, 1, -6, 4, 8, 12, 16, 19, 36, 29] in [20, 20]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, 1, -6, 4, 8, 12, 16, 19, 36, 29] in [17, 18]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 1, 4, 8, 12, 16, 19, 36, 29] in [17, 16]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 1, 4, 8, 12, 16, 19, 36, 29] in [18, 18]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 1, 4, 8, 12, 16, 19, 36, 29] in [22, 25]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 1, 4, 8, 12, 16, 19, 36, 29] in [22, 22]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 1, 4, 8, 12, 16, 19, 36, 29] in [24, 25]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 1, 4, 8, 12, 16, 19, 36, 29] in [24, 25]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 1, 4, 8, 12, 16, 19, 29, 36] in [24, 23]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 1, 4, 8, 12, 16, 19, 29, 36] in [25, 25]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());
    }

    /**
     * Tests the quicksort using YOUR IMPLEMENTATION OF MEDIAN FRONT (Elements to be considered = 5)
     * Tests WITHOUT SELECTION SORT OPTIMISATION
     * Within the curly brackets is the expected log to be found
     * @author Aamin
     */
    @Test
    public void testQuickSortMedianPivotFront5() {
        Quicksort quicksort = new Quicksort(PivotFinder.getMedianPivotFront(5), 0);
        int[] array;
        int[] sortedArray;
        FastLoggingResult fastLoggingResult;
        List<String> expectedResult;

        array = new int[] {-23, 36, -38, 21, -31, -28, 17, -12, 14, 29, 11, -45, 22, 43, 29, -17};
        sortedArray = new int[]{-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 22, 29, 29, 36, 43};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [-23, 36, -38, 21, -31, -28, 17, -12, 14, 29, 11, -45, 22, 43, 29, -17] in [0, 15]");
            expectedResult.add("\n	LPA : [-45, -28, -38, -31, -23, 36, 17, -12, 14, 29, 11, -17, 22, 43, 29, 21] in [0, 3]");
            expectedResult.add("\n	LPA : [-45, -28, -38, -31, -23, 36, 17, -12, 14, 29, 11, -17, 22, 43, 29, 21] in [5, 15]");
            expectedResult.add("\nQS : [-45, -28, -38, -31, -23, 36, 17, -12, 14, 29, 11, -17, 22, 43, 29, 21] in [0, 3]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, 36, 17, -12, 14, 29, 11, -17, 22, 43, 29, 21] in [0, 0]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, 36, 17, -12, 14, 29, 11, -17, 22, 43, 29, 21] in [2, 3]");
            expectedResult.add("\nQS : [-45, -38, -31, -28, -23, 36, 17, -12, 14, 29, 11, -17, 22, 43, 29, 21] in [2, 3]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, 36, 17, -12, 14, 29, 11, -17, 22, 43, 29, 21] in [2, 1]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, 36, 17, -12, 14, 29, 11, -17, 22, 43, 29, 21] in [3, 3]");
            expectedResult.add("\nQS : [-45, -38, -31, -28, -23, 36, 17, -12, 14, 29, 11, -17, 22, 43, 29, 21] in [5, 15]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, 11, -12, 14, 17, 21, 36, 22, 43, 29, 29] in [5, 8]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, 11, -12, 14, 17, 21, 36, 22, 43, 29, 29] in [10, 15]");
            expectedResult.add("\nQS : [-45, -38, -31, -28, -23, -17, 11, -12, 14, 17, 21, 36, 22, 43, 29, 29] in [5, 8]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 14, 11, 17, 21, 36, 22, 43, 29, 29] in [5, 5]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 14, 11, 17, 21, 36, 22, 43, 29, 29] in [7, 8]");
            expectedResult.add("\nQS : [-45, -38, -31, -28, -23, -17, -12, 14, 11, 17, 21, 36, 22, 43, 29, 29] in [7, 8]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 36, 22, 43, 29, 29] in [7, 6]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 36, 22, 43, 29, 29] in [8, 8]");
            expectedResult.add("\nQS : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 36, 22, 43, 29, 29] in [10, 15]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 29, 22, 29, 36, 43] in [10, 12]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 29, 22, 29, 36, 43] in [14, 15]");
            expectedResult.add("\nQS : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 29, 22, 29, 36, 43] in [10, 12]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 22, 29, 29, 36, 43] in [10, 10]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 22, 29, 29, 36, 43] in [12, 12]");
            expectedResult.add("\nQS : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 22, 29, 29, 36, 43] in [14, 15]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 22, 29, 29, 36, 43] in [14, 13]");
            expectedResult.add("\n	LPA : [-45, -38, -31, -28, -23, -17, -12, 11, 14, 17, 21, 22, 29, 29, 36, 43] in [15, 15]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {29, -29, -14, -7, -42, -23, 31, -33, 7, 0, -41, 11, 9, 14, 47, 45, 30, 16, 0, -44, -35};
        sortedArray = new int[]{-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 14, 16, 29, 30, 31, 45, 47};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [29, -29, -14, -7, -42, -23, 31, -33, 7, 0, -41, 11, 9, 14, 47, 45, 30, 16, 0, -44, -35] in [0, 20]");
            expectedResult.add("\n	LPA : [-44, -29, -35, -41, -42, -23, -33, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [0, 6]");
            expectedResult.add("\n	LPA : [-44, -29, -35, -41, -42, -23, -33, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [8, 20]");
            expectedResult.add("\nQS : [-44, -29, -35, -41, -42, -23, -33, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [0, 6]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -33, -29, -23, -35, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [0, 1]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -33, -29, -23, -35, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [3, 6]");
            expectedResult.add("\nQS : [-44, -42, -41, -33, -29, -23, -35, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [0, 1]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -33, -29, -23, -35, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [0, -1]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -33, -29, -23, -35, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [1, 1]");
            expectedResult.add("\nQS : [-44, -42, -41, -33, -29, -23, -35, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [3, 6]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -23, -29, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [3, 3]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -23, -29, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [5, 6]");
            expectedResult.add("\nQS : [-44, -42, -41, -35, -33, -23, -29, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [5, 6]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [5, 4]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [6, 6]");
            expectedResult.add("\nQS : [-44, -42, -41, -35, -33, -29, -23, -14, 7, 0, -7, 11, 9, 14, 47, 45, 30, 16, 0, 29, 31] in [8, 20]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, 0, 0, -7, 7, 9, 14, 47, 45, 30, 16, 31, 29, 11] in [8, 10]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, 0, 0, -7, 7, 9, 14, 47, 45, 30, 16, 31, 29, 11] in [12, 20]");
            expectedResult.add("\nQS : [-44, -42, -41, -35, -33, -29, -23, -14, 0, 0, -7, 7, 9, 14, 47, 45, 30, 16, 31, 29, 11] in [8, 10]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 14, 47, 45, 30, 16, 31, 29, 11] in [8, 8]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 14, 47, 45, 30, 16, 31, 29, 11] in [10, 10]");
            expectedResult.add("\nQS : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 14, 47, 45, 30, 16, 31, 29, 11] in [12, 20]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 14, 29, 16, 11, 30, 31, 47, 45] in [12, 16]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 14, 29, 16, 11, 30, 31, 47, 45] in [18, 20]");
            expectedResult.add("\nQS : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 14, 29, 16, 11, 30, 31, 47, 45] in [12, 16]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 14, 16, 29, 30, 31, 47, 45] in [12, 13]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 14, 16, 29, 30, 31, 47, 45] in [15, 16]");
            expectedResult.add("\nQS : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 14, 16, 29, 30, 31, 47, 45] in [12, 13]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 14, 16, 29, 30, 31, 47, 45] in [12, 11]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 14, 16, 29, 30, 31, 47, 45] in [13, 13]");
            expectedResult.add("\nQS : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 14, 16, 29, 30, 31, 47, 45] in [15, 16]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 14, 16, 29, 30, 31, 47, 45] in [15, 14]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 14, 16, 29, 30, 31, 47, 45] in [16, 16]");
            expectedResult.add("\nQS : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 14, 16, 29, 30, 31, 47, 45] in [18, 20]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 14, 16, 29, 30, 31, 45, 47] in [18, 18]");
            expectedResult.add("\n	LPA : [-44, -42, -41, -35, -33, -29, -23, -14, -7, 0, 0, 7, 9, 11, 14, 16, 29, 30, 31, 45, 47] in [20, 20]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {-29, 36, 12, -48, 16, 4, -13, 1, -50, -41, -11, -45, -10, -11, -9, 29, -20, -45, -39, -47, -11, -6, 8, -18, -32, 19};
        sortedArray = new int[]{-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 1, 4, 8, 12, 16, 19, 29, 36};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [-29, 36, 12, -48, 16, 4, -13, 1, -50, -41, -11, -45, -10, -11, -9, 29, -20, -45, -39, -47, -11, -6, 8, -18, -32, 19] in [0, 25]");
            expectedResult.add("\n	LPA : [-29, -32, -18, -48, 8, 4, -13, 1, -50, -41, -11, -45, -10, -11, -9, -6, -20, -45, -39, -47, -11, 12, 16, 19, 36, 29] in [0, 20]");
            expectedResult.add("\n	LPA : [-29, -32, -18, -48, 8, 4, -13, 1, -50, -41, -11, -45, -10, -11, -9, -6, -20, -45, -39, -47, -11, 12, 16, 19, 36, 29] in [22, 25]");
            expectedResult.add("\nQS : [-29, -32, -18, -48, 8, 4, -13, 1, -50, -41, -11, -45, -10, -11, -9, -6, -20, -45, -39, -47, -11, 12, 16, 19, 36, 29] in [0, 20]");
            expectedResult.add("\n	LPA : [-47, -32, -39, -48, -45, -45, -41, -50, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [0, 7]");
            expectedResult.add("\n	LPA : [-47, -32, -39, -48, -45, -45, -41, -50, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [9, 20]");
            expectedResult.add("\nQS : [-47, -32, -39, -48, -45, -45, -41, -50, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [0, 7]");
            expectedResult.add("\n	LPA : [-47, -45, -50, -48, -45, -32, -41, -39, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [0, 3]");
            expectedResult.add("\n	LPA : [-47, -45, -50, -48, -45, -32, -41, -39, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [5, 7]");
            expectedResult.add("\nQS : [-47, -45, -50, -48, -45, -32, -41, -39, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [0, 3]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -32, -41, -39, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [0, 0]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -32, -41, -39, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [2, 3]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -32, -41, -39, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [2, 3]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -32, -41, -39, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [2, 1]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -32, -41, -39, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [3, 3]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -32, -41, -39, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [5, 7]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [5, 5]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [7, 7]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -13, -11, 4, -10, -11, -9, -6, -20, 8, -18, -11, 1, 12, 16, 19, 36, 29] in [9, 20]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -13, -11, -18, -20, -11, -9, -6, -10, 8, 4, 1, -11, 12, 16, 19, 36, 29] in [9, 12]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -13, -11, -18, -20, -11, -9, -6, -10, 8, 4, 1, -11, 12, 16, 19, 36, 29] in [14, 20]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -13, -11, -18, -20, -11, -9, -6, -10, 8, 4, 1, -11, 12, 16, 19, 36, 29] in [9, 12]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -9, -6, -10, 8, 4, 1, -11, 12, 16, 19, 36, 29] in [9, 9]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -9, -6, -10, 8, 4, 1, -11, 12, 16, 19, 36, 29] in [11, 12]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -9, -6, -10, 8, 4, 1, -11, 12, 16, 19, 36, 29] in [11, 12]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -9, -6, -10, 8, 4, 1, -11, 12, 16, 19, 36, 29] in [11, 10]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -9, -6, -10, 8, 4, 1, -11, 12, 16, 19, 36, 29] in [12, 12]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -9, -6, -10, 8, 4, 1, -11, 12, 16, 19, 36, 29] in [14, 20]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -9, -11, -10, -6, 4, 1, 8, 12, 16, 19, 36, 29] in [14, 16]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -9, -11, -10, -6, 4, 1, 8, 12, 16, 19, 36, 29] in [18, 20]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -9, -11, -10, -6, 4, 1, 8, 12, 16, 19, 36, 29] in [14, 16]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 4, 1, 8, 12, 16, 19, 36, 29] in [14, 14]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 4, 1, 8, 12, 16, 19, 36, 29] in [16, 16]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 4, 1, 8, 12, 16, 19, 36, 29] in [18, 20]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 1, 4, 8, 12, 16, 19, 36, 29] in [18, 18]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 1, 4, 8, 12, 16, 19, 36, 29] in [20, 20]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 1, 4, 8, 12, 16, 19, 36, 29] in [22, 25]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 1, 4, 8, 12, 16, 19, 36, 29] in [22, 22]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 1, 4, 8, 12, 16, 19, 36, 29] in [24, 25]");
            expectedResult.add("\nQS : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 1, 4, 8, 12, 16, 19, 36, 29] in [24, 25]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 1, 4, 8, 12, 16, 19, 29, 36] in [24, 23]");
            expectedResult.add("\n	LPA : [-50, -48, -47, -45, -45, -41, -39, -32, -29, -20, -18, -13, -11, -11, -11, -10, -9, -6, 1, 4, 8, 12, 16, 19, 29, 36] in [25, 25]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {24, -31, -21, 1, 9, -46, 6, -34, -7, -17, 39, -35, 14, -33, 31, -18, 6, 8, -47, 45, 37, 35, 17, -32, -26, -44, -33, -45, -1, 22, 13};
        sortedArray = new int[]{-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 6, 6, 8, 9, 13, 14, 17, 22, 24, 31, 35, 37, 39, 45};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [24, -31, -21, 1, 9, -46, 6, -34, -7, -17, 39, -35, 14, -33, 31, -18, 6, 8, -47, 45, 37, 35, 17, -32, -26, -44, -33, -45, -1, 22, 13] in [0, 30]");
            expectedResult.add("\n	LPA : [-1, -31, -21, -45, -33, -46, -44, -34, -7, -17, -26, -35, -32, -33, -47, -18, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [0, 15]");
            expectedResult.add("\n	LPA : [-1, -31, -21, -45, -33, -46, -44, -34, -7, -17, -26, -35, -32, -33, -47, -18, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [17, 30]");
            expectedResult.add("\nQS : [-1, -31, -21, -45, -33, -46, -44, -34, -7, -17, -26, -35, -32, -33, -47, -18, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [0, 15]");
            expectedResult.add("\n	LPA : [-47, -33, -32, -45, -33, -46, -44, -34, -35, -31, -26, -7, -21, -18, -1, -17, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [0, 8]");
            expectedResult.add("\n	LPA : [-47, -33, -32, -45, -33, -46, -44, -34, -35, -31, -26, -7, -21, -18, -1, -17, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [10, 15]");
            expectedResult.add("\nQS : [-47, -33, -32, -45, -33, -46, -44, -34, -35, -31, -26, -7, -21, -18, -1, -17, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [0, 8]");
            expectedResult.add("\n	LPA : [-47, -35, -34, -45, -44, -46, -33, -32, -33, -31, -26, -7, -21, -18, -1, -17, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [0, 5]");
            expectedResult.add("\n	LPA : [-47, -35, -34, -45, -44, -46, -33, -32, -33, -31, -26, -7, -21, -18, -1, -17, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [7, 8]");
            expectedResult.add("\nQS : [-47, -35, -34, -45, -44, -46, -33, -32, -33, -31, -26, -7, -21, -18, -1, -17, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [0, 5]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -32, -33, -31, -26, -7, -21, -18, -1, -17, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [0, 2]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -32, -33, -31, -26, -7, -21, -18, -1, -17, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [4, 5]");
            expectedResult.add("\nQS : [-47, -46, -45, -44, -35, -34, -33, -32, -33, -31, -26, -7, -21, -18, -1, -17, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [0, 2]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -32, -33, -31, -26, -7, -21, -18, -1, -17, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [0, 0]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -32, -33, -31, -26, -7, -21, -18, -1, -17, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [2, 2]");
            expectedResult.add("\nQS : [-47, -46, -45, -44, -35, -34, -33, -32, -33, -31, -26, -7, -21, -18, -1, -17, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [4, 5]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -32, -33, -31, -26, -7, -21, -18, -1, -17, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [4, 3]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -32, -33, -31, -26, -7, -21, -18, -1, -17, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [5, 5]");
            expectedResult.add("\nQS : [-47, -46, -45, -44, -35, -34, -33, -32, -33, -31, -26, -7, -21, -18, -1, -17, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [7, 8]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -7, -21, -18, -1, -17, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [7, 6]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -7, -21, -18, -1, -17, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [8, 8]");
            expectedResult.add("\nQS : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -7, -21, -18, -1, -17, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [10, 15]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -1, -7, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [10, 11]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -1, -7, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [13, 15]");
            expectedResult.add("\nQS : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -1, -7, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [10, 11]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -1, -7, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [10, 9]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -1, -7, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [11, 11]");
            expectedResult.add("\nQS : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -1, -7, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [13, 15]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [13, 13]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [15, 15]");
            expectedResult.add("\nQS : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 8, 31, 45, 37, 35, 17, 14, 39, 6, 9, 13, 24, 22, 6] in [17, 30]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 8, 31, 22, 24, 6, 17, 14, 13, 6, 9, 35, 37, 45, 39] in [17, 26]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 8, 31, 22, 24, 6, 17, 14, 13, 6, 9, 35, 37, 45, 39] in [28, 30]");
            expectedResult.add("\nQS : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 8, 31, 22, 24, 6, 17, 14, 13, 6, 9, 35, 37, 45, 39] in [17, 26]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 8, 6, 9, 13, 6, 17, 14, 22, 31, 24, 35, 37, 45, 39] in [17, 23]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 8, 6, 9, 13, 6, 17, 14, 22, 31, 24, 35, 37, 45, 39] in [25, 26]");
            expectedResult.add("\nQS : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 8, 6, 9, 13, 6, 17, 14, 22, 31, 24, 35, 37, 45, 39] in [17, 23]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 6, 6, 8, 13, 14, 17, 9, 22, 31, 24, 35, 37, 45, 39] in [17, 18]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 6, 6, 8, 13, 14, 17, 9, 22, 31, 24, 35, 37, 45, 39] in [20, 23]");
            expectedResult.add("\nQS : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 6, 6, 8, 13, 14, 17, 9, 22, 31, 24, 35, 37, 45, 39] in [17, 18]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 6, 6, 8, 13, 14, 17, 9, 22, 31, 24, 35, 37, 45, 39] in [17, 16]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 6, 6, 8, 13, 14, 17, 9, 22, 31, 24, 35, 37, 45, 39] in [18, 18]");
            expectedResult.add("\nQS : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 6, 6, 8, 13, 14, 17, 9, 22, 31, 24, 35, 37, 45, 39] in [20, 23]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 6, 6, 8, 9, 13, 17, 14, 22, 31, 24, 35, 37, 45, 39] in [20, 20]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 6, 6, 8, 9, 13, 17, 14, 22, 31, 24, 35, 37, 45, 39] in [22, 23]");
            expectedResult.add("\nQS : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 6, 6, 8, 9, 13, 17, 14, 22, 31, 24, 35, 37, 45, 39] in [22, 23]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 6, 6, 8, 9, 13, 14, 17, 22, 31, 24, 35, 37, 45, 39] in [22, 21]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 6, 6, 8, 9, 13, 14, 17, 22, 31, 24, 35, 37, 45, 39] in [23, 23]");
            expectedResult.add("\nQS : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 6, 6, 8, 9, 13, 14, 17, 22, 31, 24, 35, 37, 45, 39] in [25, 26]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 6, 6, 8, 9, 13, 14, 17, 22, 24, 31, 35, 37, 45, 39] in [25, 24]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 6, 6, 8, 9, 13, 14, 17, 22, 24, 31, 35, 37, 45, 39] in [26, 26]");
            expectedResult.add("\nQS : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 6, 6, 8, 9, 13, 14, 17, 22, 24, 31, 35, 37, 45, 39] in [28, 30]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 6, 6, 8, 9, 13, 14, 17, 22, 24, 31, 35, 37, 39, 45] in [28, 28]");
            expectedResult.add("\n	LPA : [-47, -46, -45, -44, -35, -34, -33, -33, -32, -31, -26, -21, -18, -17, -7, -1, 1, 6, 6, 8, 9, 13, 14, 17, 22, 24, 31, 35, 37, 39, 45] in [30, 30]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());
    }

    /**
     * Tests the quicksort using YOUR IMPLEMENTATION OF DISTRIBUTED MEDIAN (Elements to be considered = 3)
     * If there are duplicates of the median, this test expects the FIRST MEDIAN to be selected as the pivot
     * Tests WITHOUT SELECTION SORT OPTIMISATION
     * Within the curly brackets is the expected log to be found
     * @author Aamin
     */
    @Test
    public void testQuickSortMedianPivotDistributed3() {
        Quicksort quicksort = new Quicksort(PivotFinder.getMedianPivotDistributed(3), 0);
        int[] array;
        int[] sortedArray;
        FastLoggingResult fastLoggingResult;
        List<String> expectedResult;

        array = new int[] {-35, -48, 40, -1, 5, 29, -37, -30, -19, -12, 12, 10, 36, 40, -16, 11};
        sortedArray = new int[]{-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 12, 29, 36, 40, 40};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [-35, -48, 40, -1, 5, 29, -37, -30, -19, -12, 12, 10, 36, 40, -16, 11] in [0, 15]");
            expectedResult.add("\n	LPA : [-35, -48, -37, -30, 5, 29, 40, 11, -19, -12, 12, 10, 36, 40, -16, -1] in [0, 2]");
            expectedResult.add("\n	LPA : [-35, -48, -37, -30, 5, 29, 40, 11, -19, -12, 12, 10, 36, 40, -16, -1] in [4, 15]");
            expectedResult.add("\nQS : [-35, -48, -37, -30, 5, 29, 40, 11, -19, -12, 12, 10, 36, 40, -16, -1] in [0, 2]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, 5, 29, 40, 11, -19, -12, 12, 10, 36, 40, -16, -1] in [0, 0]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, 5, 29, 40, 11, -19, -12, 12, 10, 36, 40, -16, -1] in [2, 2]");
            expectedResult.add("\nQS : [-48, -37, -35, -30, 5, 29, 40, 11, -19, -12, 12, 10, 36, 40, -16, -1] in [4, 15]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -16, -19, -12, 11, 29, -1, 12, 10, 36, 40, 5, 40] in [4, 5]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -16, -19, -12, 11, 29, -1, 12, 10, 36, 40, 5, 40] in [7, 15]");
            expectedResult.add("\nQS : [-48, -37, -35, -30, -16, -19, -12, 11, 29, -1, 12, 10, 36, 40, 5, 40] in [4, 5]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, 11, 29, -1, 12, 10, 36, 40, 5, 40] in [4, 3]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, 11, 29, -1, 12, 10, 36, 40, 5, 40] in [5, 5]");
            expectedResult.add("\nQS : [-48, -37, -35, -30, -19, -16, -12, 11, 29, -1, 12, 10, 36, 40, 5, 40] in [7, 15]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, 5, 10, -1, 11, 29, 36, 40, 40, 12] in [7, 9]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, 5, 10, -1, 11, 29, 36, 40, 40, 12] in [11, 15]");
            expectedResult.add("\nQS : [-48, -37, -35, -30, -19, -16, -12, 5, 10, -1, 11, 29, 36, 40, 40, 12] in [7, 9]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 29, 36, 40, 40, 12] in [7, 7]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 29, 36, 40, 40, 12] in [9, 9]");
            expectedResult.add("\nQS : [-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 29, 36, 40, 40, 12] in [11, 15]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 12, 29, 40, 40, 36] in [11, 11]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 12, 29, 40, 40, 36] in [13, 15]");
            expectedResult.add("\nQS : [-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 12, 29, 40, 40, 36] in [13, 15]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 12, 29, 36, 40, 40] in [13, 13]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 12, 29, 36, 40, 40] in [15, 15]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {-32, 6, 45, -25, 44, 42, 23, -29, 31, 39, -31, 28, 13, -50, -32, 41, -49, 15, 6, -35, -36};
        sortedArray = new int[]{-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 28, 31, 39, 41, 42, 44, 45};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [-32, 6, 45, -25, 44, 42, 23, -29, 31, 39, -31, 28, 13, -50, -32, 41, -49, 15, 6, -35, -36] in [0, 20]");
            expectedResult.add("\n	LPA : [-36, -35, -49, -32, -50, -32, 23, -29, 31, 39, -31, 28, 13, 44, -25, 41, 45, 15, 6, 6, 42] in [0, 4]");
            expectedResult.add("\n	LPA : [-36, -35, -49, -32, -50, -32, 23, -29, 31, 39, -31, 28, 13, 44, -25, 41, 45, 15, 6, 6, 42] in [6, 20]");
            expectedResult.add("\nQS : [-36, -35, -49, -32, -50, -32, 23, -29, 31, 39, -31, 28, 13, 44, -25, 41, 45, 15, 6, 6, 42] in [0, 4]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -32, -35, -32, 23, -29, 31, 39, -31, 28, 13, 44, -25, 41, 45, 15, 6, 6, 42] in [0, 0]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -32, -35, -32, 23, -29, 31, 39, -31, 28, 13, 44, -25, 41, 45, 15, 6, 6, 42] in [2, 4]");
            expectedResult.add("\nQS : [-50, -49, -36, -32, -35, -32, 23, -29, 31, 39, -31, 28, 13, 44, -25, 41, 45, 15, 6, 6, 42] in [2, 4]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, 23, -29, 31, 39, -31, 28, 13, 44, -25, 41, 45, 15, 6, 6, 42] in [2, 2]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, 23, -29, 31, 39, -31, 28, 13, 44, -25, 41, 45, 15, 6, 6, 42] in [4, 4]");
            expectedResult.add("\nQS : [-50, -49, -36, -35, -32, -32, 23, -29, 31, 39, -31, 28, 13, 44, -25, 41, 45, 15, 6, 6, 42] in [6, 20]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, 23, -29, 31, 39, -31, 28, 13, 6, -25, 41, 6, 15, 42, 44, 45] in [6, 17]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, 23, -29, 31, 39, -31, 28, 13, 6, -25, 41, 6, 15, 42, 44, 45] in [19, 20]");
            expectedResult.add("\nQS : [-50, -49, -36, -35, -32, -32, 23, -29, 31, 39, -31, 28, 13, 6, -25, 41, 6, 15, 42, 44, 45] in [6, 17]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, 15, -29, 6, -25, -31, 6, 13, 23, 39, 41, 31, 28, 42, 44, 45] in [6, 12]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, 15, -29, 6, -25, -31, 6, 13, 23, 39, 41, 31, 28, 42, 44, 45] in [14, 17]");
            expectedResult.add("\nQS : [-50, -49, -36, -35, -32, -32, 15, -29, 6, -25, -31, 6, 13, 23, 39, 41, 31, 28, 42, 44, 45] in [6, 12]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, 6, -29, 6, -25, -31, 13, 15, 23, 39, 41, 31, 28, 42, 44, 45] in [6, 10]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, 6, -29, 6, -25, -31, 13, 15, 23, 39, 41, 31, 28, 42, 44, 45] in [12, 12]");
            expectedResult.add("\nQS : [-50, -49, -36, -35, -32, -32, 6, -29, 6, -25, -31, 13, 15, 23, 39, 41, 31, 28, 42, 44, 45] in [6, 10]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 39, 41, 31, 28, 42, 44, 45] in [6, 8]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 39, 41, 31, 28, 42, 44, 45] in [10, 10]");
            expectedResult.add("\nQS : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 39, 41, 31, 28, 42, 44, 45] in [6, 8]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 39, 41, 31, 28, 42, 44, 45] in [6, 6]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 39, 41, 31, 28, 42, 44, 45] in [8, 8]");
            expectedResult.add("\nQS : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 39, 41, 31, 28, 42, 44, 45] in [14, 17]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 28, 31, 39, 41, 42, 44, 45] in [14, 15]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 28, 31, 39, 41, 42, 44, 45] in [17, 17]");
            expectedResult.add("\nQS : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 28, 31, 39, 41, 42, 44, 45] in [14, 15]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 28, 31, 39, 41, 42, 44, 45] in [14, 13]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 28, 31, 39, 41, 42, 44, 45] in [15, 15]");
            expectedResult.add("\nQS : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 28, 31, 39, 41, 42, 44, 45] in [19, 20]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 28, 31, 39, 41, 42, 44, 45] in [19, 18]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 28, 31, 39, 41, 42, 44, 45] in [20, 20]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {2, 34, 1, 23, -3, -25, -37, 10, 39, -24, -46, -32, 34, 8, 26, -48, -14, -36, 28, 2, -31, -13, 31, -40, 20, 5};
        sortedArray = new int[]{-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 23, 26, 28, 31, 34, 34, 39};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [2, 34, 1, 23, -3, -25, -37, 10, 39, -24, -46, -32, 34, 8, 26, -48, -14, -36, 28, 2, -31, -13, 31, -40, 20, 5] in [0, 25]");
            expectedResult.add("\n	LPA : [2, 5, 1, -40, -3, -25, -37, 10, -13, -24, -46, -32, -31, 8, 2, -48, -14, -36, 20, 26, 34, 39, 31, 23, 34, 28] in [0, 17]");
            expectedResult.add("\n	LPA : [2, 5, 1, -40, -3, -25, -37, 10, -13, -24, -46, -32, -31, 8, 2, -48, -14, -36, 20, 26, 34, 39, 31, 23, 34, 28] in [19, 25]");
            expectedResult.add("\nQS : [2, 5, 1, -40, -3, -25, -37, 10, -13, -24, -46, -32, -31, 8, 2, -48, -14, -36, 20, 26, 34, 39, 31, 23, 34, 28] in [0, 17]");
            expectedResult.add("\n	LPA : [-14, -48, -31, -40, -32, -25, -37, -46, -36, -24, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [0, 9]");
            expectedResult.add("\n	LPA : [-14, -48, -31, -40, -32, -25, -37, -46, -36, -24, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [11, 17]");
            expectedResult.add("\nQS : [-14, -48, -31, -40, -32, -25, -37, -46, -36, -24, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [0, 9]");
            expectedResult.add("\n	LPA : [-36, -48, -46, -40, -37, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [0, 4]");
            expectedResult.add("\n	LPA : [-36, -48, -46, -40, -37, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [6, 9]");
            expectedResult.add("\nQS : [-36, -48, -46, -40, -37, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [0, 4]");
            expectedResult.add("\n	LPA : [-40, -48, -46, -37, -36, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [0, 2]");
            expectedResult.add("\n	LPA : [-40, -48, -46, -37, -36, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [4, 4]");
            expectedResult.add("\nQS : [-40, -48, -46, -37, -36, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [0, 2]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [0, 0]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [2, 2]");
            expectedResult.add("\nQS : [-48, -46, -40, -37, -36, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [6, 9]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -25, -31, -24, -14, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [6, 7]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -25, -31, -24, -14, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [9, 9]");
            expectedResult.add("\nQS : [-48, -46, -40, -37, -36, -32, -25, -31, -24, -14, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [6, 7]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [6, 5]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [7, 7]");
            expectedResult.add("\nQS : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [11, 17]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [11, 13]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [15, 17]");
            expectedResult.add("\nQS : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [11, 13]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [11, 11]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [13, 13]");
            expectedResult.add("\nQS : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [15, 17]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [15, 15]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [17, 17]");
            expectedResult.add("\nQS : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [19, 25]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 23, 28, 31, 34, 34, 39] in [19, 20]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 23, 28, 31, 34, 34, 39] in [22, 25]");
            expectedResult.add("\nQS : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 23, 28, 31, 34, 34, 39] in [19, 20]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 23, 26, 28, 31, 34, 34, 39] in [19, 18]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 23, 26, 28, 31, 34, 34, 39] in [20, 20]");
            expectedResult.add("\nQS : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 23, 26, 28, 31, 34, 34, 39] in [22, 25]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 23, 26, 28, 31, 34, 34, 39] in [22, 23]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 23, 26, 28, 31, 34, 34, 39] in [25, 25]");
            expectedResult.add("\nQS : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 23, 26, 28, 31, 34, 34, 39] in [22, 23]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 23, 26, 28, 31, 34, 34, 39] in [22, 21]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 23, 26, 28, 31, 34, 34, 39] in [23, 23]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {27, -42, -48, 39, -50, 6, -5, 34, -15, -33, 6, 2, 9, -19, -42, -21, -5, -41, -34, 45, 3, 45, 16, -43, 12, 9, -18, 36, -43, 28, -19};
        sortedArray = new int[]{-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 39, 45, 45};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [27, -42, -48, 39, -50, 6, -5, 34, -15, -33, 6, 2, 9, -19, -42, -21, -5, -41, -34, 45, 3, 45, 16, -43, 12, 9, -18, 36, -43, 28, -19] in [0, 30]");
            expectedResult.add("\n	LPA : [-43, -42, -48, -43, -50, -34, -41, -21, -42, -33, -19, -19, 9, 6, -15, 34, -5, -5, 6, 45, 3, 45, 16, 39, 12, 9, -18, 36, 27, 28, 2] in [0, 10]");
            expectedResult.add("\n	LPA : [-43, -42, -48, -43, -50, -34, -41, -21, -42, -33, -19, -19, 9, 6, -15, 34, -5, -5, 6, 45, 3, 45, 16, 39, 12, 9, -18, 36, 27, 28, 2] in [12, 30]");
            expectedResult.add("\nQS : [-43, -42, -48, -43, -50, -34, -41, -21, -42, -33, -19, -19, 9, 6, -15, 34, -5, -5, 6, 45, 3, 45, 16, 39, 12, 9, -18, 36, 27, 28, 2] in [0, 10]");
            expectedResult.add("\n	LPA : [-43, -42, -48, -43, -50, -42, -41, -34, -19, -33, -21, -19, 9, 6, -15, 34, -5, -5, 6, 45, 3, 45, 16, 39, 12, 9, -18, 36, 27, 28, 2] in [0, 6]");
            expectedResult.add("\n	LPA : [-43, -42, -48, -43, -50, -42, -41, -34, -19, -33, -21, -19, 9, 6, -15, 34, -5, -5, 6, 45, 3, 45, 16, 39, 12, 9, -18, 36, 27, 28, 2] in [8, 10]");
            expectedResult.add("\nQS : [-43, -42, -48, -43, -50, -42, -41, -34, -19, -33, -21, -19, 9, 6, -15, 34, -5, -5, 6, 45, 3, 45, 16, 39, 12, 9, -18, 36, 27, 28, 2] in [0, 6]");
            expectedResult.add("\n	LPA : [-50, -43, -48, -43, -41, -42, -42, -34, -19, -33, -21, -19, 9, 6, -15, 34, -5, -5, 6, 45, 3, 45, 16, 39, 12, 9, -18, 36, 27, 28, 2] in [0, 2]");
            expectedResult.add("\n	LPA : [-50, -43, -48, -43, -41, -42, -42, -34, -19, -33, -21, -19, 9, 6, -15, 34, -5, -5, 6, 45, 3, 45, 16, 39, 12, 9, -18, 36, 27, 28, 2] in [4, 6]");
            expectedResult.add("\nQS : [-50, -43, -48, -43, -41, -42, -42, -34, -19, -33, -21, -19, 9, 6, -15, 34, -5, -5, 6, 45, 3, 45, 16, 39, 12, 9, -18, 36, 27, 28, 2] in [0, 2]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -41, -42, -42, -34, -19, -33, -21, -19, 9, 6, -15, 34, -5, -5, 6, 45, 3, 45, 16, 39, 12, 9, -18, 36, 27, 28, 2] in [0, 0]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -41, -42, -42, -34, -19, -33, -21, -19, 9, 6, -15, 34, -5, -5, 6, 45, 3, 45, 16, 39, 12, 9, -18, 36, 27, 28, 2] in [2, 2]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -41, -42, -42, -34, -19, -33, -21, -19, 9, 6, -15, 34, -5, -5, 6, 45, 3, 45, 16, 39, 12, 9, -18, 36, 27, 28, 2] in [4, 6]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -19, -33, -21, -19, 9, 6, -15, 34, -5, -5, 6, 45, 3, 45, 16, 39, 12, 9, -18, 36, 27, 28, 2] in [4, 4]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -19, -33, -21, -19, 9, 6, -15, 34, -5, -5, 6, 45, 3, 45, 16, 39, 12, 9, -18, 36, 27, 28, 2] in [6, 6]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -19, -33, -21, -19, 9, 6, -15, 34, -5, -5, 6, 45, 3, 45, 16, 39, 12, 9, -18, 36, 27, 28, 2] in [8, 10]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, 9, 6, -15, 34, -5, -5, 6, 45, 3, 45, 16, 39, 12, 9, -18, 36, 27, 28, 2] in [8, 8]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, 9, 6, -15, 34, -5, -5, 6, 45, 3, 45, 16, 39, 12, 9, -18, 36, 27, 28, 2] in [10, 10]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, 9, 6, -15, 34, -5, -5, 6, 45, 3, 45, 16, 39, 12, 9, -18, 36, 27, 28, 2] in [12, 30]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, 2, 6, -15, -18, -5, -5, 6, 9, 3, 9, 16, 39, 12, 45, 34, 36, 27, 28, 45] in [12, 20]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, 2, 6, -15, -18, -5, -5, 6, 9, 3, 9, 16, 39, 12, 45, 34, 36, 27, 28, 45] in [22, 30]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, 2, 6, -15, -18, -5, -5, 6, 9, 3, 9, 16, 39, 12, 45, 34, 36, 27, 28, 45] in [12, 20]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -5, -5, -15, -18, 2, 3, 6, 9, 6, 9, 16, 39, 12, 45, 34, 36, 27, 28, 45] in [12, 15]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -5, -5, -15, -18, 2, 3, 6, 9, 6, 9, 16, 39, 12, 45, 34, 36, 27, 28, 45] in [17, 20]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -5, -5, -15, -18, 2, 3, 6, 9, 6, 9, 16, 39, 12, 45, 34, 36, 27, 28, 45] in [12, 15]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 9, 6, 9, 16, 39, 12, 45, 34, 36, 27, 28, 45] in [12, 13]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 9, 6, 9, 16, 39, 12, 45, 34, 36, 27, 28, 45] in [15, 15]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 9, 6, 9, 16, 39, 12, 45, 34, 36, 27, 28, 45] in [12, 13]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 9, 6, 9, 16, 39, 12, 45, 34, 36, 27, 28, 45] in [12, 11]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 9, 6, 9, 16, 39, 12, 45, 34, 36, 27, 28, 45] in [13, 13]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 9, 6, 9, 16, 39, 12, 45, 34, 36, 27, 28, 45] in [17, 20]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 9, 6, 9, 16, 39, 12, 45, 34, 36, 27, 28, 45] in [17, 17]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 9, 6, 9, 16, 39, 12, 45, 34, 36, 27, 28, 45] in [19, 20]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 9, 6, 9, 16, 39, 12, 45, 34, 36, 27, 28, 45] in [19, 20]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 16, 39, 12, 45, 34, 36, 27, 28, 45] in [19, 18]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 16, 39, 12, 45, 34, 36, 27, 28, 45] in [20, 20]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 16, 39, 12, 45, 34, 36, 27, 28, 45] in [22, 30]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 16, 28, 12, 27, 34, 36, 45, 39, 45] in [22, 25]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 16, 28, 12, 27, 34, 36, 45, 39, 45] in [27, 30]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 16, 28, 12, 27, 34, 36, 45, 39, 45] in [22, 25]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 45, 39, 45] in [22, 22]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 45, 39, 45] in [24, 25]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 45, 39, 45] in [24, 25]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 45, 39, 45] in [24, 23]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 45, 39, 45] in [25, 25]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 45, 39, 45] in [27, 30]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 39, 45, 45] in [27, 27]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 39, 45, 45] in [29, 30]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 39, 45, 45] in [29, 30]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 39, 45, 45] in [29, 28]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 39, 45, 45] in [30, 30]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());



    }

    /**
     * Tests the quicksort using YOUR IMPLEMENTATION OF DISTRIBUTED MEDIAN (Elements to be considered = 5)
     * If there are duplicates of the median, this test expects the FIRST MEDIAN to be selected as the pivot
     * Tests WITHOUT SELECTION SORT OPTIMISATION
     * Within the curly brackets is the expected log to be found
     * @author Aamin
     */
    @Test
    public void testQuickSortMedianPivotDistributed5() {
        Quicksort quicksort = new Quicksort(PivotFinder.getMedianPivotDistributed(5), 0);
        int[] array;
        int[] sortedArray;
        FastLoggingResult fastLoggingResult;
        List<String> expectedResult;

        array = new int[] {-35, -48, 40, -1, 5, 29, -37, -30, -19, -12, 12, 10, 36, 40, -16, 11};
        sortedArray = new int[]{-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 12, 29, 36, 40, 40};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [-35, -48, 40, -1, 5, 29, -37, -30, -19, -12, 12, 10, 36, 40, -16, 11] in [0, 15]");
            expectedResult.add("\n	LPA : [-35, -48, -16, -19, -30, -37, -12, 5, -1, 11, 12, 10, 36, 40, 40, 29] in [0, 5]");
            expectedResult.add("\n	LPA : [-35, -48, -16, -19, -30, -37, -12, 5, -1, 11, 12, 10, 36, 40, 40, 29] in [7, 15]");
            expectedResult.add("\nQS : [-35, -48, -16, -19, -30, -37, -12, 5, -1, 11, 12, 10, 36, 40, 40, 29] in [0, 5]");
            expectedResult.add("\n	LPA : [-35, -48, -37, -30, -16, -19, -12, 5, -1, 11, 12, 10, 36, 40, 40, 29] in [0, 2]");
            expectedResult.add("\n	LPA : [-35, -48, -37, -30, -16, -19, -12, 5, -1, 11, 12, 10, 36, 40, 40, 29] in [4, 5]");
            expectedResult.add("\nQS : [-35, -48, -37, -30, -16, -19, -12, 5, -1, 11, 12, 10, 36, 40, 40, 29] in [0, 2]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -16, -19, -12, 5, -1, 11, 12, 10, 36, 40, 40, 29] in [0, 0]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -16, -19, -12, 5, -1, 11, 12, 10, 36, 40, 40, 29] in [2, 2]");
            expectedResult.add("\nQS : [-48, -37, -35, -30, -16, -19, -12, 5, -1, 11, 12, 10, 36, 40, 40, 29] in [4, 5]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, 5, -1, 11, 12, 10, 36, 40, 40, 29] in [4, 3]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, 5, -1, 11, 12, 10, 36, 40, 40, 29] in [5, 5]");
            expectedResult.add("\nQS : [-48, -37, -35, -30, -19, -16, -12, 5, -1, 11, 12, 10, 36, 40, 40, 29] in [7, 15]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, 5, -1, 10, 11, 29, 36, 40, 40, 12] in [7, 9]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, 5, -1, 10, 11, 29, 36, 40, 40, 12] in [11, 15]");
            expectedResult.add("\nQS : [-48, -37, -35, -30, -19, -16, -12, 5, -1, 10, 11, 29, 36, 40, 40, 12] in [7, 9]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 29, 36, 40, 40, 12] in [7, 7]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 29, 36, 40, 40, 12] in [9, 9]");
            expectedResult.add("\nQS : [-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 29, 36, 40, 40, 12] in [11, 15]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 29, 12, 36, 40, 40] in [11, 12]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 29, 12, 36, 40, 40] in [14, 15]");
            expectedResult.add("\nQS : [-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 29, 12, 36, 40, 40] in [11, 12]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 12, 29, 36, 40, 40] in [11, 10]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 12, 29, 36, 40, 40] in [12, 12]");
            expectedResult.add("\nQS : [-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 12, 29, 36, 40, 40] in [14, 15]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 12, 29, 36, 40, 40] in [14, 13]");
            expectedResult.add("\n	LPA : [-48, -37, -35, -30, -19, -16, -12, -1, 5, 10, 11, 12, 29, 36, 40, 40] in [15, 15]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {-32, 6, 45, -25, 44, 42, 23, -29, 31, 39, -31, 28, 13, -50, -32, 41, -49, 15, 6, -35, -36};
        sortedArray = new int[]{-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 28, 31, 39, 41, 42, 44, 45};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [-32, 6, 45, -25, 44, 42, 23, -29, 31, 39, -31, 28, 13, -50, -32, 41, -49, 15, 6, -35, -36] in [0, 20]");
            expectedResult.add("\n	LPA : [-32, -35, -49, -32, -50, -36, -31, -29, 31, 39, 42, 28, 13, 44, -25, 41, 45, 15, 6, 6, 23] in [0, 5]");
            expectedResult.add("\n	LPA : [-32, -35, -49, -32, -50, -36, -31, -29, 31, 39, 42, 28, 13, 44, -25, 41, 45, 15, 6, 6, 23] in [7, 20]");
            expectedResult.add("\nQS : [-32, -35, -49, -32, -50, -36, -31, -29, 31, 39, 42, 28, 13, 44, -25, 41, 45, 15, 6, 6, 23] in [0, 5]");
            expectedResult.add("\n	LPA : [-50, -36, -49, -35, -32, -32, -31, -29, 31, 39, 42, 28, 13, 44, -25, 41, 45, 15, 6, 6, 23] in [0, 2]");
            expectedResult.add("\n	LPA : [-50, -36, -49, -35, -32, -32, -31, -29, 31, 39, 42, 28, 13, 44, -25, 41, 45, 15, 6, 6, 23] in [4, 5]");
            expectedResult.add("\nQS : [-50, -36, -49, -35, -32, -32, -31, -29, 31, 39, 42, 28, 13, 44, -25, 41, 45, 15, 6, 6, 23] in [0, 2]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, 31, 39, 42, 28, 13, 44, -25, 41, 45, 15, 6, 6, 23] in [0, 0]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, 31, 39, 42, 28, 13, 44, -25, 41, 45, 15, 6, 6, 23] in [2, 2]");
            expectedResult.add("\nQS : [-50, -49, -36, -35, -32, -32, -31, -29, 31, 39, 42, 28, 13, 44, -25, 41, 45, 15, 6, 6, 23] in [4, 5]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, 31, 39, 42, 28, 13, 44, -25, 41, 45, 15, 6, 6, 23] in [4, 3]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, 31, 39, 42, 28, 13, 44, -25, 41, 45, 15, 6, 6, 23] in [5, 5]");
            expectedResult.add("\nQS : [-50, -49, -36, -35, -32, -32, -31, -29, 31, 39, 42, 28, 13, 44, -25, 41, 45, 15, 6, 6, 23] in [7, 20]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, 31, 39, 23, 28, 13, 6, -25, 41, 6, 15, 42, 44, 45] in [7, 17]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, 31, 39, 23, 28, 13, 6, -25, 41, 6, 15, 42, 44, 45] in [19, 20]");
            expectedResult.add("\nQS : [-50, -49, -36, -35, -32, -32, -31, -29, 31, 39, 23, 28, 13, 6, -25, 41, 6, 15, 42, 44, 45] in [7, 17]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, 6, -25, 23, 15, 13, 6, 28, 41, 31, 39, 42, 44, 45] in [7, 13]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, 6, -25, 23, 15, 13, 6, 28, 41, 31, 39, 42, 44, 45] in [15, 17]");
            expectedResult.add("\nQS : [-50, -49, -36, -35, -32, -32, -31, -29, 6, -25, 23, 15, 13, 6, 28, 41, 31, 39, 42, 44, 45] in [7, 13]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 23, 15, 13, 6, 28, 41, 31, 39, 42, 44, 45] in [7, 8]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 23, 15, 13, 6, 28, 41, 31, 39, 42, 44, 45] in [10, 13]");
            expectedResult.add("\nQS : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 23, 15, 13, 6, 28, 41, 31, 39, 42, 44, 45] in [7, 8]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 23, 15, 13, 6, 28, 41, 31, 39, 42, 44, 45] in [7, 6]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 23, 15, 13, 6, 28, 41, 31, 39, 42, 44, 45] in [8, 8]");
            expectedResult.add("\nQS : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 23, 15, 13, 6, 28, 41, 31, 39, 42, 44, 45] in [10, 13]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 23, 15, 28, 41, 31, 39, 42, 44, 45] in [10, 10]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 23, 15, 28, 41, 31, 39, 42, 44, 45] in [12, 13]");
            expectedResult.add("\nQS : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 23, 15, 28, 41, 31, 39, 42, 44, 45] in [12, 13]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 28, 41, 31, 39, 42, 44, 45] in [12, 11]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 28, 41, 31, 39, 42, 44, 45] in [13, 13]");
            expectedResult.add("\nQS : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 28, 41, 31, 39, 42, 44, 45] in [15, 17]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 28, 31, 39, 41, 42, 44, 45] in [15, 15]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 28, 31, 39, 41, 42, 44, 45] in [17, 17]");
            expectedResult.add("\nQS : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 28, 31, 39, 41, 42, 44, 45] in [19, 20]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 28, 31, 39, 41, 42, 44, 45] in [19, 18]");
            expectedResult.add("\n	LPA : [-50, -49, -36, -35, -32, -32, -31, -29, -25, 6, 6, 13, 15, 23, 28, 31, 39, 41, 42, 44, 45] in [20, 20]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {2, 34, 1, 23, -3, -25, -37, 10, 39, -24, -46, -32, 34, 8, 26, -48, -14, -36, 28, 2, -31, -13, 31, -40, 20, 5};
        sortedArray = new int[]{-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 23, 26, 28, 31, 34, 34, 39};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [2, 34, 1, 23, -3, -25, -37, 10, 39, -24, -46, -32, 34, 8, 26, -48, -14, -36, 28, 2, -31, -13, 31, -40, 20, 5] in [0, 25]");
            expectedResult.add("\n	LPA : [2, 5, 1, -40, -3, -25, -37, 10, -13, -24, -46, -32, -31, 8, 2, -48, -14, -36, 20, 26, 34, 39, 31, 23, 34, 28] in [0, 17]");
            expectedResult.add("\n	LPA : [2, 5, 1, -40, -3, -25, -37, 10, -13, -24, -46, -32, -31, 8, 2, -48, -14, -36, 20, 26, 34, 39, 31, 23, 34, 28] in [19, 25]");
            expectedResult.add("\nQS : [2, 5, 1, -40, -3, -25, -37, 10, -13, -24, -46, -32, -31, 8, 2, -48, -14, -36, 20, 26, 34, 39, 31, 23, 34, 28] in [0, 17]");
            expectedResult.add("\n	LPA : [-14, -48, -31, -40, -32, -25, -37, -46, -36, -24, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [0, 9]");
            expectedResult.add("\n	LPA : [-14, -48, -31, -40, -32, -25, -37, -46, -36, -24, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [11, 17]");
            expectedResult.add("\nQS : [-14, -48, -31, -40, -32, -25, -37, -46, -36, -24, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [0, 9]");
            expectedResult.add("\n	LPA : [-36, -48, -46, -40, -37, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [0, 4]");
            expectedResult.add("\n	LPA : [-36, -48, -46, -40, -37, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [6, 9]");
            expectedResult.add("\nQS : [-36, -48, -46, -40, -37, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [0, 4]");
            expectedResult.add("\n	LPA : [-46, -48, -40, -37, -36, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [0, 1]");
            expectedResult.add("\n	LPA : [-46, -48, -40, -37, -36, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [3, 4]");
            expectedResult.add("\nQS : [-46, -48, -40, -37, -36, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [0, 1]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [0, -1]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [1, 1]");
            expectedResult.add("\nQS : [-48, -46, -40, -37, -36, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [3, 4]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [3, 2]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [4, 4]");
            expectedResult.add("\nQS : [-48, -46, -40, -37, -36, -32, -24, -31, -14, -25, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [6, 9]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -14, -24, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [6, 6]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -14, -24, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [8, 9]");
            expectedResult.add("\nQS : [-48, -46, -40, -37, -36, -32, -31, -25, -14, -24, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [8, 9]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [8, 7]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [9, 9]");
            expectedResult.add("\nQS : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 8, 2, 5, 2, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [11, 17]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [11, 13]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [15, 17]");
            expectedResult.add("\nQS : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [11, 13]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [11, 11]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [13, 13]");
            expectedResult.add("\nQS : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [15, 17]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [15, 15]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [17, 17]");
            expectedResult.add("\nQS : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 34, 39, 31, 23, 34, 28] in [19, 25]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 23, 28, 31, 34, 34, 39] in [19, 21]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 23, 28, 31, 34, 34, 39] in [23, 25]");
            expectedResult.add("\nQS : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 26, 23, 28, 31, 34, 34, 39] in [19, 21]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 23, 26, 28, 31, 34, 34, 39] in [19, 19]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 23, 26, 28, 31, 34, 34, 39] in [21, 21]");
            expectedResult.add("\nQS : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 23, 26, 28, 31, 34, 34, 39] in [23, 25]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 23, 26, 28, 31, 34, 34, 39] in [23, 23]");
            expectedResult.add("\n	LPA : [-48, -46, -40, -37, -36, -32, -31, -25, -24, -14, -13, -3, 1, 2, 2, 5, 8, 10, 20, 23, 26, 28, 31, 34, 34, 39] in [25, 25]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {27, -42, -48, 39, -50, 6, -5, 34, -15, -33, 6, 2, 9, -19, -42, -21, -5, -41, -34, 45, 3, 45, 16, -43, 12, 9, -18, 36, -43, 28, -19};
        sortedArray = new int[]{-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 39, 45, 45};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nQS : [27, -42, -48, 39, -50, 6, -5, 34, -15, -33, 6, 2, 9, -19, -42, -21, -5, -41, -34, 45, 3, 45, 16, -43, 12, 9, -18, 36, -43, 28, -19] in [0, 30]");
            expectedResult.add("\n	LPA : [-19, -42, -48, -43, -50, 6, -5, -18, -15, -33, 6, 2, 9, -19, -42, -21, -5, -41, -34, 9, 3, 12, 16, -43, 27, 45, 34, 36, 39, 28, 45] in [0, 23]");
            expectedResult.add("\n	LPA : [-19, -42, -48, -43, -50, 6, -5, -18, -15, -33, 6, 2, 9, -19, -42, -21, -5, -41, -34, 9, 3, 12, 16, -43, 27, 45, 34, 36, 39, 28, 45] in [25, 30]");
            expectedResult.add("\nQS : [-19, -42, -48, -43, -50, 6, -5, -18, -15, -33, 6, 2, 9, -19, -42, -21, -5, -41, -34, 9, 3, 12, 16, -43, 27, 45, 34, 36, 39, 28, 45] in [0, 23]");
            expectedResult.add("\n	LPA : [-19, -42, -48, -43, -50, -43, -5, -18, -15, -33, -34, 2, -41, -19, -42, -21, -5, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [0, 16]");
            expectedResult.add("\n	LPA : [-19, -42, -48, -43, -50, -43, -5, -18, -15, -33, -34, 2, -41, -19, -42, -21, -5, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [18, 23]");
            expectedResult.add("\nQS : [-19, -42, -48, -43, -50, -43, -5, -18, -15, -33, -34, 2, -41, -19, -42, -21, -5, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [0, 16]");
            expectedResult.add("\n	LPA : [-21, -42, -48, -43, -50, -43, -42, -19, -41, -33, -34, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [0, 10]");
            expectedResult.add("\n	LPA : [-21, -42, -48, -43, -50, -43, -42, -19, -41, -33, -34, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [12, 16]");
            expectedResult.add("\nQS : [-21, -42, -48, -43, -50, -43, -42, -19, -41, -33, -34, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [0, 10]");
            expectedResult.add("\n	LPA : [-43, -50, -48, -43, -42, -21, -34, -19, -41, -33, -42, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [0, 3]");
            expectedResult.add("\n	LPA : [-43, -50, -48, -43, -42, -21, -34, -19, -41, -33, -42, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [5, 10]");
            expectedResult.add("\nQS : [-43, -50, -48, -43, -42, -21, -34, -19, -41, -33, -42, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [0, 3]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -21, -34, -19, -41, -33, -42, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [0, 0]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -21, -34, -19, -41, -33, -42, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [2, 3]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -21, -34, -19, -41, -33, -42, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [2, 3]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -21, -34, -19, -41, -33, -42, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [2, 1]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -21, -34, -19, -41, -33, -42, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [3, 3]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -21, -34, -19, -41, -33, -42, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [5, 10]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -34, -41, -33, -21, -19, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [5, 7]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -34, -41, -33, -21, -19, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [9, 10]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -34, -41, -33, -21, -19, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [5, 7]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [5, 5]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [7, 7]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [9, 10]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [9, 8]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [10, 10]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [12, 16]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [12, 14]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [16, 16]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -15, -18, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [12, 14]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [12, 12]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [14, 14]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 9, 6, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [18, 23]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [18, 19]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [21, 23]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [18, 19]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [18, 17]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [19, 19]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 12, 16, 9, 27, 45, 34, 36, 39, 28, 45] in [21, 23]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 45, 34, 36, 39, 28, 45] in [21, 21]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 45, 34, 36, 39, 28, 45] in [23, 23]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 45, 34, 36, 39, 28, 45] in [25, 30]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 39, 45, 45] in [25, 26]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 39, 45, 45] in [28, 30]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 39, 45, 45] in [25, 26]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 39, 45, 45] in [25, 24]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 39, 45, 45] in [26, 26]");
            expectedResult.add("\nQS : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 39, 45, 45] in [28, 30]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 39, 45, 45] in [28, 28]");
            expectedResult.add("\n	LPA : [-50, -48, -43, -43, -42, -42, -41, -34, -33, -21, -19, -19, -18, -15, -5, -5, 2, 3, 6, 6, 9, 9, 12, 16, 27, 28, 34, 36, 39, 45, 45] in [30, 30]");
        }
        quicksort.sort(array, fastLoggingResult, 0, array.length - 1);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());

    }

}
