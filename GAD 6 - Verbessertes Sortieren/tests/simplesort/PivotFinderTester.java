package tests.simplesort;

import gad.simplesort.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.Random;
import java.util.stream.IntStream;

//import static org.junit.jupiter.api.Assertions.*;
import static tests.simplesort.CustomAssertion.*;

class PivotFinderTester {

    @BeforeEach
    void printLine() {

        System.out.println("-------------------------");

    }

    /**
     * Test with random arrays to see if the actual last index is being returned or not
     * This should've been implemented already
     * @author Aamin
     */
    @Test
    public void lastPivotTest() {
        int[] array;
        array = new int[] {-399, 219, 81, -211, 183, -121, 264, -277, -65, -107, 445, -428, 214, -34, 259, 432, 295, 188, 269, 411, 164, -127, 38, 89, 283, 11};
        assertEquals(23, PivotFinder.getLastPivot().findPivot(array, 9, 23));
        array = new int[] {-236, -387, 182, 263, -315, 360, 135, -52, 333, -5, -159, 324, -442, 378, 278, -102, -77, 495, -414, 70, -448, -32, -489, -215, -352, 137, 361};
        assertEquals(25, PivotFinder.getLastPivot().findPivot(array, 13, 25));
        array = new int[] {129, -234, -442, -3, 174, -78, 236, 34, -487, 270, 102, 299, -406, 65, 428, -329, 177, 229, 239, -84, 68, 330, 366, 82, -123, 76, -41, 267};
        assertEquals(16, PivotFinder.getLastPivot().findPivot(array, 7, 16));
        array = new int[] {344, 61, -402, -340, 332, -341, 74, -84, -324, 474, -440, -500, -104, -19, 201, -318, 290, -122, -130, 112, 398, -260, 407, 348, -77, 156, -397, 204, 278};
        assertEquals(11, PivotFinder.getLastPivot().findPivot(array, 7, 11));
        array = new int[] {78, 387, 237, -134, 457, -28, 65, -202, -206, 242, 260, -442, 332, -494, -134, 455, -214, -217, 493, -6, 237, -177, -16, 370, -306, -194, 157, 74, -4, 399};
        assertEquals(24, PivotFinder.getLastPivot().findPivot(array, 22, 24));
        array = new int[] {-144, -250, 354, 69, 194, -443, 159, -439, -397, 353, -450, 393, -70, -292, -472, 216, -264, -69, 445, -85, -180, 352, 27, 159, 396, 493, -105, -404, 138, 83, -236};
        assertEquals(25, PivotFinder.getLastPivot().findPivot(array, 23, 25));
        array = new int[] {-479, -128, 61, 324, 162, 7, -96, -273, -441, -111, 26, -460, 3, -102, 393, 111, -475, 175, 169, 115, 215, 122, -178, 399, -417, 456, -341, -99, -143, 306, -194, 15};
        assertEquals(20, PivotFinder.getLastPivot().findPivot(array, 18, 20));
        array = new int[] {-393, -352, -131, 14, 43, -492, 481, 166, 472, 298, 268, 181, 307, 433, 25, -359, 282, 223, 167, -263, -479, 246, -364, -322, -413, 350, 92, 99, -434, -432, -79, 62, -121};
        assertEquals(29, PivotFinder.getLastPivot().findPivot(array, 28, 29));
        array = new int[] {-380, 378, 229, 317, -414, 426, -191, 244, -197, 452, 427, 28, 235, 376, -368, 67, -37, -468, -129, -434, 410, -227, -293, -405, 284, 148, -478, 193, -227, 98, -51, 380, 391, 322};
        assertEquals(24, PivotFinder.getLastPivot().findPivot(array, 13, 24));
        array = new int[] {-256, -258, -270, -375, -38, 173, 4, -347, -114, 194, 55, 494, 168, -468, 429, -487, -350, 477, 449, -45, -129, 442, 48, 324, 82, 463, -151, -277, -26, 375, 273, -407, 394, -239, -241};
        assertEquals(21, PivotFinder.getLastPivot().findPivot(array, 20, 21));
        array = new int[] {-440, 31, -479, -322, -453, 80, 17, 239, -261, 445, -496, 314, -217, 233, -434, -416, -123, 265, 299, -10, 136, 115, 356, -16, 79, -357, 53, 28, -282, -305, -257, 187, -301, -364, -201, 26};
        assertEquals(26, PivotFinder.getLastPivot().findPivot(array, 26, 26));
        array = new int[] {371, -133, 327, -40, -453, 433, 208, -209, -166, 118, -452, -358, -330, 264, -315, -56, 309, 241, 45, 340, 204, -472, -347, -216, 461, 86, 221, -241, 417, 449, 165, 479, 397, 384, 346, -454, 122};
        assertEquals(35, PivotFinder.getLastPivot().findPivot(array, 34, 35));
        array = new int[] {-315, 440, 244, 463, -371, -246, 460, 101, -467, 149, -199, 67, 279, 280, 89, 144, -144, 332, 5, 390, -11, 304, -438, -131, -461, -58, 276, -483, -475, -250, 381, -355, -498, -276, 163, 421, -2, 24};
        assertEquals(31, PivotFinder.getLastPivot().findPivot(array, 24, 31));
        array = new int[] {452, 433, 186, -13, 183, -445, 392, -357, -337, 104, 478, 268, -298, 168, -239, 74, -467, -193, 232, -286, 109, 75, 223, -312, 456, 398, 25, -5, 155, -220, 1, 101, 331, -42, -195, 399, 192, -187, -128};
        assertEquals(35, PivotFinder.getLastPivot().findPivot(array, 31, 35));
        array = new int[] {-158, -134, -181, 94, 63, -31, -321, 102, -273, -161, 201, -459, 284, 176, -150, -487, -199, 139, -374, 288, -235, -350, 137, 56, -140, 416, 50, -463, 307, -441, -284, 261, 150, -422, -283, -417, 71, 277, -378, -343};
        assertEquals(33, PivotFinder.getLastPivot().findPivot(array, 3, 33));
        array = new int[] {149, -323, -481, -433, 201, -445, -239, 107, -305, -317, 327, 304, 20, -141, 36, 332, 179, -85, -99, -373, -185, -425, -213, 341, 316, 458, 339, -198, 207, -359, 31, -44, 77, 361, 182, 433, 353, -90, -266, -76, -81};
        assertEquals(29, PivotFinder.getLastPivot().findPivot(array, 2, 29));
        array = new int[] {-270, 79, 22, -220, -10, 311, -173, 189, 359, -404, 424, 454, -264, -436, 403, -67, -81, -453, -198, 261, 14, -272, 77, -297, -403, -177, 68, 182, 332, 246, -401, -146, 206, -433, 133, -136, 50, 33, -165, 117, 491, -205};
        assertEquals(34, PivotFinder.getLastPivot().findPivot(array, 34, 34));
        array = new int[] {276, 175, 318, -164, 322, -179, 350, 101, 165, 207, 285, 255, -347, 207, -28, 127, -168, 62, -425, 3, 232, 184, 91, 75, 490, 291, -18, 337, -498, 197, 259, 446, 462, -499, 409, 51, -115, -78, -185, 33, 102, -311, -329};
        assertEquals(39, PivotFinder.getLastPivot().findPivot(array, 0, 39));
        array = new int[] {438, 442, -388, 116, 95, 249, -199, 270, -302, 314, 151, 183, -281, 445, 466, -1, 396, -126, 265, -93, -368, -98, -8, 396, -125, -493, 68, -4, -44, -475, -374, 12, 214, -327, 380, -391, 16, -88, -415, -170, 432, 377, 296, 34};
        assertEquals(17, PivotFinder.getLastPivot().findPivot(array, 17, 17));
        array = new int[] {-19, 369, 89, 155, 332, -432, 33, -347, 293, -442, -165, -218, -150, -370, 313, -133, -366, -303, -81, -135, 368, -1, -494, -433, 32, -253, -395, -90, 354, -119, 146, 81, -161, 254, 325, 39, -80, 52, 308, 467, 127, 185, -365, -164, -467};
        assertEquals(21, PivotFinder.getLastPivot().findPivot(array, 10, 21));
        array = new int[] {13, -370, 442, -382, 388, 444, -294, 434, -319, -489, 485, 75, 63, 40, 487, 6, 290, 390, -466, 295, 477, 53, -77, 314, 97, 379, 263, -453, 473, 184, 414, 374, 442, 89, 241, -233, 289, -423, -259, -408, -420, -179, 473, -131, 58, -494};
        assertEquals(31, PivotFinder.getLastPivot().findPivot(array, 6, 31));
        array = new int[] {412, -434, 422, 215, 254, 118, -321, 287, 469, -61, 308, 305, 258, -239, 254, 43, 148, -42, -190, 404, -98, 88, -74, -500, -187, 150, 373, 467, -340, -16, 369, -351, -41, 51, 356, 141, -407, -396, 339, 377, 10, 358, 136, -238, 432, -89, 410};
        assertEquals(16, PivotFinder.getLastPivot().findPivot(array, 14, 16));
        array = new int[] {136, -12, -205, -418, -383, 149, 326, -381, -34, -444, -158, 93, 134, -42, 280, 142, -174, 308, -419, -347, -430, -285, -276, 70, 308, -305, -36, 318, 2, 359, -344, 461, -434, 337, -271, 12, 133, 174, -35, -306, -490, -232, -303, -109, 54, -152, -157, -337};
        assertEquals(37, PivotFinder.getLastPivot().findPivot(array, 27, 37));
        array = new int[] {-339, 29, 434, -362, -226, 222, 280, -73, -31, -469, -424, -276, -124, 453, 266, 283, 104, -273, 266, -242, -251, 79, -487, 170, -488, 222, -494, 447, -326, 54, -158, -280, 386, 455, 449, 369, -221, 277, -51, 48, -104, -174, 269, 338, 51, 244, 451, -469, -267};
        assertEquals(46, PivotFinder.getLastPivot().findPivot(array, 4, 46));
        array = new int[] {-189, 24, 159, 32, 8, 445, -488, 101, 310, 390, -433, 181, 330, -244, -224, -312, -123, 263, -52, 414, 231, 178, -304, -483, -119, -336, 0, -32, 171, 120, -396, -394, 499, -497, 8, 213, -153, 211, -334, 329, -350, 328, 341, 260, 386, -367, 250, 483, 371, 20};
        assertEquals(40, PivotFinder.getLastPivot().findPivot(array, 2, 40));
        array = new int[] {-197, 76, 34, -186, -25, 494, 89, -458, 47, 309, 288, -414, -170, 327, 295, -180, -224, 42, 457, -284, 278, -118, 303, 486, -392, 216, 450, 212, 389, 14, 116, -4, 482, 190, 467, 261, -227, -349, -77, -333, 420, -89, -65, -222, -113, 123, -452, 142, -257, 141, -318};
        assertEquals(26, PivotFinder.getLastPivot().findPivot(array, 26, 26));
        array = new int[] {498, 84, -456, -146, -276, -177, -397, -213, 50, -45, -158, -220, 350, -309, 97, -367, 11, 130, 209, 457, -124, -140, -448, -136, 5, 98, -462, 108, 293, 84, 155, -467, -337, 81, 71, 235, 323, -310, 385, 2, -298, 333, -68, 280, 411, -98, 401, 47, 172, 95, -482, 309};
        assertEquals(47, PivotFinder.getLastPivot().findPivot(array, 35, 47));
        array = new int[] {-1, 127, -472, 435, 145, 4, -208, 230, -245, -57, 245, -31, -313, 432, -281, 411, 23, 119, 21, -204, -415, 309, -163, 205, 482, -145, 153, 277, 351, -33, 203, 481, -442, -95, -393, -402, -229, 232, 495, 14, 495, -86, 300, 157, 490, -17, 391, -224, 345, 65, -400, -111, 43};
        assertEquals(47, PivotFinder.getLastPivot().findPivot(array, 47, 47));
        array = new int[] {134, 128, 61, -227, -331, 337, -410, -15, -330, -426, 308, -455, -344, -486, 301, -376, 356, -54, -158, 49, 46, 199, 85, 183, 327, 340, 84, -196, 352, -344, 318, 322, -127, 297, 82, -383, 279, -130, 119, 118, -420, -322, -27, 364, 367, 218, 362, 193, 61, 100, -183, 368, 464, -437};
        assertEquals(43, PivotFinder.getLastPivot().findPivot(array, 37, 43));
        array = new int[] {-154, -197, -340, -444, -429, 232, -417, 110, 103, -24, 242, -83, 343, 162, 174, -362, 355, -313, 420, -107, -83, 289, -421, 471, -105, -348, -342, -440, -479, 61, -324, 222, -305, -73, -443, 413, -405, -164, -465, 80, -52, 216, -439, -103, 458, -159, 445, -224, 204, -477, 101, 64, 256, 97, -423};
        assertEquals(46, PivotFinder.getLastPivot().findPivot(array, 41, 46));
        array = new int[] {-233, 310, 151, -436, -478, -279, -161, -214, -123, -282, 74, 491, -265, -431, 495, -136, 187, -499, 337, 204, -410, -341, 65, -71, 213, -186, 163, 490, 178, -125, 447, -49, 498, -226, 455, 263, 151, 368, -240, -392, -211, -35, -425, -230, -397, 377, 225, 377, 161, 43, -74, 377, -56, 209, -117, 436};
        assertEquals(51, PivotFinder.getLastPivot().findPivot(array, 11, 51));
        array = new int[] {299, 379, 375, -42, 244, -62, 459, 39, 138, -170, -314, 371, -121, 114, -230, 148, 288, -424, 438, -196, 194, 210, 152, 489, 77, 349, -372, 27, 465, 466, -234, 254, -451, 370, -189, 25, 142, 318, 454, 225, 228, 168, -466, 130, -487, 266, -276, -164, 402, 361, -469, -346, -296, -339, -40, -247, 112};
        assertEquals(13, PivotFinder.getLastPivot().findPivot(array, 13, 13));
        array = new int[] {-167, 27, 102, -264, 106, 207, 249, 483, 306, -346, -129, 70, 412, -380, 65, -302, -463, -55, 410, 307, -229, 186, -71, -74, -307, -93, -483, -281, 174, 180, 360, 221, -324, -171, 268, -366, 5, -241, 467, -398, -432, -287, 323, -289, -94, 204, -35, 374, 493, -205, -26, -221, 91, 442, 119, 412, -208, -215};
        assertEquals(40, PivotFinder.getLastPivot().findPivot(array, 27, 40));
        array = new int[] {-500, 357, -91, 305, -490, 65, 309, 208, -228, -214, -396, -74, 19, 73, 487, 284, -483, 188, -380, 492, 306, -428, -363, -158, 427, -17, 304, 241, 270, 304, 188, 354, -257, 410, 154, -434, 161, -188, 213, 269, 449, 366, 328, -376, -414, -407, 491, -120, 315, -483, 457, 337, 233, 364, -70, 497, -126, -453, 303};
        assertEquals(43, PivotFinder.getLastPivot().findPivot(array, 9, 43));
        array = new int[] {216, -23, -33, -64, 365, 72, -363, 125, 1, 65, 452, -473, 78, -228, -280, -333, -308, 100, -446, -30, 78, -111, 256, 289, 263, 79, -162, -105, -38, 148, 21, 248, 454, 191, -258, 15, 146, 388, -308, -384, -118, -420, -405, -317, 206, -215, -120, -172, -117, 335, 167, -89, 97, -491, 139, 16, 17, -45, -314, 497};
        assertEquals(27, PivotFinder.getLastPivot().findPivot(array, 18, 27));
        array = new int[] {-202, 21, -99, 148, -457, -338, 346, 489, -63, 465, 284, -159, -127, 216, 275, -106, -312, -92, -162, 245, -140, 230, 49, 497, -283, 415, -6, -199, 59, -211, 178, -353, 268, -78, 143, -74, 67, 226, 421, 263, 28, 249, -180, -488, -84, -450, -363, -382, -98, -488, -305, -227, 208, 124, 46, 34, 308, -328, -285, 125, -302};
        assertEquals(34, PivotFinder.getLastPivot().findPivot(array, 29, 34));
        array = new int[] {-434, -291, 107, -230, 71, -239, -72, 127, -43, -104, 489, 456, -138, 373, -63, 402, -411, -106, 263, -272, -351, 335, 88, 228, -14, -472, 311, -326, 222, 15, 126, -423, 18, -205, -250, -97, 348, 287, 323, 376, -339, 15, -117, -414, 260, 179, 77, 447, 445, 189, 294, -328, -383, 39, 214, 11, 383, 342, -255, 161, -368, -155};
        assertEquals(51, PivotFinder.getLastPivot().findPivot(array, 50, 51));
        array = new int[] {151, 240, 192, 186, -354, 40, -146, -266, -255, 233, 105, 86, 323, -285, -362, -334, 58, -45, 75, 423, 52, -133, 242, -497, -84, -29, 89, 359, 393, 277, -94, -22, 276, -426, 478, 290, -205, -207, -287, -114, 383, -75, -54, -233, -26, 239, 338, 421, 470, -158, 38, 79, -401, -118, 498, -240, 228, -495, 380, -172, 6, 353, 83};
        assertEquals(51, PivotFinder.getLastPivot().findPivot(array, 8, 51));
        array = new int[] {196, -208, 170, 251, -134, -455, -412, -264, -147, 278, 197, 226, -439, 275, 35, -446, -401, -201, -312, -342, -217, -252, 325, -205, 381, -243, 156, -419, 259, 207, -262, -51, 467, 144, 31, -40, -97, 388, 275, -474, -57, -49, -193, 362, -386, -51, 478, -74, 130, 268, -10, 387, 270, 467, 142, -490, 494, 236, 413, 13, 486, 412, -4, -39};
        assertEquals(60, PivotFinder.getLastPivot().findPivot(array, 54, 60));
        array = new int[] {-124, -454, 438, 230, 104, 83, -298, 306, -452, 396, 132, -445, 23, 309, -197, 490, 383, -165, -361, -215, -12, 265, 163, 392, -431, -198, 49, -199, -228, 422, 417, 393, -145, 119, -199, -13, -409, -49, -118, -190, 74, -57, 131, -38, -362, 382, -265, -68, -12, 332, 377, -43, 35, 250, 32, -135, -104, -367, -147, 201, -165, -37, 153, 119, 38};
        assertEquals(20, PivotFinder.getLastPivot().findPivot(array, 4, 20));
        array = new int[] {92, -207, -18, 2, -472, 370, 252, 493, 132, 129, 461, 92, 436, -165, -75, -19, -298, -332, 475, 285, -169, -475, 406, 147, -356, 218, -267, -113, -411, 116, 331, 357, 195, 438, -351, -54, -54, 254, 198, -470, -14, 266, 154, -341, 495, 187, -400, 81, -415, -301, -447, 63, -234, 367, 173, 95, -150, 129, 5, -370, -343, 116, -468, 447, -109, -436};
        assertEquals(45, PivotFinder.getLastPivot().findPivot(array, 39, 45));
        array = new int[] {-374, 470, 162, -172, 425, -462, 122, 415, 7, 333, -7, 264, -323, -57, 54, 361, -133, 175, 299, -276, 335, -284, 312, 344, 284, -31, -156, 437, -446, -472, 33, -366, 54, -377, -389, -29, 431, -209, 125, 289, 68, 144, -383, -126, 213, -229, 449, 119, 252, -152, -114, -92, -376, -234, -4, -214, -298, -247, -104, 64, 259, 429, -297, -295, 371, -488, 373};
        assertEquals(36, PivotFinder.getLastPivot().findPivot(array, 23, 36));
        array = new int[] {111, -154, -177, -412, 95, -474, -59, 208, -460, 282, 431, 47, 256, -404, -109, 379, -395, 203, 136, -233, -354, -323, -189, -109, 158, 30, -477, -373, 99, -321, -245, -367, 135, 498, 203, -204, -365, -342, -365, 488, 47, 87, -394, 44, -118, -394, 391, 83, -133, 112, 106, -22, -366, -263, -303, 433, 350, -248, -423, -355, -76, 183, 233, 153, 208, 88, -337, -76};
        assertEquals(66, PivotFinder.getLastPivot().findPivot(array, 42, 66));
        array = new int[] {-297, 7, 30, 266, -377, -456, 20, 247, -180, -315, 427, 446, 168, -483, -263, 157, 385, 175, -402, 24, 135, 381, 106, 57, 131, 220, -279, 321, 419, -146, 257, -202, 419, -220, -252, -288, 157, 395, -87, 57, -87, -463, 436, 25, 279, 428, 150, 75, -279, -312, 95, 16, -474, -101, 231, 294, 281, 351, 173, 476, 96, 179, -305, 101, 385, 462, 224, -386, -146};
        assertEquals(54, PivotFinder.getLastPivot().findPivot(array, 53, 54));
        array = new int[] {71, -490, 65, -488, 132, -455, 147, -235, 149, 41, 221, 432, 199, -311, -22, -193, -279, 383, 76, -146, 329, 270, -349, 116, -70, -355, 92, 226, 93, -296, -338, -129, 84, -352, 96, 469, 86, -214, 101, 170, 324, 145, -414, -52, -70, 32, -10, 13, 338, -232, 224, -434, -398, -54, -449, 235, 389, -93, -398, -213, -1, -287, 424, -166, -94, -43, -191, 28, 54, 303};
        assertEquals(34, PivotFinder.getLastPivot().findPivot(array, 20, 34));
        array = new int[] {-224, -91, -400, 122, 383, 349, 313, 223, 296, 206, 310, -159, 10, 51, -338, -240, 109, -211, 353, 462, -19, -13, 470, -408, 68, -18, 120, -478, 194, -199, -123, -86, -476, -66, -301, -454, 422, 35, 175, -56, 38, 211, 195, 3, -393, 80, -69, -340, 454, 271, -219, -156, 325, -252, -189, 220, 250, 236, -450, -34, 483, 178, 424, -269, -480, -367, -11, -386, 476, -384, 423};
        assertEquals(63, PivotFinder.getLastPivot().findPivot(array, 24, 63));
        array = new int[] {473, -429, 293, -302, -112, 62, 104, 36, 210, 492, 74, -113, -418, 254, -205, 365, -360, 480, 433, 337, -87, -139, 123, -60, 65, 90, 138, -365, -106, 312, 5, -3, -257, 171, 415, 2, 361, 232, 255, 270, -83, 499, 452, -35, -219, 6, -189, 321, 177, 213, 70, -353, 211, -474, 251, 376, 11, 375, 70, 347, -105, -472, 36, -120, -406, -401, 189, 191, 327, -470, 461, 54};
        assertEquals(30, PivotFinder.getLastPivot().findPivot(array, 11, 30));
        array = new int[] {-346, 15, -439, 405, -154, 262, -396, 75, -160, -254, 164, -78, -446, -125, 124, 137, 250, 142, 92, 3, 331, -439, 259, -137, -486, -397, 133, 174, -120, 85, -457, 472, 403, -168, -393, -245, 213, 90, 1, -295, 349, -480, -492, -364, -236, 425, 300, -375, -136, -284, -360, 23, -3, 223, 75, -262, 154, 230, -32, 144, -473, 204, 102, -288, -364, -199, -157, -350, 300, 112, -331, -426, -256};
        assertEquals(54, PivotFinder.getLastPivot().findPivot(array, 45, 54));
        array = new int[] {75, 413, 456, 247, 395, -34, 421, -50, 317, -250, -390, -437, 475, -201, 329, -360, 68, 235, 474, 398, -170, -450, -467, -120, 281, 302, 144, 263, 355, 360, 477, -230, 230, 183, 227, -199, 205, -453, 293, 87, -459, -476, 135, 465, -375, -454, -196, -89, -67, 99, 317, -82, 220, -272, 236, 320, -307, -228, 382, 233, 24, 321, 463, -98, -233, -447, 456, -396, 23, 214, 299, -318, 494, -314};
        assertEquals(59, PivotFinder.getLastPivot().findPivot(array, 19, 59));
        array = new int[] {-307, -458, 407, 223, 334, 311, -405, 364, -71, 467, 64, 411, -27, -93, -297, 386, -117, 71, 126, -269, -331, -205, -140, -429, 284, 117, -391, -220, 158, -38, 112, -442, 282, -144, -62, -291, -95, -338, 239, 444, -173, -256, -349, 63, 315, 423, -117, 318, -160, 237, 299, 189, -87, -2, 406, -496, -203, 10, -23, -404, 332, -337, 244, 225, 261, -189, -74, 372, -500, 255, -460, 112, 223, -465, 285};
        assertEquals(40, PivotFinder.getLastPivot().findPivot(array, 34, 40));
    }

    /**
     * Test with random arrays to see if the middle index is being returned or not
     * If there isn't any specific "middle", the tests expect the left middle to be returned
     * @author Aamin
     */
    @Test
    public void midPivotTest() {
        int[] array;

        array = new int[] {-406, -120, 155, -286, 390, 14, 64, -185, -2, -162, -94, -347, -44, 10, -305, -112, 177, -259, 8, -322, -282, -142, 299, 96, -290, -376};
        assertEquals(16, PivotFinder.getMidPivot().findPivot(array, 15, 17));
        array = new int[] {155, 177, -346, 177, -374, -253, 463, 380, -14, 404, 42, 499, -102, 48, 258, -213, 204, -418, -340, -67, 468, 62, -118, -233, -435, 132, -277};
        assertEquals(9, PivotFinder.getMidPivot().findPivot(array, 5, 14));
        array = new int[] {-14, 73, 124, -181, -496, -352, -97, 387, 477, 494, -425, -95, 252, -430, 13, -96, -111, 325, 370, 371, 107, 275, 498, 340, -469, -497, 465, 60};
        assertEquals(20, PivotFinder.getMidPivot().findPivot(array, 20, 21));
        array = new int[] {-291, -339, 220, 36, 208, -273, -158, -394, 172, 247, 232, -500, 477, -29, -209, -275, -481, 171, -471, 89, 47, -155, -45, 374, -338, -464, 417, -240, -482};
        assertEquals(11, PivotFinder.getMidPivot().findPivot(array, 1, 22));
        array = new int[] {-261, -325, -427, -100, -299, 176, 399, -250, 13, 474, 336, -144, 245, -20, -426, 207, 217, -55, 413, -448, 194, 343, 212, -4, 417, -56, 340, -230, -137, 391};
        assertEquals(15, PivotFinder.getMidPivot().findPivot(array, 5, 25));
        array = new int[] {-233, 137, 340, 241, 436, 201, -220, 370, -293, -1, -224, -136, 439, 430, 31, 468, 104, 171, -5, -256, -384, 33, 141, 318, 253, 368, -466, -399, -413, -252, 436};
        assertEquals(14, PivotFinder.getMidPivot().findPivot(array, 13, 16));
        array = new int[] {-115, 345, -451, 421, -40, -109, 90, -283, 309, 308, -69, 385, -400, 111, 83, 155, -367, 410, 456, 485, -361, -352, 385, -277, -396, 412, 372, -249, -415, 434, -469, -392};
        assertEquals(4, PivotFinder.getMidPivot().findPivot(array, 2, 7));
        array = new int[] {87, 162, 156, -354, 257, 240, -420, 413, -168, -232, 111, 207, 340, 35, 142, -129, -472, 363, 495, -424, 237, -138, 30, -132, 489, -59, 317, 6, 94, 152, 19, -386, -33};
        assertEquals(29, PivotFinder.getMidPivot().findPivot(array, 29, 30));
        array = new int[] {-173, -335, 397, 177, 27, -231, 40, -493, 365, 480, 376, -205, 115, 189, -156, -95, 291, -423, 345, 144, 218, 305, 484, 190, 293, 112, 36, 456, 138, -385, 30, -452, -211, 436};
        assertEquals(5, PivotFinder.getMidPivot().findPivot(array, 5, 6));
        array = new int[] {50, 87, 253, 399, 247, 24, 215, -384, -281, -3, 399, 495, 238, -411, 76, 427, 444, -315, 344, 456, -13, -13, 241, -329, 190, 8, -472, -25, 375, 463, 92, 369, -371, -382, 236};
        assertEquals(22, PivotFinder.getMidPivot().findPivot(array, 20, 25));
        array = new int[] {489, -437, 488, 0, -389, 240, 490, 175, 334, 40, 135, 382, -468, -318, 292, -102, -17, -492, -266, -460, -234, -455, 266, -74, -80, -68, 374, 193, 8, 113, -134, 307, -436, 147, -210, 220};
        assertEquals(19, PivotFinder.getMidPivot().findPivot(array, 10, 28));
        array = new int[] {-304, 370, -201, -220, 392, 412, 5, -210, 132, -15, 204, 487, -404, 27, 327, -20, -151, -397, 448, 89, 177, -444, 57, -131, -480, 308, 303, 286, 435, 55, -409, -260, 473, 145, -437, 245, -398};
        assertEquals(5, PivotFinder.getMidPivot().findPivot(array, 0, 11));
        array = new int[] {-35, -499, 313, 252, -68, -17, 230, 364, -12, 316, 244, 255, -128, 302, -239, -61, -421, -206, -116, 117, 148, 265, 488, 53, -49, 329, 79, 413, 407, -332, 370, 271, -206, -75, 444, -336, 214, 418};
        assertEquals(20, PivotFinder.getMidPivot().findPivot(array, 19, 21));
        array = new int[] {37, -481, 10, 278, 352, 226, 341, 25, 183, 75, 138, -9, 1, 291, -495, 334, -370, -306, 294, 438, 82, -248, -234, -485, -123, -57, 434, -207, 162, -452, 85, 330, 426, 483, -301, -29, -396, 306, 248};
        assertEquals(18, PivotFinder.getMidPivot().findPivot(array, 9, 28));
        array = new int[] {-204, 479, -463, -146, 237, 362, -149, -424, 68, -399, 463, 250, 259, -63, 487, -406, 414, 322, -392, 396, 317, 220, -29, 228, 143, 126, -175, -257, -161, -483, 395, 215, 118, -407, 396, 310, 117, 427, 411, -278};
        assertEquals(22, PivotFinder.getMidPivot().findPivot(array, 10, 35));
        array = new int[] {-253, -16, -129, 324, 343, -446, -54, 350, -219, 43, -303, -234, 33, -54, 72, 399, 2, -70, 350, -468, 262, 11, 142, -136, -26, 349, -87, -413, 197, 5, -39, 442, -38, 142, 1, 306, -84, 373, -424, 152, -451};
        assertEquals(20, PivotFinder.getMidPivot().findPivot(array, 16, 25));
        array = new int[] {-12, -424, 375, -125, -430, -408, 251, 401, 372, 71, 121, -428, 260, 464, -94, -454, 381, 37, 105, 68, -159, 394, -96, 379, -36, -448, -138, -223, 279, -206, 150, -286, 233, -457, 491, -179, 96, 164, 463, 402, 317, 357};
        assertEquals(13, PivotFinder.getMidPivot().findPivot(array, 7, 20));
        array = new int[] {-46, 469, 304, 297, -226, -156, -377, -363, -67, 157, 304, -198, 61, -332, 2, -336, -75, -452, 318, -325, 396, 284, 312, 192, -486, 388, -368, -192, -326, 261, 490, 455, 96, -314, -282, -146, 53, -52, 332, 476, -381, 337, -424};
        assertEquals(22, PivotFinder.getMidPivot().findPivot(array, 10, 34));
        array = new int[] {183, -435, -243, 103, -397, -38, 226, 194, -371, -167, 126, 74, 375, 130, 129, 308, -253, -304, -264, 25, 131, -133, -124, 54, 499, -1, 240, 298, -292, 202, -219, -359, -107, -101, -107, -154, -81, 470, -432, 101, -490, -188, -427, -475};
        assertEquals(32, PivotFinder.getMidPivot().findPivot(array, 25, 40));
        array = new int[] {-113, 273, -44, 91, 155, -467, 5, -385, 479, -465, 277, -12, 427, -32, -308, 313, -244, -347, -434, 19, -245, 220, -335, 303, -493, -139, -167, 108, 65, -318, 182, -488, -90, 453, 447, 317, 152, 341, -480, -17, 135, -364, 143, 220, -469};
        assertEquals(25, PivotFinder.getMidPivot().findPivot(array, 22, 29));
        array = new int[] {125, -207, -110, 99, 367, -186, 167, -240, 356, 101, 190, 61, -55, -12, -420, -231, 232, 275, -284, 137, -304, -36, -148, 250, 237, 112, 206, -363, -448, -416, -406, 498, -127, -394, 49, -134, 400, 184, 276, -307, 228, 269, -485, -108, -389, 336};
        assertEquals(29, PivotFinder.getMidPivot().findPivot(array, 21, 38));
        array = new int[] {453, 224, 7, 421, -55, 18, 463, 347, -381, -168, 341, -47, -473, 35, 235, -58, -332, -188, -91, 100, 231, 77, 423, 414, -34, 108, 125, 221, -242, -407, -482, -291, 18, -152, 470, -396, -360, -406, 495, 474, 393, -242, -341, -365, 157, 221, -247};
        assertEquals(19, PivotFinder.getMidPivot().findPivot(array, 10, 29));
        array = new int[] {-311, -477, -343, -408, 463, 65, -451, 474, -449, 216, -113, 256, 247, 176, -15, -158, 68, 102, 53, -419, 108, 156, -47, 19, 410, -438, -2, -159, -395, -22, 182, -95, -266, 385, 327, -208, 180, 162, -200, -494, 357, 148, -233, 425, -485, -316, 261, -195};
        assertEquals(7, PivotFinder.getMidPivot().findPivot(array, 6, 9));
        array = new int[] {-339, 39, -147, -328, -149, 354, 339, -94, 160, -199, -258, 266, 6, 54, 25, -410, -86, -37, 113, 491, -342, -156, -44, -141, 485, 427, 116, 373, 192, -474, -214, 210, -310, 417, -40, -433, -75, -276, -393, 68, 364, 186, 327, 399, 292, 461, 173, -202, -21};
        assertEquals(38, PivotFinder.getMidPivot().findPivot(array, 30, 46));
        array = new int[] {390, 152, -211, -157, 234, 22, 158, -251, 324, -149, 186, 89, 478, 341, -193, -193, -487, -353, -260, -227, 409, 84, -341, -222, 95, -254, -335, 96, -431, -15, 495, 28, -412, 22, 89, 82, 410, -119, 331, -199, 350, 399, 108, 105, -389, -251, 138, 276, -308, -358};
        assertEquals(27, PivotFinder.getMidPivot().findPivot(array, 9, 45));
        array = new int[] {360, 151, 303, -360, -32, 139, 13, 209, 41, -79, -309, 410, -368, -273, 251, 352, 198, -298, -104, -143, -235, -99, 335, 211, 313, -2, -458, 279, 94, 455, -339, 12, -287, 283, 0, 351, -154, 391, 494, 480, -210, -415, 281, -16, 115, 345, -470, 159, 322, 36, 136};
        assertEquals(40, PivotFinder.getMidPivot().findPivot(array, 35, 46));
        array = new int[] {226, 53, 277, -166, -401, 308, -67, -64, -210, 19, -460, 428, 189, -493, 427, 469, -103, 198, -393, 290, 106, -403, -194, 78, -417, -47, 246, -174, -166, 102, -476, -83, -273, 84, 62, -497, 102, 175, -114, 195, 35, 311, 75, 106, -170, -422, 133, -156, 212, 364, -483, 234};
        assertEquals(21, PivotFinder.getMidPivot().findPivot(array, 3, 39));
        array = new int[] {-159, 199, -97, 448, 433, 117, 205, -30, -166, 329, 211, 446, -252, 358, 340, -438, 109, 4, 339, 407, 28, -186, 202, 474, 11, -214, -286, -12, 278, -268, 381, -200, -319, 415, -105, 180, 69, -215, 99, 38, -78, -454, 194, -212, 81, -487, 246, 216, 488, -309, 229, 166, -271};
        assertEquals(30, PivotFinder.getMidPivot().findPivot(array, 28, 32));
        array = new int[] {384, -348, 284, -436, -69, -115, 152, 312, 223, -447, 433, 18, 363, 493, -397, 128, 346, -398, -380, 227, -243, -371, -184, -413, -439, -246, -162, -96, -397, -386, 368, -272, -16, -312, 168, 113, 81, -262, 237, -67, 324, -470, 5, -99, -114, 159, 12, 172, 452, -485, 363, -71, 224, -4};
        assertEquals(26, PivotFinder.getMidPivot().findPivot(array, 8, 44));
        array = new int[] {-272, -384, 414, 305, 62, -245, 105, -219, -258, -195, -166, 378, 189, -14, -160, -31, -314, -177, 238, -383, -445, -452, -376, 446, -94, -43, -141, 139, -177, -160, 414, 322, 435, 57, -337, -233, -335, -464, -229, 109, 129, -492, -122, 248, 91, -438, -21, 386, -95, -83, 297, -255, 17, -63, 50};
        assertEquals(44, PivotFinder.getMidPivot().findPivot(array, 38, 50));
        array = new int[] {222, 3, -440, 495, -310, 224, 86, 133, 466, 62, -335, -269, -42, 159, 10, -197, 235, 337, 160, 117, 383, -421, -10, 57, -39, 211, -409, 201, 234, 146, -471, -444, 228, 96, -211, -451, -371, -164, -366, -430, -80, -492, 400, 328, -296, -389, 448, -308, -246, 144, -179, -251, -362, 91, 478, -347};
        assertEquals(43, PivotFinder.getMidPivot().findPivot(array, 35, 52));
        array = new int[] {210, 228, -83, 235, -294, 203, -160, -136, -223, 390, -32, -52, -240, 427, 429, -384, 87, -384, -60, 68, 48, -151, -428, 288, -131, -432, -349, -13, 341, -473, 479, 263, 105, -348, 145, 479, 301, 466, -404, 181, -150, -192, -340, -228, -39, -168, 41, -233, -102, -434, -390, -267, 394, 202, -90, -78, 315};
        assertEquals(14, PivotFinder.getMidPivot().findPivot(array, 11, 17));
        array = new int[] {405, -469, 341, -492, 486, 445, 50, -84, 138, 418, 64, -78, -35, 113, -25, 29, -251, 417, -366, -69, -110, -118, -294, 93, -34, -353, 438, -73, -386, 284, 31, 376, -442, -391, 400, 362, -405, 312, 75, -9, -110, -279, 461, 128, -178, 422, -172, 275, -57, -347, -393, 217, -115, -93, -277, -496, -405, -289};
        assertEquals(29, PivotFinder.getMidPivot().findPivot(array, 27, 32));
        array = new int[] {-380, 25, -94, 485, 181, -358, -71, 497, -323, 21, -236, 381, -408, -58, -481, -229, -272, 308, 498, -140, -483, -218, -370, -35, 469, 294, 311, 353, 37, 151, -431, -447, 28, -29, 320, -7, 488, 277, 320, 372, -352, 334, -163, 103, 101, -277, -88, -29, 382, 35, -305, 444, -369, 53, 328, -466, -52, 336, 458};
        assertEquals(50, PivotFinder.getMidPivot().findPivot(array, 49, 52));
        array = new int[] {-249, -35, -249, 89, -140, 287, -86, -298, -122, 59, 169, 461, 24, -22, -177, -324, -62, -165, -391, -309, 253, -387, -438, 152, 29, -277, 22, 249, -38, -208, -137, -197, -221, -183, 336, 73, 64, -78, 411, 161, 41, -184, -159, -271, 449, -162, 478, -393, 497, 227, 5, 277, -342, -319, 448, 475, 91, -143, 340, 199};
        assertEquals(10, PivotFinder.getMidPivot().findPivot(array, 9, 11));
        array = new int[] {-383, 396, -257, 59, 31, 245, 191, -245, -129, 225, 406, 351, -112, 355, -77, -378, -51, -339, 461, 23, -328, 457, 104, 89, 185, -477, -261, -147, -228, 271, 86, 322, 280, 60, 16, -443, 131, 308, -297, -198, -21, 319, 337, -165, -281, 411, -89, 324, -380, 138, 290, 41, -412, 344, 461, -491, 169, -176, -366, -336, 472};
        assertEquals(52, PivotFinder.getMidPivot().findPivot(array, 52, 53));
        array = new int[] {-344, -45, -64, -278, 370, -277, 305, 128, 467, -240, -487, 352, 446, -447, 177, 438, 34, -154, 471, -136, 226, 2, 181, 383, -366, -493, 470, 130, -291, -313, -231, -207, -108, 12, -154, 428, -167, -445, -51, 190, 113, 282, 438, -367, 0, -490, 243, -257, 111, -414, -79, -398, -16, -138, -491, 265, 266, -170, -92, 271, -464, -331};
        assertEquals(14, PivotFinder.getMidPivot().findPivot(array, 11, 17));
        array = new int[] {185, 363, 351, -427, -52, 40, 136, -445, -351, -292, 4, -19, 351, 116, 260, 15, 283, 242, -494, 375, 101, 65, -423, -366, 306, -207, 19, 446, 266, 422, -272, -334, 438, -493, 169, 18, 272, -12, 310, -25, 134, -423, 18, 491, 372, -306, -311, 442, 181, 23, 2, 148, 470, -79, 47, -361, -281, 44, 238, 441, -402, 452, -124};
        assertEquals(46, PivotFinder.getMidPivot().findPivot(array, 36, 56));
        array = new int[] {-102, 367, -371, -360, 90, 441, 122, 253, 400, -141, 471, -61, -195, 298, -208, -224, -487, -149, 287, -500, 351, 468, 165, 79, -109, 382, 91, 264, 273, -281, -437, 448, 276, -157, 336, 220, -1, 283, 214, -39, -5, 326, 48, -342, 294, 379, -204, -418, 364, 49, 229, 413, -51, -139, 253, 312, -5, 371, -123, 256, -299, 104, -454, -306};
        assertEquals(45, PivotFinder.getMidPivot().findPivot(array, 29, 62));
        array = new int[] {-476, 174, 50, -21, 61, 240, -193, -388, 182, 280, 484, 19, -330, 52, -10, -487, 29, 360, -480, -36, -214, 133, -403, -398, -497, -239, 164, 24, -74, 134, 313, -61, -443, 114, -339, 362, -228, 99, 100, -34, -176, -204, 372, -329, 48, 321, -251, 269, 220, -309, 332, -88, -219, 112, 265, -484, 167, -142, 153, -92, -357, 162, -250, 97, -430};
        assertEquals(22, PivotFinder.getMidPivot().findPivot(array, 20, 25));
        array = new int[] {-255, 488, -52, -221, 186, 310, -362, -64, -114, -288, 378, -168, 408, -365, -159, -5, 362, 60, -157, 250, -350, 78, -450, -411, 298, 486, 133, -422, 183, 236, -128, -41, -93, -392, -479, -84, 46, 63, -49, 64, 287, -327, 491, 102, -375, -249, -72, 187, -151, 158, 471, 15, 91, 35, 376, 246, -180, -230, -434, 178, 458, -113, -247, 287, -449, -392};
        assertEquals(55, PivotFinder.getMidPivot().findPivot(array, 47, 64));
        array = new int[] {178, 213, 133, -180, 191, 307, -499, 13, -323, 285, -162, 429, -360, -269, 73, -417, 396, 168, 71, -366, -304, -478, -444, 18, 246, 465, -449, 75, -234, -400, 195, -143, -206, 433, 469, 283, -295, 285, 65, 149, 419, 89, 356, -323, -106, -140, 408, -187, 107, 421, -336, -329, 80, 489, -8, 167, -77, 289, -385, 194, -313, 171, 148, 172, -282, 479, 370};
        assertEquals(46, PivotFinder.getMidPivot().findPivot(array, 44, 49));
        array = new int[] {60, 362, 122, -137, 11, 279, 19, -69, -224, 185, -39, 150, -278, 125, -57, 99, -358, -364, -494, 415, -45, -433, 43, -72, -208, -93, -424, -348, -404, -468, -391, -380, 98, -339, 370, 407, 105, 109, 33, -421, -500, -195, -314, 198, 428, 374, -462, -342, 426, -128, -11, -17, -60, 382, 488, -421, -213, 269, -252, 37, 303, 466, -451, -353, -432, -341, -434, -335};
        assertEquals(30, PivotFinder.getMidPivot().findPivot(array, 28, 33));
        array = new int[] {-339, 122, 73, 459, -403, 340, -231, 5, -253, -284, -167, 235, -295, -65, 203, 481, -455, -127, 222, 412, -348, -70, -246, -253, -225, -334, 386, 401, 359, 146, -88, 272, 61, 481, 338, -212, -475, 375, -134, 193, 456, 266, -349, 273, 402, -62, 423, 302, 470, 51, 54, 280, -59, 343, 144, -324, -131, -59, 404, -62, -458, -406, 377, 169, 336, 290, -31, -407, 56};
        assertEquals(6, PivotFinder.getMidPivot().findPivot(array, 4, 9));
        array = new int[] {238, 276, -87, -489, -100, 234, -177, 100, 342, 335, -449, -71, 421, 275, 3, 175, 91, 23, -54, 425, -426, -321, -125, 210, 344, 432, -335, 330, -317, 430, 322, 244, 321, 58, -174, -417, 457, -176, -11, 31, -266, -463, -390, 431, -151, -215, -437, 358, 495, -266, -48, 443, 422, 107, -197, 102, -240, 345, -122, 212, -110, 465, 88, -330, -249, 296, -169, -281, 325, 391};
        assertEquals(19, PivotFinder.getMidPivot().findPivot(array, 8, 30));
        array = new int[] {336, 57, 142, 194, 114, 398, -283, 72, -481, -16, 199, -363, -330, 79, 155, 425, 449, -497, -248, -38, 364, -52, 212, -2, 29, 379, 225, -220, -486, -28, -251, -317, -173, 404, 356, 234, 77, 126, -228, -449, -360, -479, 157, 347, 142, -491, -205, -454, -7, -25, 353, -272, 391, 180, 380, -201, -396, 98, 361, 382, -443, -102, -428, 11, 212, 282, 182, -488, 365, -217, -95};
        assertEquals(38, PivotFinder.getMidPivot().findPivot(array, 19, 58));
        array = new int[] {-340, -337, 260, -496, 496, -236, 158, -382, -24, 125, -296, 126, 129, 447, -60, -264, 113, 112, 228, -209, 259, 92, 408, 419, 391, 304, 464, 287, -115, -52, 402, 329, -170, 6, -344, -417, -272, -199, 193, -220, 428, 389, -254, 351, 317, -32, -223, 268, -10, 73, 302, -444, -176, 253, 375, 192, -464, 27, -58, 219, -294, 50, -216, -259, -148, 170, -19, -45, -408, -321, 144, 444};
        assertEquals(28, PivotFinder.getMidPivot().findPivot(array, 19, 38));
        array = new int[] {274, 498, 383, -273, -309, 495, 312, -303, 73, -188, -487, -231, -167, 290, 37, -477, -379, 460, -80, 406, -405, 338, -494, -416, 438, 80, 410, 230, 27, 214, -193, 278, 242, -420, 306, -389, -212, -311, 455, -292, 147, -176, -374, -126, -323, -328, 87, -133, -358, -457, -206, -264, -75, -126, 324, -473, -360, 315, 175, -330, 183, 464, 185, -35, 39, 252, -172, -98, 415, -28, 102, 412, -236};
        assertEquals(51, PivotFinder.getMidPivot().findPivot(array, 46, 57));
        array = new int[] {-52, 221, 419, 291, -383, 366, -128, 65, 397, 449, -341, -3, 480, -403, 162, -220, -194, 259, -95, 241, -59, -264, -314, -74, 289, -28, -175, -76, 480, 157, -304, -433, 409, -400, -286, 112, -80, 110, 65, 352, -452, -81, -54, -442, -62, 246, 377, -314, 338, 273, 101, -377, -129, -197, -494, 494, -75, -41, -370, 92, 226, -149, -13, 369, 30, 119, -69, 91, -385, -127, -94, 311, -91, 462};
        assertEquals(22, PivotFinder.getMidPivot().findPivot(array, 9, 35));
        array = new int[] {-462, 389, -290, 144, -51, -231, -435, 237, -333, 364, -294, 273, -55, -380, -450, -232, -487, 352, -286, -383, -270, 312, 237, -84, -465, -197, 201, -497, 50, -45, -455, -192, -403, 318, 193, 373, 309, -130, 330, -33, -132, -336, -168, 173, -79, -494, 426, -371, 334, -27, -234, 485, 334, -439, 126, -193, 201, 376, 67, -197, -115, 418, 364, -265, -5, 128, 163, 10, 403, -147, 452, 126, 468, 22, 235};
        assertEquals(17, PivotFinder.getMidPivot().findPivot(array, 1, 33));
    }

    /**
     * Test with random arrays to see if a PSEUDO random index is being returned or not
     * @author Aamin
     */
    @Test
    public void randomPivot() {
        int[] array;
        int answerGot;

        array = new int[] {123, 4123, 5290, 109, -123, 123};
        PivotFinder pivotFinder = PivotFinder.getRandomPivot(69420);

        assertEquals(4, pivotFinder.findPivot(array, 0, 5));
        answerGot = pivotFinder.findPivot(array, 0, 5);
        assertEquals(3, answerGot, "Are you sure you aren't creating new object of random every time? Expected <3> got <" + answerGot + ">");
        answerGot = pivotFinder.findPivot(array, 0, 5);
        assertEquals(2, answerGot, "Are you sure you aren't creating new object of random every time? Expected <2> got <" + answerGot + ">");
        answerGot = pivotFinder.findPivot(array, 0, 5);
        assertEquals(4, answerGot, "Are you sure you aren't creating new object of random every time? Expected <4> got <" + answerGot + ">");
        answerGot = pivotFinder.findPivot(array, 0, 5);
        assertEquals(5, answerGot, "Are you sure you aren't creating new object of random every time? Expected <5> got <" + answerGot + ">");
        answerGot = pivotFinder.findPivot(array, 1, 5);
        assertEquals(1, answerGot, "Are you sure you aren't creating new object of random every time? Expected <1> got <" + answerGot + ">");
        answerGot = pivotFinder.findPivot(array, 2, 5);
        assertEquals(4, answerGot, "Are you sure you aren't creating new object of random every time? Expected <4> got <" + answerGot + ">");
        answerGot = pivotFinder.findPivot(array, 3, 5);
        assertEquals(5, answerGot, "Are you sure you aren't creating new object of random every time? Expected <5> got <" + answerGot + ">");
        answerGot = pivotFinder.findPivot(array, 2, 4);
        assertEquals(3, answerGot, "Are you sure you aren't creating new object of random every time? Expected <3> got <" + answerGot + ">");
        answerGot = pivotFinder.findPivot(array, 2, 3);
        assertEquals(3, answerGot, "Are you sure you aren't creating new object of random every time? Expected <3> got <" + answerGot + ">");
        answerGot = pivotFinder.findPivot(array, 3, 3);
        assertEquals(3, answerGot, "Are you sure you aren't creating new object of random every time? Expected <3> got <" + answerGot + ">");

        array = new int[] {258, 381, -187};
        assertEquals(1, PivotFinder.getRandomPivot(606509405).findPivot(array, 0, 1));
        array = new int[] {-295, -420, -347, -322};
        assertEquals(1, PivotFinder.getRandomPivot(1098404778).findPivot(array, 0, 1));
        array = new int[] {498, -369, 11, -28, -267};
        assertEquals(2, PivotFinder.getRandomPivot(1327788622).findPivot(array, 1, 3));
        array = new int[] {-219, 470, -7, -435, 451, 423};
        assertEquals(3, PivotFinder.getRandomPivot(-14664783).findPivot(array, 2, 3));
        array = new int[] {-190, -131, 190, -101, 435, 230, 148};
        assertEquals(3, PivotFinder.getRandomPivot(-128835448).findPivot(array, 3, 3));
        array = new int[] {156, -500, 87, -312, -24, 484, -238, -292};
        assertEquals(4, PivotFinder.getRandomPivot(1704520972).findPivot(array, 4, 4));
        array = new int[] {-393, -480, 59, -218, 403, 440, 258, 175, -401};
        assertEquals(7, PivotFinder.getRandomPivot(-947118037).findPivot(array, 4, 7));
        array = new int[] {-309, -441, -8, -440, -331, 423, -239, -96, 413, -431};
        assertEquals(5, PivotFinder.getRandomPivot(-773805903).findPivot(array, 3, 7));
        array = new int[] {93, -71, 108, -161, 333, 157, 171, -389, 309, -100, 239};
        assertEquals(3, PivotFinder.getRandomPivot(-1879904422).findPivot(array, 3, 3));
        array = new int[] {64, -324, -203, -176, -265, -482, -245, 225, 218, -224, -317, 126};
        assertEquals(9, PivotFinder.getRandomPivot(-1569685497).findPivot(array, 8, 10));
        array = new int[] {313, -326, 192, -19, -463, -398, 261, 194, 266, 211, -356, -9, -273};
        assertEquals(11, PivotFinder.getRandomPivot(1459457959).findPivot(array, 10, 11));
        array = new int[] {446, 52, -248, 263, 427, 301, -313, 129, 214, -53, 274, -273, 95, -152};
        assertEquals(9, PivotFinder.getRandomPivot(1667880867).findPivot(array, 9, 9));
        array = new int[] {437, -13, -400, -133, 367, 169, -278, 337, 42, 395, 430, -169, -58, -113, 249};
        assertEquals(3, PivotFinder.getRandomPivot(903040100).findPivot(array, 3, 3));
        array = new int[] {208, 289, 332, 21, -93, 216, -253, 321, 110, 274, 289, 124, -175, 300, -320, -442};
        assertEquals(13, PivotFinder.getRandomPivot(-2054879297).findPivot(array, 13, 14));
        array = new int[] {345, -106, -41, 347, 318, 427, -166, 445, -336, -345, 331, -240, 107, 168, -34, 498, 473};
        assertEquals(14, PivotFinder.getRandomPivot(1479440223).findPivot(array, 13, 15));
        array = new int[] {78, 367, 11, 7, -50, -344, 270, -331, 383, -20, 365, 439, -97, 370, -266, -101, -342, 49};
        assertEquals(15, PivotFinder.getRandomPivot(-246684258).findPivot(array, 14, 15));
        array = new int[] {299, -32, -401, 369, -81, -285, 13, -386, -312, -341, 323, -312, 384, 31, -464, 16, -36, -486, -302};
        assertEquals(8, PivotFinder.getRandomPivot(1567508361).findPivot(array, 3, 10));
        array = new int[] {411, -376, -284, -91, -376, -476, 406, -371, -141, 456, -411, -154, -449, 183, 291, 41, -420, -198, 313, -55};
        assertEquals(11, PivotFinder.getRandomPivot(698396383).findPivot(array, 2, 13));
        array = new int[] {5, -95, -172, 355, -219, 465, 269, 215, -159, 433, -309, 15, 18, 22, -215, 0, 209, -257, 155, -173, -197};
        assertEquals(1, PivotFinder.getRandomPivot(697721524).findPivot(array, 1, 2));
        array = new int[] {-302, 154, -141, -138, 140, -479, -140, -327, 315, -495, 9, -249, 72, 279, -148, -306, 108, -12, -49, -55, 219, 246};
        assertEquals(19, PivotFinder.getRandomPivot(1993884647).findPivot(array, 18, 20));
        array = new int[] {389, 213, -197, 257, -383, -334, -99, -423, 161, 113, 385, -272, -12, -330, -86, -482, 480, -394, -478, 467, -368, 8, 417};
        assertEquals(8, PivotFinder.getRandomPivot(-873474776).findPivot(array, 8, 10));
        array = new int[] {44, -343, 134, -280, 238, -300, 74, 363, 461, 276, -484, 250, -102, 448, -385, -74, 88, -126, -465, -175, -215, 427, 154, -85};
        assertEquals(16, PivotFinder.getRandomPivot(651123961).findPivot(array, 7, 20));
        array = new int[] {-241, -452, 327, -479, -280, 3, -294, -379, 450, -223, 135, 52, 338, -400, 281, -462, 307, 312, -130, -428, -121, 323, 397, 357, -385};
        assertEquals(14, PivotFinder.getRandomPivot(-2047161354).findPivot(array, 13, 18));
        array = new int[] {204, 16, 223, -185, -288, 44, -159, 323, 241, 381, 244, 339, 201, 55, -351, 35, 250, -26, -23, 364, -247, 113, 206, 58, 227, 229};
        assertEquals(4, PivotFinder.getRandomPivot(-1327502556).findPivot(array, 1, 23));
        array = new int[] {334, 266, -59, 5, 154, 179, -194, 335, -60, 408, 257, 377, -39, -459, -374, 361, 227, -255, 478, -230, 277, 315, -199, -306, -197, -34, -443};
        assertEquals(13, PivotFinder.getRandomPivot(-1574884593).findPivot(array, 10, 20));
        array = new int[] {454, -181, 238, 149, -67, 146, -77, 455, 255, -492, 159, -314, -347, 151, -171, -341, 381, -185, -350, 273, -15, -98, 84, -238, 229, 208, 489, -428};
        assertEquals(5, PivotFinder.getRandomPivot(549663945).findPivot(array, 5, 6));
        array = new int[] {397, 66, 39, -134, -221, -66, -317, 306, 160, -469, -78, 76, 169, 335, -153, -58, -70, 365, -446, 233, 331, -246, -430, 95, -470, 207, 469, 199, 499};
        assertEquals(26, PivotFinder.getRandomPivot(1538969901).findPivot(array, 16, 26));
        array = new int[] {191, -122, 281, -115, -284, 391, 151, -456, 204, 259, 88, 1, 298, -84, 415, -262, -168, 443, 308, -45, 59, 33, 340, -450, 367, 323, -332, 202, -489, 494};
        assertEquals(12, PivotFinder.getRandomPivot(1924049437).findPivot(array, 9, 23));
        array = new int[] {119, -277, -206, -162, -455, -402, -364, 459, 175, 450, 475, -89, -294, 131, -189, 90, 491, -299, 64, 122, 165, 290, -86, 416, 218, -212, 103, 181, -94, 251, 439};
        assertEquals(23, PivotFinder.getRandomPivot(995718447).findPivot(array, 20, 28));
        array = new int[] {-259, -148, 225, -447, 90, 367, 418, 19, 392, -21, -27, -328, -127, -360, -458, 30, 455, -208, 369, 327, 174, -430, -192, 257, 378, 221, -183, 307, -95, 366, -299, -498};
        assertEquals(27, PivotFinder.getRandomPivot(-138406665).findPivot(array, 26, 28));
        array = new int[] {-50, 205, -442, 444, -293, -280, -237, -345, 290, 471, 96, 387, 61, -151, -153, 354, 54, -382, 383, 235, 312, -42, 108, 329, -218, -420, 146, 269, -332, -315, 149, -140, -218};
        assertEquals(19, PivotFinder.getRandomPivot(-315967800).findPivot(array, 9, 26));
        array = new int[] {15, 452, -112, -265, -417, -352, -334, 468, 466, -158, -64, 399, 273, 160, -116, 47, -449, 63, -8, -487, -283, -204, -132, -453, -316, 258, -232, -469, 231, 5, -241, -72, 314, -275};
        assertEquals(25, PivotFinder.getRandomPivot(-802582333).findPivot(array, 25, 25));
        array = new int[] {-2, -462, -290, 186, -241, 371, -332, -221, -19, -408, -468, -107, -436, -261, 342, -139, -500, 73, -257, -454, 276, 360, -270, 111, 122, 487, -490, 260, 31, 371, 275, 447, 367, -302, 326};
        assertEquals(11, PivotFinder.getRandomPivot(-1983122639).findPivot(array, 9, 27));
        array = new int[] {-490, -106, -316, 346, -218, 96, -189, 413, -75, -163, -284, -132, 179, 330, -11, 332, 482, -137, 243, -380, -130, -325, 364, 139, 435, -187, 67, 275, -154, -215, -396, 466, -252, 135, -273, 115};
        assertEquals(17, PivotFinder.getRandomPivot(1557667782).findPivot(array, 12, 30));
        array = new int[] {-188, 233, -128, -210, 259, 414, -207, -276, 108, -340, 286, 321, 247, -272, -60, 340, -122, 355, -232, -14, -148, -465, -34, 344, -243, -188, -284, -355, -469, -232, 40, -229, -390, 122, 90, -388, 201};
        assertEquals(34, PivotFinder.getRandomPivot(-466588983).findPivot(array, 21, 35));
        array = new int[] {111, -320, -19, 318, 68, -284, -316, 382, -469, 351, -373, -241, -139, -297, -372, 437, 324, 185, -464, -447, -284, -356, -371, 339, -155, -66, 388, 418, 79, 177, 162, 307, -277, 470, -264, 344, -206, 153};
        assertEquals(7, PivotFinder.getRandomPivot(-1482003124).findPivot(array, 1, 31));
        array = new int[] {23, -347, -20, 95, 276, 311, 302, 427, -335, 363, 452, 439, 465, 197, 375, -166, -28, 112, -218, -225, 292, 132, -142, -454, 183, -111, -449, -463, 293, -92, -77, -454, 313, -331, 335, 334, -499, 443, 50};
        assertEquals(14, PivotFinder.getRandomPivot(-774739027).findPivot(array, 9, 15));
        array = new int[] {-19, -451, 325, -410, 438, -234, -15, 13, 16, -405, 173, -33, -11, 228, 107, 110, -162, -396, -22, 395, -149, 263, 430, 260, -153, 424, -125, -299, 407, -372, 233, -193, -161, 70, -471, -215, 13, 0, 38, -446};
        assertEquals(38, PivotFinder.getRandomPivot(725600933).findPivot(array, 35, 38));
        array = new int[] {122, -209, -111, -415, 26, -287, 249, 68, 73, -271, -108, 468, 454, -290, -6, 294, -7, 213, 214, -290, 214, 134, -451, -293, -445, -212, 108, 353, -160, 186, -10, -354, 299, 377, 383, 12, 180, -402, -273, 485, -140};
        assertEquals(22, PivotFinder.getRandomPivot(513525185).findPivot(array, 12, 28));
        array = new int[] {-34, 77, 421, -105, 96, 337, 213, -248, 270, 21, -75, -427, 241, 475, 400, 209, -229, 392, -205, -191, -468, 456, 376, 230, -387, 482, -306, -25, 301, 158, 8, 196, -98, 474, -48, 301, -381, -212, -120, -136, 472, 410};
        assertEquals(2, PivotFinder.getRandomPivot(139686326).findPivot(array, 1, 7));
        array = new int[] {-278, 62, 141, 385, 29, -422, -444, 259, 79, -232, -139, -475, 107, 313, -50, -382, 449, 430, -454, -326, 208, -264, -449, -309, -188, -402, -493, 373, 203, 466, -201, -277, 65, -247, 396, 233, -69, -148, -94, 70, 400, 455, -352};
        assertEquals(29, PivotFinder.getRandomPivot(1709847879).findPivot(array, 24, 37));
        array = new int[] {220, -410, 373, -219, -122, -169, -91, -219, -399, -200, 495, -77, 424, 46, -101, 418, 194, 55, -447, 409, 158, -107, -44, -227, -272, -65, -274, 463, -304, -251, -203, 114, -484, 176, 187, -260, 84, 171, -341, -402, 363, 98, 7, 394};
        assertEquals(34, PivotFinder.getRandomPivot(1896595548).findPivot(array, 7, 37));
        array = new int[] {-114, -433, 336, 324, -494, -172, -339, 197, 54, 154, 264, -145, 365, -53, 26, -53, 365, 233, -102, 287, -470, 412, -294, 309, 311, -111, -479, -327, 114, 427, -194, -297, 491, -157, 374, 410, 497, -173, 2, 314, 241, -199, 328, 45, -348};
        assertEquals(30, PivotFinder.getRandomPivot(673541770).findPivot(array, 30, 40));
        array = new int[] {244, -18, -229, -66, 378, 2, -151, -149, 459, -417, 334, 194, 482, 199, 396, 119, -382, 171, 400, 364, 398, -197, -2, 107, 164, 33, -95, -275, -130, -243, -402, -428, 143, 235, -468, 11, -297, -407, 466, -491, 419, -220, -44, 266, 84, 66};
        assertEquals(38, PivotFinder.getRandomPivot(1599323342).findPivot(array, 20, 40));
        array = new int[] {-474, -294, 483, -135, 92, 260, -319, -361, -87, 207, -418, 138, -14, 81, 380, -24, 239, -463, 343, -133, 145, 213, -49, 207, -490, -74, 50, 6, -458, 140, 262, 93, 134, 170, -12, 115, -127, -234, -24, -122, -34, -225, -115, 201, -51, 123, 5};
        assertEquals(16, PivotFinder.getRandomPivot(2050313929).findPivot(array, 2, 19));
        array = new int[] {-493, 308, -58, -44, -66, 455, -343, -443, 418, 217, 67, 463, 209, -419, -394, 317, 449, 270, 338, 385, 431, -282, -59, -104, 57, 481, -406, -126, -151, 433, -195, -44, -330, -410, -51, 36, -107, -286, -30, 256, 116, 198, -235, 460, 327, 404, 31, 390};
        assertEquals(27, PivotFinder.getRandomPivot(-1116808826).findPivot(array, 26, 31));
        array = new int[] {107, 258, 135, 416, -312, -149, 185, -204, -296, -327, -25, 403, 478, 96, 374, 498, -198, -194, -338, -350, -351, 462, -76, 258, 387, -349, 472, -396, -51, -100, -211, -334, -389, 430, -22, -374, -486, 431, -35, -435, -353, 446, -249, 21, 472, 1, -496, -140, 173};
        assertEquals(5, PivotFinder.getRandomPivot(-1846573685).findPivot(array, 3, 5));
        array = new int[] {-121, 458, 281, 395, -99, -362, 291, 433, 487, -419, 84, 346, 327, -455, -492, 243, 438, -216, -82, 341, -232, -58, -76, 14, 139, -283, 80, 396, -75, 432, -343, 42, -390, -57, 14, 11, -369, 365, 250, -414, -410, -363, 132, -188, -282, 331, 9, -458, 421, 199};
        assertEquals(44, PivotFinder.getRandomPivot(27540683).findPivot(array, 44, 46));
        array = new int[] {-80, -435, 195, -310, -165, 449, -442, 205, -138, 483, 362, -84, -156, 491, -225, 300, 354, -146, -342, 20, 396, -240, 481, 482, 335, 223, 125, -354, 177, -66, 170, 310, 349, -470, -94, -394, -486, -339, 221, -191, 155, 36, -379, 464, -319, 335, 270, 230, 5, -67, 107};
        assertEquals(46, PivotFinder.getRandomPivot(1513754730).findPivot(array, 44, 48));
        array = new int[] {418, 330, 331, -303, -98, 238, 275, 248, -207, -318, 29, -414, 415, -495, -171, 402, 216, 201, 36, -351, 206, 358, -58, 51, -458, -375, -330, -232, -201, 218, -350, -470, 176, 287, -415, -226, -450, 495, -304, 473, -221, 447, 172, -480, 290, 72, 121, -20, -73, 300, 489, 464};
        assertEquals(22, PivotFinder.getRandomPivot(-1332131297).findPivot(array, 22, 25));
        array = new int[] {139, 49, 152, -291, 222, -443, -328, 117, 199, 444, 30, -422, -101, 302, 85, 75, -435, -6, 255, 321, 177, -405, -234, -325, -287, -14, -1, -292, -377, -144, -469, 312, -192, 50, -421, 92, 409, 279, 456, -254, -15, -251, -43, -140, 3, 455, -239, -464, 382, 59, -36, -15, -102};
        assertEquals(40, PivotFinder.getRandomPivot(-1875944047).findPivot(array, 11, 50));
        array = new int[] {-274, 246, 2, -316, -2, 28, 496, 403, 398, -17, 385, -228, -271, 37, -329, -26, 125, -93, -131, -80, -45, 418, -334, -226, -361, -215, -347, -232, -34, -130, 177, 60, 124, 230, 181, 19, -112, -215, 235, -136, -388, 396, 442, -91, -172, -186, 275, -192, 58, -220, 389, -205, -164, 0};
        assertEquals(31, PivotFinder.getRandomPivot(-952968678).findPivot(array, 25, 49));
        array = new int[] {121, -229, -269, 293, 452, -160, 51, 103, 356, -155, 360, 399, 186, 382, -463, -421, 282, 410, 252, -9, 47, -470, 114, -47, -448, -116, -384, -42, -192, 276, -214, -465, -493, -448, -78, 459, -123, -377, -226, 354, -267, -107, -120, -292, 102, -131, -354, -460, 486, -140, -22, -60, -137, -203, -428};
        assertEquals(30, PivotFinder.getRandomPivot(1850962746).findPivot(array, 13, 52));
        array = new int[] {-326, 231, 467, -428, -68, 239, -412, -92, -175, 179, -431, 244, -67, 381, 346, 134, -334, -264, -480, 64, -317, 338, -474, 234, 118, 261, -109, -283, 256, -213, -334, -259, -221, 110, 499, -454, 163, -422, -62, 417, -10, 256, -460, 26, -455, -25, 490, -282, -369, 65, -169, 22, 12, 319, -269, 243};
        assertEquals(34, PivotFinder.getRandomPivot(-116931520).findPivot(array, 30, 38));
        array = new int[] {-406, -118, 405, -352, -456, -433, -470, -450, -242, -255, 470, -176, 8, -464, -343, -98, -158, -151, -270, 477, -86, 276, -354, 24, -59, -473, -196, -241, -454, 219, -456, 424, -257, 164, 330, -191, 406, 190, 250, 47, 347, 499, 347, 256, -275, -414, 249, -459, 190, 105, -264, -372, 57, -133, -486, 362, -113};
        assertEquals(33, PivotFinder.getRandomPivot(-1889726812).findPivot(array, 33, 36));
        array = new int[] {461, -466, 270, -319, 447, 224, 191, 428, -482, 208, 346, 333, 209, -85, -16, 101, -396, -161, 413, 308, -292, 104, 88, 10, 104, -284, -136, 371, 359, 120, 5, -349, 340, -202, 351, 168, 219, 398, 15, 287, -385, -55, 241, -185, -463, 420, -302, -238, 479, -303, -308, -70, 287, -22, -221, -432, -194, -265};
        assertEquals(53, PivotFinder.getRandomPivot(-1771640427).findPivot(array, 39, 53));
        array = new int[] {271, -247, -33, -248, -241, 207, -294, -230, 262, -415, -267, -5, -335, 7, -153, -322, 64, 361, 336, -67, 79, 134, -318, -433, 40, 124, 423, 84, 390, -491, 274, 118, -379, -381, -254, -193, 277, -360, 96, 273, 230, 164, 249, 206, -235, -285, 455, 220, -220, 466, -333, 284, -169, -250, 37, 72, -413, 482, -460};
        assertEquals(40, PivotFinder.getRandomPivot(-1693702174).findPivot(array, 1, 41));
        array = new int[] {-327, 371, 144, 406, -496, 281, -372, 108, -135, -260, 226, 82, -140, -336, 391, -99, -137, -153, -187, 377, 431, -102, 495, -28, 103, 236, 399, -203, 293, 170, 364, -105, -444, -213, -321, -154, 388, 288, 188, 348, 46, -57, -99, -32, 211, -406, 242, -484, 101, 151, 317, 393, 253, -412, -318, -279, -422, 18, -228, 321};
        assertEquals(48, PivotFinder.getRandomPivot(-1201653168).findPivot(array, 37, 51));
        array = new int[] {418, 139, 129, -492, -496, -63, 353, 453, 483, -125, -422, 169, -43, 349, 279, -127, -442, 70, 150, -496, 95, 387, -90, 82, 317, -361, -74, 101, -131, -104, 48, 290, 286, 349, -328, -499, 231, -181, 277, -433, -162, 479, 147, -499, 458, 238, 211, -215, -282, -216, 48, 422, -141, -118, 110, 394, -472, 107, 272, 284, 289};
        assertEquals(58, PivotFinder.getRandomPivot(836811375).findPivot(array, 58, 58));
        array = new int[] {494, -68, -487, 55, -438, 98, 69, -95, 13, 422, 126, -365, 347, 159, -150, 227, -496, -265, 368, -230, 29, 483, -441, -176, 363, -63, -398, 433, -365, 98, -319, 60, -273, 310, 215, 284, -407, 95, 380, -209, -482, 78, 182, -93, -386, -126, -271, -415, 498, 255, 384, -54, 386, 258, -378, 95, 67, 107, 38, 389, -198, 387};
        assertEquals(22, PivotFinder.getRandomPivot(-114262836).findPivot(array, 19, 37));
        array = new int[] {60, -32, -35, 69, -48, 89, 313, -271, -496, 202, 315, -413, 148, 159, 298, -13, -68, -442, -459, 361, -108, 435, 160, -138, 27, 177, -436, -440, 179, 58, 364, -286, 211, -477, -413, 342, -33, -425, -244, -464, -287, -201, 449, -232, 145, 26, 149, 395, -472, 151, 237, 231, 490, -396, -312, -119, 450, 201, -240, 261, 351, 286, -199};
        assertEquals(46, PivotFinder.getRandomPivot(-910517268).findPivot(array, 39, 47));
        array = new int[] {-196, -354, -394, 303, -434, 79, 403, -187, 422, -169, 492, 226, -42, 173, 477, -169, -383, -184, -221, 95, 362, 160, 263, -60, 374, -33, 243, -224, 310, -284, 189, -338, -411, 132, 280, -5, -464, 341, 130, 435, 459, 352, -167, 292, 120, 266, 78, 89, -446, -376, -45, 460, 152, -340, -296, 452, 388, -40, 225, -90, 491, -298, 76, 387};
        assertEquals(19, PivotFinder.getRandomPivot(-1228384795).findPivot(array, 16, 26));
        array = new int[] {-31, -241, -74, -271, -348, 22, -152, -69, 117, 74, -214, 242, 30, -99, -10, -176, -248, -215, -173, 142, -21, 0, 283, 448, -217, -130, 66, 379, 152, 259, -483, 386, -398, -394, 421, 54, 249, -413, -401, 52, 250, 468, -271, 136, -324, 421, 370, 471, 197, -495, -25, 194, -118, 427, 398, -274, -273, -281, -295, 480, -233, -162, 440, 383, 129};
        assertEquals(21, PivotFinder.getRandomPivot(1559652705).findPivot(array, 20, 44));
        array = new int[] {347, -358, 95, -60, 307, 168, 236, 323, 244, -82, 49, -333, -342, -398, 380, -185, -180, 63, 357, 140, -455, 394, 46, -394, 493, -40, -393, 496, 248, 410, 180, -125, -196, 129, -301, -330, 466, -188, -251, 411, 111, -487, -31, 323, 96, -449, 223, 215, -489, 169, -48, -361, -16, -73, -193, -280, 429, 471, -452, 294, 121, 209, -339, -326, 77, 479};
        assertEquals(19, PivotFinder.getRandomPivot(1671361177).findPivot(array, 12, 21));
        array = new int[] {-108, 318, -45, 467, 129, -25, 323, 63, 423, -208, -488, 196, -138, -21, 213, 414, -55, 318, 234, 47, 434, -238, -417, -287, -389, -329, 182, -462, -200, -286, 33, 221, 467, 276, -421, 9, -417, 384, 179, -88, 190, 232, -342, 470, 86, -43, 294, 444, -410, 17, 63, 432, -66, 138, -466, 371, -268, 382, 206, -162, 339, 406, -86, -110, 462, -176, 318};
        assertEquals(24, PivotFinder.getRandomPivot(1121360542).findPivot(array, 15, 25));
        array = new int[] {211, -107, -318, 32, -422, -317, -495, -199, -156, 280, -288, 397, 81, -76, -63, 55, -199, 1, -489, 229, -124, 306, 236, 389, -234, 405, 87, -436, -110, 382, -207, -147, 79, 58, -458, 114, -104, -3, -488, 305, -212, 64, 87, 46, 238, -374, -146, -23, 32, 42, -153, -340, 96, -90, 486, -268, -131, -317, 474, -111, -182, -118, 128, 219, 424, 379, -46, -189};
        assertEquals(16, PivotFinder.getRandomPivot(-609042800).findPivot(array, 3, 50));
        array = new int[] {-399, 349, 419, -285, -182, 104, -61, 130, -295, -32, 177, 301, 33, 328, 268, 396, 16, -10, -59, 251, 333, -47, -85, -77, -48, -274, 370, -125, -107, 202, -226, 127, -395, 162, -486, 411, 481, -426, -73, -7, 483, 452, -317, -210, -5, 488, 32, 475, 402, 153, 78, -90, 471, -169, -377, 9, -4, 145, 76, 442, -44, 187, -111, -406, -165, -204, 289, 474, 234};
        assertEquals(58, PivotFinder.getRandomPivot(-227059388).findPivot(array, 18, 58));
        array = new int[] {295, 214, -467, -123, -189, 429, 395, 362, -90, 401, -255, 219, -310, -71, 44, -95, 48, 318, 49, 499, 199, 371, 82, 352, -242, 5, -232, -450, -346, -310, -248, -310, 479, 430, 51, -287, 46, 64, -259, -493, -105, 499, -422, 183, -427, 120, 296, 169, 43, -127, 477, -327, 110, -359, -314, 189, 33, 175, 336, 478, -44, 336, 175, 288, -278, -260, 97, -430, -434, 145};
        assertEquals(3, PivotFinder.getRandomPivot(-755887409).findPivot(array, 2, 5));
        array = new int[] {446, 194, 460, 279, 339, -413, 319, 447, 237, -116, 76, -22, -162, -395, -321, -303, -98, -241, -223, 383, 278, -297, -15, 116, -229, 101, -203, -421, 453, 121, 342, -63, -49, 17, -455, -371, 33, -440, -78, 383, -480, 270, 220, 14, 296, 368, 195, 313, -352, -204, 354, 57, -157, 356, -17, 194, -25, -404, -100, -179, -410, -103, 458, 291, 50, -31, 486, -440, -474, 473, -51};
        assertEquals(55, PivotFinder.getRandomPivot(-1002527467).findPivot(array, 55, 57));
        array = new int[] {415, -290, -388, 75, -135, -413, -65, 402, -474, -92, 147, 498, 289, 237, -16, 38, -327, -173, 22, 283, -159, 36, -104, 327, 404, -235, 422, -292, -419, -200, 476, 179, 253, 224, -384, 262, 6, -61, -151, 255, 92, 338, 187, -114, -68, 408, 255, 91, -76, -331, 486, 272, -311, -98, -138, -238, -368, 2, 118, 220, 468, 363, -405, 80, -394, 207, 357, -421, 379, 75, 60, -220};
        assertEquals(34, PivotFinder.getRandomPivot(1582427060).findPivot(array, 27, 40));
        array = new int[] {403, 444, -175, 159, -48, 447, 125, 436, 278, -423, 162, 235, 473, -81, 127, 490, 92, -311, -98, -435, 277, -33, -91, -234, 208, -425, 126, -53, 366, 188, -499, -222, 458, 178, 158, 191, 337, 222, 337, 214, -45, -85, 75, 347, -278, 287, 202, -2, -346, -36, 76, 493, 354, 266, -451, 354, -153, -79, -45, -236, 322, 244, 463, -287, -355, -118, -413, 256, -33, 495, -166, 396, -176};
        assertEquals(44, PivotFinder.getRandomPivot(2070854405).findPivot(array, 26, 45));
        array = new int[] {249, -299, -354, 386, 136, -415, -163, 114, 492, -488, -98, 449, -372, -27, -281, -16, -122, -112, 387, 170, -154, -288, -51, -408, 306, -330, -210, 301, -459, 372, 465, 273, 270, -371, -424, 171, 300, 366, 221, 456, 480, -278, -210, 208, 303, 291, -499, -305, 235, -492, -125, -55, -11, -196, 105, -497, 97, 204, -125, -178, 325, -198, 305, -194, 63, 318, -389, -224, -109, -207, 409, 281, -138, 478};
        assertEquals(51, PivotFinder.getRandomPivot(1018138973).findPivot(array, 24, 65));
        array = new int[] {371, 305, -239, -203, 411, 373, -268, -297, -363, 200, -408, 99, 251, 306, -288, 337, -91, 287, -328, -331, -182, -432, 5, -75, -116, -256, 199, 22, -438, 400, -447, 286, 127, -473, -126, 314, 487, -430, -69, 436, -214, -140, -216, -184, -391, 242, -428, -189, 406, -474, -436, -287, 344, -427, -74, 186, 411, -345, 243, 152, 166, -477, -137, 407, 78, -4, -54, 65, 360, -468, 110, -283, 316, 292, -168};
        assertEquals(66, PivotFinder.getRandomPivot(-77604919).findPivot(array, 48, 73));
        array = new int[] {437, -499, -84, -297, 100, -410, 58, 0, 141, -166, -147, 92, -431, 325, -39, -374, 170, -221, 292, -277, 365, 389, 141, 373, 178, -359, 177, 6, 431, 412, 141, 177, -414, 127, 102, 88, 61, -132, -356, -201, -76, 235, -443, -391, -6, 45, -170, 497, -431, -500, 83, 374, -31, -251, -328, -444, 103, -157, -168, -229, 151, -319, 34, -10, 45, 172, 476, -253, -412, -85, -384, 258, -159, 108, 43, 491};
        assertEquals(55, PivotFinder.getRandomPivot(-896034907).findPivot(array, 22, 56));
        array = new int[] {-284, -36, -184, 328, -94, 274, -148, -108, 168, 406, -481, 302, 383, -233, -16, 368, -242, 52, -434, 105, 32, 340, 90, -139, -121, -23, 468, -222, 424, 355, 400, 181, 197, -311, 213, 107, -64, -197, -174, 124, -45, 75, 277, 353, -95, -167, -406, -458, -240, -107, 244, -229, -170, 200, -373, 372, -67, -317, -238, 224, -35, -383, 475, -17, -252, 297, -118, 397, 300, -445, 411, 363, -55, -405, -160, 292, 37};
        assertEquals(42, PivotFinder.getRandomPivot(1549119469).findPivot(array, 40, 46));
        array = new int[] {75, 141, -62, 451, -36, 62, -12, 220, -328, -187, 96, 91, 23, -478, -403, -111, 496, 188, -434, 118, -269, 338, 248, -219, 10, -65, -162, 211, 157, 436, 463, 265, 185, 441, 297, -214, 36, 391, 76, -386, -457, -476, 181, 492, 48, 201, 421, -98, -253, -392, -282, 198, 109, 463, 442, 159, 141, -70, -41, 174, -400, -59, -469, 263, 215, 422, -480, 428, -490, 481, -436, -368, -357, -435, -225, -198, -23, -76};
        assertEquals(76, PivotFinder.getRandomPivot(2005163238).findPivot(array, 74, 76));
        array = new int[] {429, -479, -464, 217, 164, -132, 416, -36, -421, 471, 18, -128, 304, 140, -374, -468, -79, -327, 361, 75, -497, 455, -231, 254, 335, 88, 292, -301, 98, 254, 349, 62, -342, 325, 318, 378, 165, -340, -272, -405, 406, -99, -167, -229, -154, -34, 0, -184, 218, -293, 420, -313, 62, 482, -246, -497, 183, -69, 205, 332, -50, -174, 64, -226, -391, -382, 295, 205, -165, 328, 92, 236, -364, 209, -147, 87, 443, -399, -158};
        assertEquals(72, PivotFinder.getRandomPivot(-1635807544).findPivot(array, 72, 75));
        array = new int[] {383, 137, 460, -257, 421, -292, -335, 187, 236, -194, 60, -306, -500, 466, 338, 62, 373, -170, 471, 175, -500, -171, 39, -287, -424, -255, 329, -203, -237, 354, -363, 373, -196, -432, -339, -337, -7, 81, -222, 446, 233, 239, 438, -122, 384, 329, -18, -150, 467, 28, -157, -365, 403, 246, 302, -329, 152, -81, -424, 427, -54, -323, -84, 358, 388, 178, -324, 92, -347, -396, -488, 420, -69, 369, 333, 175, -196, -308, -15, 13};
        assertEquals(37, PivotFinder.getRandomPivot(1112585793).findPivot(array, 37, 74));
        array = new int[] {-423, 109, 422, 245, -312, -252, -271, 358, 153, -248, -59, 349, 93, 452, 313, -411, 245, -13, -78, -155, -54, 71, 337, 78, -256, 262, -218, 110, 167, -337, -3, -475, 151, 338, 219, 437, -481, 182, 317, -473, 386, -500, 125, -1, -200, -288, 227, 449, -436, -128, 28, 389, 223, -492, 313, -466, 16, -483, 30, -247, -203, -13, -99, -415, -261, 127, -50, 495, -361, 479, 238, 446, 463, -264, -342, -371, 183, 461, 230, 149, 83};
        assertEquals(70, PivotFinder.getRandomPivot(-1716345688).findPivot(array, 59, 74));
        array = new int[] {190, -142, 54, -317, -329, -377, 221, 215, -157, 458, 44, -198, 72, 118, 2, -346, -492, -257, -69, 236, 207, -415, -398, -217, 285, 137, -151, -82, -417, -315, 143, 199, -332, 231, 36, -241, 217, 260, -444, -26, -166, -173, -467, -153, 155, 449, -441, 125, -135, 266, 168, -248, 70, -182, -255, -369, -236, -15, -216, -120, -47, -124, 218, -461, -277, -160, 61, 484, -215, -318, -25, 39, -434, 458, 111, -386, 251, -114, 398, -26, 279, 467};
        assertEquals(28, PivotFinder.getRandomPivot(49356520).findPivot(array, 21, 56));
        array = new int[] {176, -19, 430, -74, 315, -269, -352, -135, 286, -222, -320, -206, 131, 495, 410, -468, -48, 45, 61, 220, -209, 108, -157, -52, -451, -134, -199, -253, 351, 20, -66, -421, -16, -262, 393, 471, 15, 268, -389, -441, -307, -11, 123, 217, -259, -397, -320, 78, -44, -481, 73, 382, -304, -193, 72, 304, 189, 165, 342, 235, -46, -356, 152, -398, -381, -97, 86, -321, -89, 414, 348, 375, -343, 397, 434, 277, -60, -373, -114, 270, 375, -84, -295};
        assertEquals(71, PivotFinder.getRandomPivot(1183311876).findPivot(array, 69, 72));
        array = new int[] {248, -53, 279, 353, -100, -400, -216, -248, 21, 194, 219, -479, 229, 489, -461, -78, -121, -238, 385, -363, -387, -256, 16, -255, 403, 363, 64, 194, -398, 32, -445, -359, -255, 333, 451, 297, 62, 63, 476, -448, 443, -150, -226, 13, 43, 196, -246, 236, -165, 494, -251, -68, 21, -120, -309, 10, -96, 144, 99, 443, -396, -41, -471, 387, -287, -192, 353, 205, -321, 494, -2, 453, 199, -207, -86, -406, 9, -20, -32, 322, -97, 374, 205, 73};
        assertEquals(11, PivotFinder.getRandomPivot(-188406150).findPivot(array, 10, 11));
        array = new int[] {490, -51, 138, -67, 230, -126, -336, -90, 349, -369, -95, 50, 241, 339, -104, 97, -471, 153, -363, -185, -374, 277, -85, 18, 53, 48, 39, 359, 461, -340, 320, -332, -405, 475, -322, -384, -216, -407, -413, 159, -330, 99, -455, 42, -93, -481, 487, 203, -453, -469, -156, -114, -391, -127, 462, 282, -198, -48, 70, -9, -313, 334, -364, 258, -227, -135, 187, -268, 218, 373, -335, 1, -411, 375, -498, 227, -365, -135, 230, -465, -294, -50, -492, 223, 155};
        assertEquals(78, PivotFinder.getRandomPivot(-973270909).findPivot(array, 71, 80));
        array = new int[] {172, -73, 441, 138, 213, 459, -207, -121, 154, 421, -11, 483, -396, -339, 248, -167, 22, 312, 352, 89, 460, 243, -61, -277, 176, 305, 480, -337, -102, -280, 484, 386, 468, 42, -19, 451, -297, -97, 110, -36, 206, -408, -217, 404, -107, 214, 192, -223, 13, 241, -254, 458, 183, -179, -22, 59, 26, 46, 139, -38, 299, -4, 486, 14, -264, 481, 177, 327, -239, -40, -38, -80, -325, 368, -402, -151, 178, 149, 267, 465, 147, -80, -50, 113, 291, 52};
        assertEquals(35, PivotFinder.getRandomPivot(-395122278).findPivot(array, 33, 36));
        array = new int[] {20, 151, -326, -35, 74, 138, 247, 400, -364, 332, -184, -30, 154, -291, -32, 434, -313, -26, 424, 0, -410, 15, -435, 143, -26, -317, -408, -263, -311, -419, -370, -458, 474, -139, -336, 283, -475, 162, 229, -205, 312, -194, 218, -331, -209, -55, 292, -191, -66, -478, -187, -384, 71, -7, -126, 79, -445, -350, -299, 199, 429, -177, 126, -35, -238, 78, 404, 9, 77, 265, 498, 325, -217, 352, 380, 92, 131, -449, 240, -28, 176, -331, 122, -199, 39, 411, -64};
        assertEquals(39, PivotFinder.getRandomPivot(1769275196).findPivot(array, 33, 60));
        array = new int[] {-436, 4, -12, 13, 274, 223, 64, -415, 231, 22, 251, -181, 199, -109, -454, -382, 428, -282, -222, 460, 394, -235, -423, 126, -95, 297, 236, -279, 187, -192, 371, 429, -330, 332, -399, 101, -404, 0, -264, -138, 285, 194, 169, -451, 54, -38, -328, 316, 419, 45, -154, 241, 0, -338, 97, 180, -115, -14, -394, 162, -232, 110, 319, -262, 52, -184, 159, -220, -466, -130, -359, 321, -191, 174, 369, 283, 16, -420, 162, -471, -168, 281, 39, 95, 416, -234, 149, 152};
        assertEquals(65, PivotFinder.getRandomPivot(630675264).findPivot(array, 5, 68));
        array = new int[] {-139, 421, -471, -361, 264, -216, -180, -358, 433, 243, 189, -242, 5, 489, -83, -83, -34, -464, 64, 407, 291, -397, -355, 416, -298, 199, -446, -248, -302, 162, -215, -384, -418, -251, 387, -369, -333, -318, 479, 412, 22, -168, 22, -10, 2, 115, 279, -433, 453, -247, 258, 176, -219, -304, -445, -90, 191, 466, -459, 322, 332, 466, -311, -58, 81, -111, 250, -190, 209, -431, -19, -113, -367, -237, 130, -333, -377, -93, -119, -397, -192, -335, 52, 223, -275, -333, 431, 206, -151};
        assertEquals(39, PivotFinder.getRandomPivot(1304317884).findPivot(array, 26, 41));
        array = new int[] {294, 443, 354, -277, -468, 223, 385, 149, 451, -42, -128, -447, 428, -482, -17, 431, 76, -455, 386, 205, -254, -285, -341, -125, 425, -121, -9, -175, -218, 341, 488, -284, 232, -282, 23, 159, -178, 224, 299, -450, -399, 468, -6, -170, 296, -123, -389, -263, -78, 195, 86, -147, 476, 29, -439, -492, -186, 398, 23, -42, 188, -194, -137, -262, 286, 497, 39, -108, -220, 468, 410, 360, -94, 163, 277, -372, 292, 64, 242, 108, -346, -249, 279, 135, -349, 357, 119, 487, 336, -42};
        assertEquals(88, PivotFinder.getRandomPivot(1569210203).findPivot(array, 86, 88));
        array = new int[] {-370, -165, 341, -205, 268, 13, 414, 398, -236, 402, -337, -100, -90, -351, -402, -20, 144, 148, 284, -480, -51, 206, -57, -279, 47, 83, -275, -72, -375, -351, -276, -270, 381, -375, 214, 23, 53, -262, -430, 272, 437, 18, 254, 194, 485, -471, -496, 331, 52, 373, -68, 336, 207, -348, -424, -71, -342, -223, -421, -295, -51, -306, -45, 261, -400, 370, 462, 9, -199, 255, 33, -175, 10, 290, -444, -389, -344, 248, 86, -49, -227, -118, -204, 311, -265, 405, 109, -191, -30, -175, -342};
        assertEquals(39, PivotFinder.getRandomPivot(1751830529).findPivot(array, 32, 41));
        array = new int[] {-88, -485, -351, 230, 465, -272, -272, -54, -275, 385, -322, -114, -474, 102, 189, 193, -477, -136, -428, 74, -265, -296, -63, 161, 233, 349, 28, -401, -292, -419, -322, -70, 414, 436, -192, 169, -379, -278, 8, 305, -51, -324, 6, 74, -97, -167, -370, -111, -428, 351, -154, 146, -441, -495, -378, 89, -424, -496, 39, 166, -452, 372, -84, -293, -462, -140, 133, -230, 161, 89, 403, -240, -340, 252, -58, 433, -320, 239, 409, -370, 204, -193, -481, -494, -1, -156, 367, -156, 432, -14, -197, 137};
        assertEquals(65, PivotFinder.getRandomPivot(178694495).findPivot(array, 64, 65));
        array = new int[] {-473, 479, -270, -432, 297, 44, -114, -129, -477, 364, -292, -393, -20, 15, -241, -396, 413, -212, -251, 418, -19, -212, -498, -172, -413, 425, -34, -330, -98, 212, 231, -465, 140, 131, -386, -451, -402, 473, 399, -220, -252, -105, 416, 450, 266, 480, -272, 41, 294, -333, -222, 152, -251, 81, 50, 347, 2, 150, -414, -114, 194, -155, 49, 145, 318, 268, 441, -355, -226, -121, -317, 37, -121, -176, -79, 103, -135, 100, 296, 98, -145, 488, 273, -390, 307, -102, -142, -58, 133, 468, -467, -53, -56};
        assertEquals(89, PivotFinder.getRandomPivot(1088989428).findPivot(array, 89, 89));
        array = new int[] {-44, 369, 42, -73, -200, -365, 214, 499, 53, -212, -240, -252, 395, -59, -212, 334, -324, 99, 3, 217, 333, 485, -197, 275, -198, 411, -159, 271, -181, 26, -250, 59, -43, -140, 228, 407, -242, -252, 403, -295, -487, -81, -196, -490, 18, 334, -232, -317, -66, 368, 454, -47, 18, -372, 497, 495, 23, -268, -390, -31, -401, -74, 374, 487, -113, 84, 446, 224, 16, 203, 223, 117, -37, 152, 454, 410, 25, -58, 162, -409, 284, -459, 157, -211, 110, -372, 416, -405, -180, -97, 187, -128, 462, -213};
        assertEquals(16, PivotFinder.getRandomPivot(-1254903549).findPivot(array, 14, 25));
        array = new int[] {-13, 22, 86, 38, 31, -166, -75, 7, 250, 288, -59, 282, 76, 149, -486, 412, 453, -119, 62, 203, 135, 299, 113, 22, -165, -491, 334, -304, 415, -221, 87, 448, 469, -482, 287, 104, -489, -105, 21, 39, 30, 90, -96, 229, -303, -415, 318, 11, 74, 425, 447, -411, 53, -51, 270, 125, 187, 486, -153, 413, 331, -444, -341, 121, 167, -69, -447, -394, -164, 60, 24, -309, -53, -113, 167, -173, -12, -238, 85, 19, -493, -191, -212, -298, -5, -230, 207, -125, -266, 11, 285, 423, 446, 115, 22};
        assertEquals(74, PivotFinder.getRandomPivot(-463920098).findPivot(array, 67, 79));
        array = new int[] {-10, 145, -406, -361, -382, 477, 65, 367, -139, -111, 429, -306, -366, -12, 51, -384, -350, 267, -87, -173, 307, 348, -303, -358, -23, 32, -165, 402, -354, 452, 418, 128, 222, 325, -492, 276, -394, 397, -3, -329, -86, 374, -307, -348, 461, 82, -11, 30, 163, -251, -102, -498, 339, 176, 184, 159, -488, -270, 343, 113, -353, 428, -133, 77, -294, 162, 493, -53, -477, 353, 95, -154, 188, -431, 493, -175, -261, 353, 391, -207, 84, -142, 179, 366, 470, 73, -361, 430, -441, -324, -44, -320, -13, -137, -466, -246};
        assertEquals(33, PivotFinder.getRandomPivot(-761158601).findPivot(array, 28, 34));
        array = new int[] {-277, -16, -440, -179, 333, 172, 442, 209, 367, -160, 176, -89, -499, 404, 260, 287, 181, -280, 196, 280, -124, -261, 427, -22, 377, 6, -316, -456, -175, -314, -110, 130, 318, 192, -138, -295, 316, -433, 21, 3, 146, 306, 37, 46, 273, -431, -19, -119, -211, 373, 390, -2, 268, 423, -30, 204, 367, 464, 440, 201, 229, -152, -88, 45, 127, -85, -215, 473, 219, -211, 28, -130, -168, 310, -339, -221, -414, -159, -82, -482, 459, 406, -416, 195, 303, 72, -313, 250, -438, -200, 472, -309, -424, 80, -222, 5, 200};
        assertEquals(80, PivotFinder.getRandomPivot(-1949816483).findPivot(array, 76, 81));
        array = new int[] {22, -397, -266, -262, -4, -80, 59, 186, 171, -86, -492, 473, 61, -439, -452, 464, -131, -349, 63, 289, 158, 272, 108, 185, -199, 296, -355, 449, 450, -395, -234, -234, 8, 331, -72, 41, -265, 403, -71, 265, 484, 39, 2, -300, 404, 64, 309, 45, -7, -237, 368, 487, 82, -318, -326, 31, -42, 430, 33, -17, -147, 114, 366, -57, 419, 267, 318, 454, 338, 4, 109, -369, 35, 167, 481, 303, -88, -219, 64, 474, -143, 230, 32, -275, 449, -5, -239, -290, 468, 16, 0, 167, 231, 424, 179, -358, -332, -15};
        assertEquals(27, PivotFinder.getRandomPivot(-1876534248).findPivot(array, 24, 27));
        array = new int[] {487, -135, 407, -12, 304, 12, -92, -67, -99, 149, 221, 139, 331, -192, 344, -200, 352, -35, 281, 452, 250, 462, -253, 102, 213, -20, -461, -55, -389, 446, -71, -323, 29, -328, -144, 8, -80, 212, -267, -311, 307, 295, 28, 233, 373, 362, 277, 39, 307, 380, 470, -401, -25, 0, -150, -218, -364, -168, 15, 76, -322, -266, -355, 198, 270, -53, 362, 222, 67, 342, 235, -470, 316, -166, 285, 311, -438, 132, -102, -33, -421, 344, 326, 390, -231, -9, 321, -84, -263, 215, -417, -48, 319, -497, -469, 314, 262, 181, -333};
        assertEquals(50, PivotFinder.getRandomPivot(-20933001).findPivot(array, 37, 59));
        array = new int[] {5, 191, -340, -220, -35, 458, -435, -473, -296, -470, 178, 173, -492, -114, -145, -355, -364, -297, 484, 94, -393, 261, 80, 409, -431, 238, -290, -122, 8, 332, -99, 130, 338, -294, -29, 274, -238, 163, 193, 374, 369, 382, 185, 445, 1, -406, -29, 368, 12, 226, 144, -450, 339, -10, -90, 468, -334, -314, 130, -106, -271, 490, -164, -385, -466, 235, -68, 137, 198, 320, 10, -135, -406, -82, 443, -238, 6, -352, -104, -308, 413, 478, 232, 121, -464, 309, 461, -44, 253, -109, -20, -90, -172, -459, 414, -266, -475, -321, 92, 428};
        assertEquals(42, PivotFinder.getRandomPivot(-1396970951).findPivot(array, 5, 70));
        array = new int[] {-97, -41, -477, -352, 70, -195, 313, -216, 324, 160, 356, 203, -273, 48, 162, 363, -88, -351, -387, -370, -190, 135, 473, 390, 455, 37, 203, 379, 393, -42, -215, 132, -38, 98, 232, 381, -375, -366, 485, 379, 290, 55, -180, 402, 80, 421, 190, 23, 153, -67, 147, -446, 446, -241, 292, 434, -259, 446, -141, 237, 414, -458, 337, -209, 374, 201, 484, 63, 331, -314, -397, 170, -387, 275, 152, -217, -203, 201, 121, -279, -115, -58, 362, -389, -428, -247, -358, 349, -356, -235, 128, 373, -159, 152, -261, 433, 448, 438, 75, -23, -319};
        assertEquals(33, PivotFinder.getRandomPivot(1918105310).findPivot(array, 21, 45));
        array = new int[] {-489, 289, -213, -306, -172, 188, 491, -62, -50, -428, 48, -320, 350, 390, 430, -353, -55, 27, -82, 478, -208, -120, 374, 385, 1, -89, 426, -11, -38, -498, -466, -163, -43, 230, -2, 477, -436, 438, -75, -188, 442, -59, -209, -361, -300, -201, -493, -409, -470, -417, -232, -68, 446, -286, -230, -284, 144, -460, -439, -308, -141, 372, 295, -425, -104, 186, -340, 436, 397, 273, 112, 41, 257, -88, -468, 382, 62, -102, 445, 301, -68, 133, 469, -451, 142, -176, -256, -187, 251, 317, 153, 253, 60, 110, 223, 361, 413, 315, -57, 119, -319, -470};
        assertEquals(36, PivotFinder.getRandomPivot(1060776440).findPivot(array, 11, 66));
        array = new int[] {447, 86, 408, -37, 314, 498, 403, -80, -69, 65, -366, -309, 187, -44, 236, -443, -15, -200, 469, -322, -379, -472, -465, 186, -235, 375, 133, -260, -367, -362, 483, 262, -463, 286, -423, 346, -9, -285, 406, -336, -433, 470, 58, -91, 459, -27, 171, 284, -62, 448, -127, -116, -488, -269, -195, -395, 385, 483, 292, -353, 367, -129, 1, -462, -140, -243, -360, -484, 81, -99, 192, -38, 204, -386, -240, -482, -264, 435, -422, -231, 382, -230, 340, -82, 386, -415, -21, 243, 321, 405, -318, -108, 389, -328, 161, 430, -285, 430, -351, 229, -244, 341, 491};
        assertEquals(95, PivotFinder.getRandomPivot(-8601476).findPivot(array, 12, 95));
        array = new int[] {367, -266, -464, -364, -432, -220, -365, -383, 161, 128, -357, 130, -10, -162, -43, -271, -337, 416, 270, -65, -313, -122, 93, 326, 482, -162, -49, -64, -453, 29, 484, 499, 90, 314, 391, 1, 85, 427, 332, -432, 302, -265, -55, -158, 354, 31, 295, 386, 393, 425, 66, 12, 257, 467, 339, 359, 237, -247, 271, 251, 227, -37, 128, 345, -461, -419, -287, -133, -124, -140, -401, -440, -456, -310, 323, -196, 288, -273, -388, 34, -494, -500, -390, 351, 398, -3, -443, 29, -463, -38, -100, -232, 392, -463, 281, 304, -474, 236, -23, 340, -264, 355, 42, 127};
        assertEquals(50, PivotFinder.getRandomPivot(704064334).findPivot(array, 48, 54));
        array = new int[] {-226, 397, 130, 340, -326, -158, -250, 159, -331, 59, -484, 139, 126, -71, -117, 472, -402, -142, 188, 294, 29, -483, 381, 69, -469, -84, 417, -57, -244, 463, -119, 9, 351, 290, -63, -36, 403, 404, -295, -382, 95, 128, 110, -132, 404, 249, -499, -455, 416, 183, 315, 152, -150, -274, -244, -82, 246, 157, -290, -189, 492, -124, -375, 7, -103, 222, 397, -462, -111, 406, -32, 289, 358, -410, 219, -187, 18, -101, 15, 397, 222, 36, 225, 179, 277, -294, -72, 348, 424, -135, -81, -95, 454, 475, -437, 123, 415, -442, -278, 387, 45, 308, 158, -32, -184};
        assertEquals(87, PivotFinder.getRandomPivot(-409621520).findPivot(array, 55, 100));
    }

    /**
     * The public test from artemis to see if the index of the median within those limits are returned or not
     * @author Artemis
     */
    @Test
    public void MedianPivotFrontArtemis() {
        int[] array;
        array = new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        assertEquals(1, PivotFinder.getMedianPivotFront(3).findPivot(array, 0, 9));
        array = new int[] {9, 1, 8, 5, 2, 3, 5, 1, 0, 7};
        assertEquals(3, PivotFinder.getMedianPivotFront(5).findPivot(array, 0, 9));
        int returnValue = PivotFinder.getMedianPivotFront(5).findPivot(array, 2, 8);

        if (returnValue != 3 && returnValue != 6) {
            fail();
        }
    }

    /**
     * Test to see if the index of the median within those limits are returned or not
     * Note: If the median has duplicates, this test expects the FIRST index of the duplicate to be returned
     * @author Artemis
     */
    @Test
    public void MedianPivotFrontTest() {
        int[] array;

        array = new int[] {69, 420};
        assertEquals(0, 1, PivotFinder.getMedianPivotFront(3).findPivot(array, 0, 1));
        assertEquals(0, 1, PivotFinder.getMedianPivotFront(5).findPivot(array, 0, 1));
        array = new int[] {352, -198, 88};
        assertEquals(2, PivotFinder.getMedianPivotFront(5).findPivot(array, 0, 2));
        array = new int[] {117, 357, -487, -153};
        assertEquals(3, PivotFinder.getMedianPivotFront(3).findPivot(array, 1, 3));
        array = new int[] {-250, -97, 28, -406, -268};
        assertEquals(4, PivotFinder.getMedianPivotFront(5).findPivot(array, 2, 4));
        array = new int[] {399, -236, -481, 253, -161, 242};
        assertEquals(1, PivotFinder.getMedianPivotFront(3).findPivot(array, 1, 5));
        array = new int[] {223, -328, 316, 310, 414, 339, 73};
        assertEquals(5, PivotFinder.getMedianPivotFront(3).findPivot(array, 3, 6));
        array = new int[] {-107, 67, 305, -103, 418, 28, -95, 325};
        assertEquals(1, PivotFinder.getMedianPivotFront(3).findPivot(array, 0, 7));
        array = new int[] {254, -5, -88, -357, 119, -374, 497, -279, 486};
        assertEquals(7, PivotFinder.getMedianPivotFront(5).findPivot(array, 3, 8));
        array = new int[] {-389, -108, -205, 291, 337, 30, 365, 114, 413, -356};
        assertEquals(3, PivotFinder.getMedianPivotFront(3).findPivot(array, 2, 9));
        array = new int[] {-144, 192, -408, -164, -61, -61, 235, -429, -156, -163, -284};
        assertEquals(9, PivotFinder.getMedianPivotFront(5).findPivot(array, 8, 10));
        array = new int[] {-29, -323, -446, -370, -242, 343, 18, 410, -347, -252, -219, -354};
        assertEquals(4, PivotFinder.getMedianPivotFront(5).findPivot(array, 2, 11));
        array = new int[] {-231, -160, -80, -472, -350, 297, -301, -146, 231, -156, 461, 162, -44};
        assertEquals(7, PivotFinder.getMedianPivotFront(5).findPivot(array, 5, 12));
        array = new int[] {138, -406, 351, 240, -403, -476, -293, -359, 71, 210, 241, -123, 168, 154};
        assertEquals(8, PivotFinder.getMedianPivotFront(5).findPivot(array, 6, 13));
        array = new int[] {2, 330, 445, 79, 267, -306, 186, -456, -8, -426, 190, 357, -164, -79, 426};
        assertEquals(4, PivotFinder.getMedianPivotFront(3).findPivot(array, 2, 14));
        array = new int[] {251, -371, 168, 281, 62, 46, 275, -444, -379, 221, -349, 59, -25, -324, -334, -20};
        assertEquals(5, PivotFinder.getMedianPivotFront(3).findPivot(array, 5, 15));
        array = new int[] {253, -274, -98, 209, -102, -429, 421, -59, 184, -372, -459, -251, 285, 374, 123, -430, 248};
        assertEquals(14, PivotFinder.getMedianPivotFront(5).findPivot(array, 10, 16));
        array = new int[] {174, 25, -97, 196, 356, -304, -365, -156, -182, -388, -303, 233, 364, 381, -238, 269, -14, -170};
        assertEquals(8, PivotFinder.getMedianPivotFront(5).findPivot(array, 7, 17));
        array = new int[] {-103, -149, 277, 348, 445, -405, -21, 372, 148, 320, -176, 63, 162, 258, 310, -187, 163, 97, 128};
        assertEquals(3, PivotFinder.getMedianPivotFront(3).findPivot(array, 2, 18));
        array = new int[] {-102, 409, -32, -173, 362, 352, 306, 60, -43, -408, 176, 495, -50, -353, -214, -184, 445, -285, -55, -62};
        assertEquals(5, PivotFinder.getMedianPivotFront(3).findPivot(array, 4, 19));
        array = new int[] {-380, -103, -498, -354, 394, 177, -21, -196, 229, 416, -28, 456, -116, 150, -201, 187, -27, 364, 337, 330, 394};
        assertEquals(5, PivotFinder.getMedianPivotFront(3).findPivot(array, 3, 20));
        array = new int[] {-97, 0, -291, -470, -185, -154, -438, 236, -219, 370, -85, -335, -79, -294, -319, -491, -42, 19, -234, -316, -410, 194};
        assertEquals(7, PivotFinder.getMedianPivotFront(3).findPivot(array, 7, 21));
        array = new int[] {307, -328, 262, 78, -393, 284, -463, -281, -323, -427, 321, 472, -321, 381, -273, -101, -256, 414, -6, -56, 180, 292, -327};
        assertEquals(19, PivotFinder.getMedianPivotFront(5).findPivot(array, 15, 22));
        array = new int[] {-481, 241, -316, 277, 89, -488, -499, -129, 178, -21, 257, 257, -144, 56, -123, 144, 274, 190, 6, 102, -281, 358, 329, 235};
        assertEquals(22, PivotFinder.getMedianPivotFront(3).findPivot(array, 20, 23));
        array = new int[] {-28, 212, -55, 495, 244, -193, -379, 347, 457, -214, 401, 369, 472, -371, -265, -104, -468, -186, -440, -87, -317, 154, 331, 209, 230};
        assertEquals(7, PivotFinder.getMedianPivotFront(3).findPivot(array, 6, 24));
        array = new int[] {-311, -75, -291, 170, 20, 337, -159, 10, -184, -139, -469, -111, -14, -108, -175, 155, 469, 18, 217, -84, 323, 97, 478, 178, -392, 400};
        assertEquals(12, PivotFinder.getMedianPivotFront(5).findPivot(array, 12, 25));
        array = new int[] {-155, -133, 33, 440, -148, 198, 317, -440, -227, -260, 423, 57, 9, -158, 106, 438, -462, -386, 247, 414, 97, -4, 351, 63, 432, -64, 409};
        assertEquals(20, PivotFinder.getMedianPivotFront(3).findPivot(array, 19, 26));
        array = new int[] {289, 341, -416, 131, 497, -260, 324, -152, -235, 416, 20, 10, 495, -218, 205, -319, 149, 283, -262, 18, 438, -411, -472, -405, 394, 131, -101, -202};
        assertEquals(10, PivotFinder.getMedianPivotFront(5).findPivot(array, 9, 27));
        array = new int[] {440, 419, -489, -473, 75, -187, 0, -349, 482, -185, 68, -470, -51, 20, 103, 35, 215, 360, 92, -174, 238, 281, -431, 234, -292, 82, -179, -336, 14};
        assertEquals(15, PivotFinder.getMedianPivotFront(5).findPivot(array, 12, 28));
        array = new int[] {-142, 182, 65, -389, -75, -368, 333, 259, -245, 214, -118, 390, -411, 167, -433, 115, 35, -74, -23, 492, -137, -476, 312, 227, -352, 145, -90, 210, 488, 456};
        assertEquals(2, PivotFinder.getMedianPivotFront(3).findPivot(array, 0, 29));
        array = new int[] {-482, 95, 399, -297, 431, 350, 32, 392, -217, -1, -273, -281, 84, -215, 223, 251, -100, 218, 115, 162, 68, -42, 118, -155, -315, 148, -152, 423, 203, 119, -10};
        assertEquals(5, PivotFinder.getMedianPivotFront(5).findPivot(array, 2, 30));
        array = new int[] {331, 113, -35, -340, 369, 195, 234, -48, 219, -262, -103, -171, -258, 324, -48, -3, -421, -119, 470, 6, 293, -308, 102, 481, -175, -393, -38, -149, -286, 286, 214, 205};
        assertEquals(11, PivotFinder.getMedianPivotFront(3).findPivot(array, 9, 31));
        array = new int[] {-284, 251, 182, 126, 499, 36, -479, -435, 495, 80, 81, -89, 161, 172, 256, -460, -182, -100, 135, 482, -219, -466, 360, 253, -49, 380, 143, -77, 314, 348, -49, 131, 349};
        assertEquals(28, PivotFinder.getMedianPivotFront(3).findPivot(array, 28, 32));
        array = new int[] {-175, -151, 471, 144, 222, -8, -62, 217, 30, -323, -163, 296, 90, 395, -22, 464, -341, -143, 206, -268, -187, -108, -306, -79, 446, 442, -449, -36, 65, 68, 110, -96, -121, 391};
        assertEquals(29, PivotFinder.getMedianPivotFront(3).findPivot(array, 29, 33));
        array = new int[] {-252, -35, 112, -225, 119, 192, 265, -188, -71, -291, 13, 69, -137, -27, 427, 51, -190, 109, 314, -310, -243, 196, -278, 128, 145, -362, -374, 60, -304, -34, -4, 210, 482, -264, -167};
        assertEquals(30, PivotFinder.getMedianPivotFront(3).findPivot(array, 29, 34));
        array = new int[] {-82, -356, 186, -360, -23, -210, 196, 127, -268, -238, 287, -433, 373, -188, -117, -10, -3, 94, -208, 458, 481, 308, -47, -437, -313, 433, 59, -337, 471, 372, 296, -16, -429, -60, 250, 488};
        assertEquals(34, PivotFinder.getMedianPivotFront(3).findPivot(array, 33, 35));
        array = new int[] {-104, 302, -244, 388, -396, 303, -193, -127, -162, 44, 245, -316, 311, 255, -64, 135, -491, 203, 343, 123, -204, -439, -174, -233, -476, 455, 275, -54, -42, 366, -298, -367, 9, -330, -447, 305, -463};
        assertEquals(17, PivotFinder.getMedianPivotFront(3).findPivot(array, 17, 36));
        array = new int[] {-410, -461, -169, 311, 117, -113, -469, -140, -394, 454, -435, -283, 397, 296, 468, -374, -74, 326, -322, 156, 184, -106, -298, -319, 150, 265, 347, -64, 328, 178, -187, 445, -16, 85, -118, 466, -23, 105};
        assertEquals(29, PivotFinder.getMedianPivotFront(3).findPivot(array, 27, 37));
        array = new int[] {387, 330, 363, -478, -492, -273, -87, 116, 105, -232, 160, 252, -206, -277, -445, 198, 328, 85, 184, -461, 344, -482, -240, -278, 60, 11, -301, -188, -144, 28, -194, -51, -248, 93, 122, 47, 83, 306, 242};
        assertEquals(35, PivotFinder.getMedianPivotFront(5).findPivot(array, 31, 38));
        array = new int[] {179, -396, 361, 347, 412, 96, 69, -452, -313, -233, -428, -395, -245, -32, 113, -490, 342, -271, 459, 313, -211, -36, 467, 107, -274, 350, -256, 247, -138, 435, 24, -476, 148, -91, -35, 207, 449, 132, -143, -237};
        assertEquals(8, PivotFinder.getMedianPivotFront(5).findPivot(array, 6, 39));
        array = new int[] {-145, -376, 172, 3, 208, -239, 52, -238, -210, -392, -459, -203, -316, 35, 325, 337, -265, 71, 151, -183, -84, -434, 469, -169, -256, 447, -421, 370, -255, -269, 56, -132, -327, -89, -138, 254, 340, -405, -320, -182, 263};
        assertEquals(28, PivotFinder.getMedianPivotFront(3).findPivot(array, 27, 40));
        array = new int[] {-189, -475, -448, -285, 61, -281, 164, -4, 394, 352, -365, 497, 326, 401, 440, -363, -275, -316, -500, -427, 325, -271, 187, -394, -451, 295, 110, -485, -41, 67, -153, 472, -88, 303, -172, 246, 177, 98, -38, 154, 278, -128};
        assertEquals(39, PivotFinder.getMedianPivotFront(3).findPivot(array, 38, 41));
        array = new int[] {-188, -220, -418, -15, -431, 23, 364, -94, 486, 40, 423, 142, -478, 206, -470, -276, 462, -172, 72, 379, 187, -480, -351, 171, -216, -84, 479, 68, 223, -323, -341, -177, -237, 233, -311, 88, -71, 6, -11, -195, -305, 373, -344};
        assertEquals(32, PivotFinder.getMedianPivotFront(3).findPivot(array, 32, 42));
        array = new int[] {421, -195, -269, 424, 255, 475, 110, -346, 156, 359, -314, 27, 166, 371, 169, -73, 118, 324, 79, 404, 211, 75, -425, 177, 135, -491, 195, 43, 270, 374, 377, -83, -332, -331, -90, -64, -190, -255, -311, 429, -203, 41, -102, 191};
        assertEquals(36, PivotFinder.getMedianPivotFront(5).findPivot(array, 35, 43));
        array = new int[] {-304, -3, 103, -206, -297, 271, 359, 407, -427, 60, -105, 312, -102, -46, -314, 303, -55, -283, 24, 107, -221, 416, 382, -244, -191, 229, 36, -469, -111, -487, 35, -268, 289, 135, -425, -119, 146, 167, -238, 484, 4, 83, -41, -152, -353};
        assertEquals(26, PivotFinder.getMedianPivotFront(3).findPivot(array, 24, 44));
        array = new int[] {-125, 205, 65, 289, -338, -442, 60, 203, 288, -96, 135, -147, -362, -214, -20, -193, 435, -140, -286, 90, -181, -259, 361, -53, 211, -403, -366, -119, 196, -461, 409, -341, -177, -484, 355, -399, 258, -159, 249, -131, 369, -5, 423, 397, -361, -202};
        assertEquals(2, PivotFinder.getMedianPivotFront(3).findPivot(array, 2, 45));
        array = new int[] {41, 299, 391, -483, -285, -136, 203, 399, 280, -323, -450, -411, 289, 259, -211, 380, -74, 85, 304, 193, -344, -87, -48, -167, -383, 332, 296, -90, 179, -267, 379, -101, 73, 447, 450, 408, 198, 426, 56, -295, 352, -221, 484, -247, 16, 336, -238};
        assertEquals(5, PivotFinder.getMedianPivotFront(5).findPivot(array, 3, 46));
        array = new int[] {26, 96, -217, 281, 379, -177, -66, 14, 283, -289, -44, 383, -191, 209, -284, -154, -147, -205, -88, -106, 438, 372, 334, 67, -183, 155, 154, 424, -254, -354, -483, 348, -310, 166, -430, 55, 334, 407, -207, 398, 239, 53, 26, -418, 107, -439, 495, -203};
        assertEquals(36, PivotFinder.getMedianPivotFront(5).findPivot(array, 36, 47));
        array = new int[] {484, 406, -309, -256, 27, 378, -408, 342, 408, 53, -392, -437, 65, -252, -247, -276, 193, -345, 133, 156, -331, -253, -45, -478, -207, 294, 15, -217, -119, 399, -238, 414, 420, -81, 20, 336, 42, 144, 478, 427, -418, -304, -412, -258, 350, 329, -377, -44, -153};
        assertEquals(7, PivotFinder.getMedianPivotFront(5).findPivot(array, 4, 48));
        array = new int[] {33, 282, -442, -302, -487, 318, 81, 269, 383, 263, 12, -473, -118, 379, -344, 376, 132, -479, -354, 59, -89, 476, 33, 287, 304, 440, 80, -62, -270, 356, -405, -99, 262, -260, -387, 160, -170, -207, -144, -270, 433, 407, 39, 12, -96, -116, 292, -69, 79, 200};
        assertEquals(14, PivotFinder.getMedianPivotFront(5).findPivot(array, 14, 49));
        array = new int[] {65, 416, -275, 116, -209, -335, 172, -500, 129, 5, 313, -471, 390, -376, 349, -89, 466, -284, -82, -342, 194, -55, -387, 453, 27, -118, 435, 100, -113, -286, 169, 291, 29, 36, 427, -75, -44, 194, -345, -50, 131, -498, 184, -292, -248, -148, -182, -408, -396, -432, -415};
        assertEquals(21, PivotFinder.getMedianPivotFront(3).findPivot(array, 20, 50));
        array = new int[] {-464, 204, 443, 27, -194, -390, -450, 29, -35, -128, 159, -156, 346, 201, 408, 247, -128, -217, -267, -87, 157, -177, 52, -478, 272, 317, 246, -205, 394, -402, 486, 375, -344, 133, -291, 420, -342, -307, -312, -111, 100, 141, 31, 42, 326, -223, 370, 462, 249, -331, 370, -174};
        assertEquals(16, PivotFinder.getMedianPivotFront(5).findPivot(array, 15, 51));
        array = new int[] {-132, 193, -434, -398, -449, 399, 421, 472, 354, 162, -86, 399, 216, -271, 125, -365, 294, 413, 461, 453, 165, 52, -368, -245, -375, 204, 366, 219, -433, 377, -148, 148, -245, 83, 316, -280, -449, 159, 297, -94, 55, -73, 424, 472, 249, 25, 346, -347, 107, 177, 430, -458, -467};
        assertEquals(14, PivotFinder.getMedianPivotFront(5).findPivot(array, 10, 52));
        array = new int[] {107, -154, 469, -486, 339, -255, 273, 391, 252, -319, 46, -114, -104, 368, -408, 218, -124, -85, -429, -85, 189, -208, -179, -439, -450, -244, 230, -208, -210, 74, -448, 129, -217, -285, -327, 104, 89, 87, 239, -433, -355, -170, -189, -458, -66, 166, 478, -163, 41, -311, 96, -359, -3, -470};
        assertEquals(51, PivotFinder.getMedianPivotFront(5).findPivot(array, 51, 53));
        array = new int[] {-338, -395, -5, -308, -177, 203, 222, 498, -113, 327, -1, 40, 19, 220, -190, -442, -346, -413, -274, 396, -368, 346, 317, -51, -348, -316, 431, -174, 389, -324, 10, 411, 276, -44, -64, -359, 201, -465, 389, 271, 355, -49, -108, 167, 141, 8, -27, 457, -328, 268, 204, 269, -105, -272, 425};
        assertEquals(0, PivotFinder.getMedianPivotFront(3).findPivot(array, 0, 54));
        array = new int[] {147, 43, 264, -497, -173, 118, 349, -18, -481, 127, 350, -63, 225, -72, -292, 356, 465, -300, -322, -478, -300, 482, -204, 76, -456, 402, -50, 284, 231, -28, -345, 231, 5, -328, 481, 369, -81, -33, -42, -149, -494, -255, 16, -49, -99, 48, 198, -404, -115, 106, 91, -35, -205, -348, -196, -413};
        assertEquals(32, PivotFinder.getMedianPivotFront(3).findPivot(array, 31, 55));
        array = new int[] {-455, 270, -53, 244, 322, -182, -125, -129, 311, -169, -475, -2, -429, -38, 190, -478, 22, 67, 120, 24, -411, -401, 331, 170, -172, 46, 51, 70, -77, -23, 59, 69, 70, -230, -65, 26, -362, -121, 15, -460, -315, -444, -417, -334, -177, -284, -125, -469, 499, -452, -296, -225, -303, -244, -170, 133, 70};
        assertEquals(26, PivotFinder.getMedianPivotFront(5).findPivot(array, 26, 56));
        array = new int[] {-110, 297, 187, -267, 311, -47, 92, -164, -148, 429, 468, -447, -255, -159, 117, -283, 419, 457, -499, 0, -449, -32, -36, -3, 467, 468, -334, 136, -344, -287, -202, -323, 260, 272, 448, 94, 292, -276, -416, -399, -234, -478, -264, 380, 260, -462, -140, -274, 284, -218, -14, -93, 293, -234, -68, 179, -363, -299};
        assertEquals(8, PivotFinder.getMedianPivotFront(3).findPivot(array, 7, 57));
        array = new int[] {-449, -187, 235, -315, -255, -306, 216, 23, -440, 484, -238, 453, 309, -80, -245, 110, 21, 364, -429, -410, 459, -96, -67, -133, -248, -119, -472, 232, -94, 249, 300, -17, -394, -62, -425, -439, 460, -421, 244, -454, -2, -91, 14, -264, 396, -241, 94, 58, 487, 174, 319, 374, 471, -311, 378, 282, -316, -384, 235};
        assertEquals(16, PivotFinder.getMedianPivotFront(5).findPivot(array, 15, 58));
        array = new int[] {470, -228, -217, 332, 401, 153, -104, 118, -432, 465, 175, -18, 236, 210, 285, 165, 386, 15, -442, -415, 303, -379, 499, 400, -392, -116, -6, 220, 18, -147, -125, -270, -126, 466, 209, -475, 315, -264, 300, 352, -318, 330, 471, 496, -449, -256, 195, -193, 498, -20, -161, -67, -160, 45, -342, 233, 361, 236, -241, -42};
        assertEquals(3, PivotFinder.getMedianPivotFront(3).findPivot(array, 2, 59));
        array = new int[] {28, -468, 104, 156, 319, 487, 278, 48, 499, -444, 145, -66, 467, -329, 26, 282, -119, -85, 67, 74, 26, 222, 395, -66, 50, 209, -227, 453, -217, 391, 42, 397, 345, -303, -494, 135, 366, -165, 106, -76, -244, -113, -232, 344, 88, 388, 378, -262, 3, 394, 404, 356, -228, -427, -264, 142, 337, 44, -201, -247, -321};
        assertEquals(48, PivotFinder.getMedianPivotFront(3).findPivot(array, 47, 60));
        array = new int[] {422, -229, 249, 222, 372, -322, -60, 106, 327, 28, -407, -417, 103, 276, 372, -384, 362, 2, 370, -276, -402, 446, -313, -246, -114, 347, -203, 390, -189, -406, 385, -291, 228, -326, 487, 257, -463, 398, -291, 41, -392, -156, -403, -383, 426, 422, -52, 193, 48, -82, 440, -188, -209, -446, -257, -313, 146, 234, -6, -28, -489, 66};
        assertEquals(58, PivotFinder.getMedianPivotFront(5).findPivot(array, 56, 61));
        array = new int[] {-5, -110, -352, -321, 228, -59, 28, -115, -157, -487, 207, 189, 208, -418, -367, 221, -318, -474, 371, -109, -337, 472, -107, -88, 90, 305, 54, -387, -366, 276, 486, -6, -413, -342, -183, -170, -356, 69, 466, 112, 100, 174, 97, -173, -383, 222, 411, -223, -114, 26, 292, -442, 145, 199, -300, -451, 382, 373, 203, 65, -437, 177, 130};
        assertEquals(57, PivotFinder.getMedianPivotFront(3).findPivot(array, 55, 62));
        array = new int[] {-206, -238, -104, 270, 404, 92, -195, 265, -496, -325, 463, 461, -160, -497, -298, 236, -36, 134, -458, 134, 309, 256, 353, 84, -208, -164, 206, -358, -76, 87, -158, 154, 378, -84, -55, -83, 281, 47, 377, -219, 139, 380, 292, 151, 400, -139, 8, 236, -195, -56, 276, 198, 312, -17, -423, -409, 50, -248, 338, -228, 145, 229, -254, -367};
        assertEquals(17, PivotFinder.getMedianPivotFront(3).findPivot(array, 17, 63));
        array = new int[] {-314, 41, 71, 447, -358, 186, 120, -6, 325, -412, 43, -122, 43, 35, -445, -146, 379, 202, 242, -411, -482, -264, -86, 170, 247, -228, -292, -147, -75, -299, 282, 66, -77, -141, -418, 225, 168, 252, 278, -144, 146, -444, 7, 478, -170, -468, -378, 124, -390, -395, 30, -182, 452, 265, 379, -374, 35, -233, -275, -11, -221, -135, 464, 177, 166};
        assertEquals(37, PivotFinder.getMedianPivotFront(3).findPivot(array, 37, 64));
        array = new int[] {160, 300, 214, 99, -366, -160, 127, -33, -218, 203, -471, -201, -431, -175, -45, 496, 358, -408, -469, -318, -492, 216, -254, 159, -189, 341, -444, 417, -440, -366, -467, 126, 392, 92, 423, -198, -406, 80, 80, -318, -324, 258, 160, 80, -41, -261, -311, 184, -497, -162, 95, 62, 410, -145, -129, 473, 459, -280, -245, -384, -314, 370, 451, -184, 259, -116};
        assertEquals(22, PivotFinder.getMedianPivotFront(5).findPivot(array, 19, 65));
        array = new int[] {127, 152, 211, -7, -56, -162, 111, -399, -197, 126, 181, 384, -384, -100, -418, -355, -240, 97, 91, -491, -488, -57, 267, 21, 379, 46, -485, -356, 435, -284, 473, -204, 220, -320, 318, -25, -411, 183, 133, 285, -172, -232, 483, -172, -100, -374, -131, 57, 126, -347, -239, -438, -423, -234, 282, -106, 15, 348, -421, -444, 198, -345, -25, -480, -193, -24, -325};
        assertEquals(38, PivotFinder.getMedianPivotFront(5).findPivot(array, 38, 66));
        array = new int[] {-378, -381, 33, 467, 247, 106, 370, -184, 193, -485, -426, 470, -254, -366, 339, 249, 271, -183, -168, 321, 238, -205, -219, -330, -142, 400, 97, -73, -6, -54, -457, -435, 351, -257, -393, 212, 303, -425, 420, 162, -237, -323, -473, 120, -15, -109, -265, 22, 119, 470, -238, -470, -243, 72, 37, 88, 269, 228, 164, 358, 2, -28, -425, 190, 58, 350, -406, 239};
        assertEquals(45, PivotFinder.getMedianPivotFront(3).findPivot(array, 44, 67));
        array = new int[] {389, -145, -467, -228, -116, 121, -340, 407, -355, -97, -380, -412, 392, -396, -170, 264, 31, 119, 477, 435, 14, 68, 280, 27, 16, -490, 260, -283, -212, -441, -386, -486, -138, -243, -267, -462, -182, 483, 310, 192, 148, -111, 113, 458, -477, -111, 121, -485, -333, 336, -255, -106, -94, -436, -422, 81, 130, -272, 177, -412, -467, 449, -467, -236, -97, 196, -186, 321, -443};
        assertEquals(64, PivotFinder.getMedianPivotFront(3).findPivot(array, 64, 68));
        array = new int[] {-207, 440, -349, 57, 376, -290, 187, -58, 222, 170, -438, 498, 328, 148, -60, -151, 223, 392, 400, -279, -334, 26, -226, -451, 417, 157, 156, -144, 108, 12, 384, 386, 162, -293, 152, -31, -331, -357, 365, 382, -326, 200, -42, 427, -394, 57, -487, -169, 244, 60, -4, -322, 116, 251, 402, -369, -483, -129, -471, -85, 19, -473, 471, 455, -484, -107, 197, -2, 188, -75};
        assertEquals(49, PivotFinder.getMedianPivotFront(3).findPivot(array, 48, 69));
        array = new int[] {-257, -352, -181, 12, -34, 287, -256, -148, -23, -107, 105, 83, -383, -151, -396, -43, 147, -170, 103, -255, -38, 215, -201, -89, -85, 388, -455, 175, -123, -231, -423, -212, 275, 333, -267, -488, 239, 455, -99, 49, -140, -131, 66, 353, -304, 71, -168, -205, 156, -72, 145, -439, -366, 284, 247, -221, 98, 189, -371, 498, -447, -24, 419, 386, 278, 132, 164, 118, -102, 403, -419};
        assertEquals(15, PivotFinder.getMedianPivotFront(3).findPivot(array, 15, 70));
        array = new int[] {-372, -16, -187, -278, 374, -264, 91, -143, -185, -242, 489, 245, 101, 199, -221, -393, -65, -380, -236, -215, -291, -475, -83, -231, 29, 282, 482, 353, 19, 13, -484, -285, 228, -469, 492, -63, 383, -86, -486, -158, -161, 404, -181, 201, 417, 130, -192, 72, -169, 380, 113, -110, 351, -92, -259, -267, 60, 282, 372, -162, -193, -14, -132, 415, -255, 90, 44, -357, 207, 143, 81, -494};
        assertEquals(62, PivotFinder.getMedianPivotFront(5).findPivot(array, 60, 71));
        array = new int[] {240, -214, 192, -367, -222, 442, 200, 318, 362, 393, 159, -189, -111, 415, 267, -201, -143, -441, -431, 424, -34, -205, 13, 302, -144, -254, 244, -158, -491, 43, -394, 81, 35, 156, 432, 202, -133, 395, 389, -89, -79, 104, -347, 355, 256, 438, -27, -87, -86, 405, -338, -68, 453, 101, 434, -272, -222, 128, 280, -356, 7, -388, -95, -13, 43, -397, 435, -34, -423, 81, 347, -321, 150};
        assertEquals(24, PivotFinder.getMedianPivotFront(5).findPivot(array, 23, 72));
        array = new int[] {-401, -20, -91, -362, 177, 15, 34, 83, 440, 278, 28, 220, -343, -325, 251, 227, 307, 290, -192, 312, -1, -382, 404, 125, -18, 490, 201, -176, 380, 138, -475, -325, -309, -253, -132, 452, -301, 308, -171, -444, -236, 466, -403, -345, -202, -93, 288, -145, -360, 471, -10, -476, -315, 179, -311, -308, -452, -5, -395, -269, 190, 323, 385, -489, -269, 3, 10, 139, -99, -291, -42, -50, -426, -108};
        assertEquals(26, PivotFinder.getMedianPivotFront(3).findPivot(array, 25, 73));
        array = new int[] {-273, 438, 395, -236, 496, 140, -129, 100, -348, -99, 313, -281, -315, -157, 20, 50, -194, 373, -217, 366, 322, 124, 96, 145, -480, -235, -442, 313, 212, 322, 209, 193, -430, 203, -64, -156, -423, 267, -290, 133, -54, -19, 385, -487, 164, -243, -471, -187, 126, 299, 450, 257, -344, 250, -266, -466, -2, -122, -254, 491, 273, -84, -349, 275, -284, -340, -187, -445, 128, -359, 32, 223, 125, 249, -209};
        assertEquals(9, PivotFinder.getMedianPivotFront(5).findPivot(array, 7, 74));
        array = new int[] {-251, -409, -18, 272, 494, 358, 431, -362, 157, 496, -279, 93, 401, 45, 438, 448, 211, -449, 192, 97, -440, -14, 391, 230, 400, -55, -255, 341, -234, -261, 423, -188, -324, 469, -337, 401, 107, 105, -21, 464, 36, 476, -250, 91, -130, -372, 262, 499, 380, -352, -493, -131, -198, -165, -246, 464, -236, -496, -130, 459, -493, -375, -132, -13, -467, -158, -487, 122, 216, -352, 434, -213, 251, -160, 271, 130};
        assertEquals(6, PivotFinder.getMedianPivotFront(3).findPivot(array, 4, 75));
        array = new int[] {-190, 446, 377, 130, -453, 288, -212, -145, -134, 161, 166, 450, -390, -463, 205, -168, -298, 2, -216, 228, 428, 382, -447, -423, 312, -417, 309, -260, 337, -390, 271, 4, 112, 17, 53, -33, 84, 387, 235, -462, -5, -222, -340, -212, 299, 384, 215, -401, -121, 487, 333, -307, -307, -316, 336, 11, 275, 167, -289, -108, -238, -326, -97, 181, 307, -53, 140, 120, 94, 120, 477, 263, 10, 46, 469, -105, 399};
        assertEquals(63, PivotFinder.getMedianPivotFront(3).findPivot(array, 62, 76));
        array = new int[] {-443, -233, 486, 245, 446, 115, 314, -298, -195, -143, 160, -18, -112, 15, 153, -261, -124, 407, -56, 66, -111, 33, 335, 164, -499, 99, -492, -68, -211, -265, 265, -113, -21, 489, -111, 89, -472, -92, -58, -480, -174, -328, -416, 423, -239, -487, -16, 241, -28, -65, -214, -32, -175, -282, 89, 145, -127, 26, 68, 30, -399, -312, 438, 352, 285, 235, -492, -266, -489, 202, -169, 150, 421, -69, 305, -497, -279, 294};
        assertEquals(13, PivotFinder.getMedianPivotFront(3).findPivot(array, 12, 77));
        array = new int[] {401, 401, 448, -66, 233, 495, 155, 489, 237, -101, 478, 158, -215, -251, 318, 154, 435, 239, 281, -47, 369, -122, 434, -473, -75, -63, -434, 46, 137, 113, -230, -103, -315, 105, -105, -330, 403, -480, 211, -182, -317, -119, 101, 55, 464, -452, -243, -447, 262, -51, -362, 470, -146, -287, -248, -221, 383, 233, -322, 315, -445, 56, 497, -446, 163, -209, 495, 120, -392, -313, 244, -358, -265, -34, -61, 306, 352, 10, -343};
        assertEquals(18, PivotFinder.getMedianPivotFront(5).findPivot(array, 18, 78));
        array = new int[] {-180, 315, -466, 134, 120, 430, -79, -249, 354, -389, -146, -379, 494, 304, -409, 37, -250, -106, 437, -368, 148, 289, -487, 155, -419, 438, 499, -493, -243, 4, -371, -10, -16, 421, 142, 173, -36, 222, -417, -442, -455, 26, 483, 22, -343, 381, 359, -100, -302, -196, 283, 136, -403, 338, 405, -342, -134, 76, 201, 327, 362, -82, 311, 221, -175, 343, -423, 472, 222, -329, -218, 302, 384, -174, 24, -27, -2, -284, 135, -348};
        assertEquals(4, PivotFinder.getMedianPivotFront(5).findPivot(array, 3, 79));
        array = new int[] {59, -464, 478, 29, -347, 405, -285, 312, 374, -318, -160, -324, 371, 393, -401, -8, 85, 259, 474, -87, 493, 252, -415, -53, 478, 106, 195, -262, 201, 377, 433, 365, -111, 493, -283, -160, -98, 54, 377, -59, -65, -95, -51, 247, 80, 449, -48, -366, 44, 305, 103, -454, 307, -212, 364, -146, -68, -253, 78, 344, -353, 259, -186, 221, -55, 272, 49, 44, -318, -350, 281, 276, 139, 187, 383, -322, -288, 201, 139, -68, 246};
        assertEquals(28, PivotFinder.getMedianPivotFront(3).findPivot(array, 27, 80));
        array = new int[] {-28, -260, 446, -198, 451, -282, -145, 2, -287, -306, -278, 15, -272, 301, 23, -115, -1, 91, 437, -290, -208, -391, -418, -325, 275, 286, -104, 110, -243, -32, 472, -217, -356, 181, -166, 17, 289, 205, 211, 480, 376, 261, -33, 466, 107, -157, 462, 303, 42, 233, 66, -298, 383, -448, -220, -203, -386, -373, -20, 52, -182, 228, -202, 7, 443, 71, -447, -473, -77, -47, -228, -221, 7, 212, 162, 304, -109, 362, -188, 50, 446, 355};
        assertEquals(12, PivotFinder.getMedianPivotFront(5).findPivot(array, 9, 81));
        array = new int[] {294, -163, -354, -55, -186, -165, 128, 182, -209, 62, -333, -35, -189, -107, 214, 434, -434, 53, -499, 150, 255, -37, 261, 366, 85, -492, 222, -404, 131, -328, 101, 323, 234, -163, 197, 193, -367, -33, -406, -147, 419, -459, 465, 223, 6, -353, 471, 135, -277, 283, 429, 229, -305, -473, 453, -448, -11, 425, -260, -190, 77, -381, 307, 240, -19, -254, 475, -104, 435, -459, 108, 467, 180, -54, 355, 418, -300, 340, -330, -268, 34, 401, 293};
        assertEquals(14, PivotFinder.getMedianPivotFront(3).findPivot(array, 14, 82));
        array = new int[] {-305, -248, 63, 75, -309, -289, -170, -478, 221, -29, 248, -9, -267, 313, 411, -14, -145, -111, 164, -268, -386, -86, 219, -272, -38, -8, -457, -26, 399, 442, -310, 330, -180, 296, -8, -428, 357, 426, 138, 88, 69, 36, -215, 485, -212, 254, 25, 403, -263, 207, -164, 85, 324, 17, -209, -298, 371, 279, -123, -135, -298, 11, 118, 240, -71, -403, 60, 454, -74, 374, -478, -360, -316, -21, 265, -283, 312, 300, 9, 439, 278, 468, -56, 346};
        assertEquals(57, PivotFinder.getMedianPivotFront(3).findPivot(array, 56, 83));
        array = new int[] {-381, -254, 9, 259, -186, -307, 88, 139, 160, -9, -397, -470, 498, -210, 182, -255, 279, 212, 78, -252, 10, -210, 436, 195, -168, 367, 170, -95, -14, 445, 6, 136, -117, 360, 124, -49, 312, -70, 55, 194, 285, 480, 56, 300, -364, -437, 79, 276, 24, 315, -18, -487, -80, -343, -322, 258, -265, -176, -400, 495, -216, -489, 381, 438, -298, -195, -22, 339, 217, 50, -429, 343, 286, -307, 249, -261, -434, -449, 278, -47, -34, -189, 28, 383, 94};
        assertEquals(75, PivotFinder.getMedianPivotFront(3).findPivot(array, 73, 84));
        array = new int[] {-411, -151, 75, -138, 78, -381, 63, -342, 101, 88, -96, -291, 305, 345, -122, -226, -488, -467, -370, -70, -365, 233, 476, -90, -146, 125, 421, 201, -452, -93, 458, -200, -264, 133, -48, 183, 478, 425, -459, -311, 159, 403, -395, 469, -357, 247, -470, -235, 137, -438, -150, 139, -478, -91, 290, -133, -500, 276, 1, 55, 258, 225, 31, -197, -439, -169, 396, -378, -227, -282, -35, -495, 145, 243, 376, -49, -122, 361, -183, -399, -469, 168, -282, -123, 483, 232};
        assertEquals(59, PivotFinder.getMedianPivotFront(3).findPivot(array, 57, 85));
        array = new int[] {66, -372, 10, -3, -493, -405, 219, -191, 333, -20, -450, 145, 7, -153, -443, 3, -35, 143, -492, 151, 417, 13, 50, 320, -305, 433, 268, 77, -365, 216, -184, -264, 105, 65, -309, 206, -8, 89, -280, -323, 372, 78, 69, -348, 422, 457, -405, 27, -382, -436, -278, -484, -170, 195, -250, -399, 106, -80, 371, -51, 80, 230, 216, 375, 322, 479, -101, -256, 298, 313, 161, 470, 465, -69, -360, -327, 352, 381, 267, 154, -52, 493, 289, 228, -22, -146, -446};
        assertEquals(27, PivotFinder.getMedianPivotFront(5).findPivot(array, 24, 86));
        array = new int[] {-9, -485, -281, -232, 34, -134, 333, 174, 377, -253, -290, 119, -499, 87, -404, -464, -269, -466, -222, -389, 287, -111, 385, -117, 375, -42, 316, 170, 97, 81, 217, -41, 306, -129, -323, 235, -12, -106, 346, 106, -341, 457, -433, 423, 389, 368, 221, 95, 316, 27, -295, -192, 273, 223, 50, 347, 14, -415, 281, 420, -161, 16, 136, 58, -154, -65, -215, 370, 251, -240, 420, 118, -100, -164, 444, -349, -169, 62, -274, 96, -127, 95, 463, 42, 393, -300, 74, 156};
        assertEquals(16, PivotFinder.getMedianPivotFront(3).findPivot(array, 16, 87));
        array = new int[] {-331, 314, 276, -143, 479, -70, 281, -271, 152, 407, 288, -479, 338, -466, -378, -24, 41, 295, 328, 333, -490, 398, 462, -139, 422, -438, -130, 11, -355, 203, -196, -470, -92, -355, 103, 26, -287, -301, -449, -36, 38, -246, -165, 20, -142, 28, 135, -214, 347, -10, 314, -323, 429, 326, 245, 141, 435, 124, -232, 363, 228, -29, -281, 199, 434, -244, -255, -179, 380, -352, 425, -58, 28, 40, -123, -234, 410, 387, 92, 39, 110, -413, -379, -334, 53, -500, -126, -251, -301};
        assertEquals(2, PivotFinder.getMedianPivotFront(5).findPivot(array, 1, 88));
        array = new int[] {387, 325, 95, -418, -425, -23, -4, 476, -451, 320, 435, 324, -327, -223, 222, -68, 275, -419, -208, -378, 113, -13, 392, -93, 4, -160, 436, -60, 136, 384, -223, -272, -68, 54, 241, -409, 210, 179, 182, 433, -255, 367, -462, -180, -115, -23, 105, -495, -8, -60, -66, 10, 314, -287, -174, -422, -380, -45, 196, -56, -165, 307, -326, -38, -481, -256, 381, -190, 27, 162, 451, -449, 15, 476, -411, 51, 409, 92, 473, 316, -358, -24, -94, -390, 140, -442, -373, 132, 457, -225};
        assertEquals(87, PivotFinder.getMedianPivotFront(5).findPivot(array, 87, 89));
        array = new int[] {-73, 15, -462, -367, -52, 416, 321, 169, 4, -474, -182, 151, -494, 356, -332, -320, -114, -465, -204, 433, 26, 227, 315, -33, -342, -238, 205, 477, -419, -281, -71, -29, 226, 449, 56, 107, 465, -13, 132, -400, -432, -80, -57, -193, -426, -500, -132, -361, 55, -307, -163, 389, 29, 208, -157, 24, 279, -56, 316, 148, 337, 154, -460, -414, 455, -380, -230, -212, -433, 35, -371, 85, -110, 460, 356, -425, 439, 490, -305, -361, -267, -82, 309, 338, -6, 117, 2, -37, 68, 123, 61};
        assertEquals(47, PivotFinder.getMedianPivotFront(3).findPivot(array, 45, 90));
        array = new int[] {75, 333, 404, 154, 10, -196, -276, -434, -320, -386, 464, 382, -137, 318, -219, 26, 41, 419, 417, -14, -447, -242, 478, 132, 109, 310, -162, 19, 110, 302, -260, 3, -335, 301, 53, 265, -74, 238, 129, -496, -126, -106, -246, 166, 259, 362, 296, -139, 439, 315, 54, 93, 289, 162, -460, -226, -62, 398, 354, -84, 344, 165, -418, 155, -331, 102, 419, -262, 311, -452, -66, -332, 343, -161, -131, -295, 257, -51, -409, 483, 311, 190, 474, -484, -495, 205, 45, 445, -475, 170, 74, 457};
        assertEquals(19, PivotFinder.getMedianPivotFront(5).findPivot(array, 19, 91));
        array = new int[] {4, -193, -327, -491, -84, -78, -160, 194, -131, -433, -314, 5, 183, 399, 10, -459, 258, -418, -143, -133, -56, 161, -125, -492, -253, 123, 204, 217, -234, -429, 288, 349, 160, -237, 464, -325, -278, -137, 257, 466, 210, -489, 171, -114, -264, -421, -337, -397, 238, 59, -366, 0, 372, -432, 311, 342, 281, -438, -224, 36, 414, 247, -356, -111, 388, -99, -300, -172, -426, -412, -328, 299, -183, 115, -385, 159, 175, 189, 3, -32, -261, -144, -493, 202, 87, -326, -110, 20, -54, -481, 68, -183, 69};
        assertEquals(20, PivotFinder.getMedianPivotFront(3).findPivot(array, 19, 92));
        array = new int[] {-319, 180, -428, 362, -358, -163, 450, -329, -263, 138, -163, -122, 285, -140, -304, 89, 50, -248, 135, -223, -465, 173, 485, -237, 73, -151, 314, 14, -43, -213, 248, -396, -261, 68, -171, -11, -298, -248, -277, 211, -328, -22, -326, -26, 466, 417, -97, -244, -376, -395, -451, 155, -61, 277, 274, 423, -168, -351, 413, -245, -321, -81, -165, 5, -58, -323, 249, -229, 459, 26, 332, 276, -344, 112, -156, -107, 289, 161, -433, -304, -287, -186, 330, -14, 330, -386, -78, -70, 364, 65, 280, 297, 261, 290};
        assertEquals(90, PivotFinder.getMedianPivotFront(3).findPivot(array, 90, 93));
        array = new int[] {-46, -322, 66, 391, 304, -122, 14, -93, -306, 319, -377, -320, -377, 446, -110, -139, 147, 337, -452, -104, 410, 353, 420, -24, -32, -249, 301, -194, 165, -269, 230, -63, -448, 7, 423, -304, -25, 346, -38, -278, 334, -392, -468, 129, 417, 367, -481, -131, 424, -396, -371, -339, -474, -348, 195, -63, 342, 95, 287, -293, -101, 310, 248, -453, -247, 413, 377, -94, 285, 380, -207, 254, -490, -353, -198, 347, -321, 269, 491, -429, 203, 262, -331, 381, -445, -178, -194, -407, 470, 478, -410, -157, -50, 322, -92};
        assertEquals(82, PivotFinder.getMedianPivotFront(3).findPivot(array, 82, 94));
        array = new int[] {275, 132, 83, 383, 126, -129, -378, 34, 348, -208, -299, 499, -315, -241, -292, 107, 384, 203, 30, -310, 461, 171, 267, 443, 6, 346, 203, 307, 83, -446, -42, -429, 288, -288, -271, 390, 197, 112, 263, -420, 27, -329, -494, -412, -114, -129, -220, 160, 139, 56, 159, -38, -153, 464, 484, -187, 417, 421, -148, 454, 45, 170, -175, -63, -266, -90, -128, -152, 88, -470, 430, 494, -129, -96, 372, -446, -305, 9, 456, -137, -63, 263, 313, 344, -146, 233, -497, 473, -269, 37, 364, -480, 153, 295, 307, -125};
        assertEquals(56, PivotFinder.getMedianPivotFront(5).findPivot(array, 52, 95));
        array = new int[] {-128, -220, -53, -160, -78, 313, -411, -380, -209, 496, -246, -205, -182, 204, -308, 284, -59, 394, -175, -379, 17, -450, 124, 208, 468, 8, 366, -445, -427, -321, 444, 363, -213, 423, -414, 484, -437, 306, 13, 302, 344, -447, -58, 343, 349, 484, -173, -126, 238, 326, 71, -134, -123, -426, 90, 397, 160, 443, -437, 351, -193, 408, 233, -495, 339, 16, 65, -306, -182, 166, -86, 234, -136, -389, 52, -121, -17, -284, -369, -458, 175, 192, -184, 262, 480, 347, -354, 412, -44, 394, 315, 392, 98, 68, 398, 327, -315};
        assertEquals(26, PivotFinder.getMedianPivotFront(3).findPivot(array, 24, 96));
        array = new int[] {-139, -230, 219, 217, 111, -29, 393, -29, 120, 55, -228, -360, 470, -4, -142, -68, 144, -296, 351, 57, 86, 195, -317, 288, -149, -61, 129, 365, -161, 2, 307, 221, -7, 454, 97, 31, 490, -204, -280, 52, -292, -206, -409, -164, -358, 416, 252, -42, 433, -102, 269, 116, -236, -11, 99, -199, 221, -357, -287, -272, -129, 29, 210, 402, -167, 404, 336, -188, 213, -5, 481, -126, 78, -267, 180, -292, -401, -473, 194, -484, 153, 249, 311, -360, 69, -34, -41, -406, -481, -259, -403, 137, -429, -452, 455, 20, -439, 352};
        assertEquals(73, PivotFinder.getMedianPivotFront(3).findPivot(array, 73, 97));
        array = new int[] {-101, 308, -228, 64, -486, -151, 203, 416, 499, 227, -461, -154, -225, 251, -160, 336, -280, 484, 258, 27, -218, -371, -19, 10, -212, -329, 435, -252, 302, 246, 440, 140, -262, -91, -343, -46, -256, -422, -431, 399, 71, 104, -430, -3, -139, 27, 180, 45, -94, 223, -330, -254, -102, 321, -58, 283, 429, -465, -218, -337, 349, -317, -130, 56, -93, 82, 399, 113, -409, -100, 331, 252, -54, 356, 167, -220, -39, 214, 457, -207, 121, -48, -108, 202, -191, -463, -147, 101, -64, 223, -190, -262, -108, -83, 230, -298, -492, 264, -381};
        assertEquals(45, PivotFinder.getMedianPivotFront(3).findPivot(array, 44, 98));
    }

    /**
     * The public test from artemis to see if the index of the median within those distributed limits are returned or not
     * @author Artemis
     */
    @Test
    public void MedianPivotDistributedArtemis() {
        int[] array;
        array = new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        assertEquals(4, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 0, 9));
        array = new int[] {9, 1, 8, 5, 2, 3, 5, 1, 0, 7};
        assertEquals(6, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 0, 9));
        assertEquals(5, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 1, 9));
    }

    /**
     * The public test from artemis to see if the index of the median within those distributed limits are returned or not
     * Note: If the median has duplicates, this test expects the FIRST index of the duplicate to be returned
     * @author Artemis
     */
    @Test
    public void MedianPivotDistributed() {
        int[] array;
        int answerGot;

        array = new int[] {69, 420};
        assertEquals(0, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 0, 1));
        assertEquals(0, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 0, 1));
        array = new int[] {-76, 419, 376};
        assertEquals(2, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 0, 2));
        array = new int[] {425, -284, -45, 27};
        assertEquals(2, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 1, 3));
        array = new int[] {-484, 36, -408, 240, -366};
        assertEquals(4, 1, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 1, 4));
        array = new int[] {-180, 228, 272, 406, -313, 350};
        assertEquals(2, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 2, 5));
        array = new int[] {-249, 352, -24, 110, 316, 150, 137};
        assertEquals(6, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 2, 6));
        array = new int[] {468, 402, -59, 15, 209, -148, -422, 464};
        assertEquals(5, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 5, 7));
        array = new int[] {240, 285, -219, 25, -363, 299, 200, -69, 50};
        assertEquals(8, 6, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 6, 8));
        array = new int[] {435, -269, 269, 297, 353, 49, -150, -194, 88, -363};
        assertEquals(7, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 5, 9));
        array = new int[] {-421, 214, -72, -469, -412, -19, 483, -422, -400, -427, 385};
        assertEquals(8, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 6, 10));
        array = new int[] {95, 436, 89, 418, 245, -180, -205, 347, 75, -159, 283, 200};
        assertEquals(8, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 6, 11));
        array = new int[] {301, -397, 3, -395, 498, -381, 188, 22, 300, -68, 368, 325, -440};
        assertEquals(2, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 2, 12));
        array = new int[] {-353, -222, -43, -319, -328, 412, 494, -234, 99, -486, 440, 357, -398, -233};
        answerGot = PivotFinder.getMedianPivotDistributed(5).findPivot(array, 2, 13);
        if (answerGot == 2) {
            System.out.println("Array: " + Arrays.toString(array));
            System.out.println("Case : PivotFinder.getMedianPivotDistributed(5).findPivot(array, 2, 13)");
            System.out.println("Technically 8 is the correct answer, however with a maybe wrong implementation (accepted by artemis) 2 may also be correct\nAnswer got = " + answerGot + "\n");
        } else {
            assertEquals(8, answerGot);
        }
        array = new int[] {459, 93, -36, -369, -199, 1, 473, -135, 178, -12, -233, 404, -330, 15, -92};
        assertEquals(9, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 0, 14));
        array = new int[] {140, 168, -119, 469, -490, -69, -128, 302, -98, 397, 231, -230, -377, -235, -158, 407};
        assertEquals(2, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 2, 15));
        array = new int[] {280, -11, 387, 247, 327, 158, 448, 348, -418, 481, 100, 424, 11, 165, 423, 90, 241};
        assertEquals(3, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 3, 16));
        array = new int[] {26, -435, 337, -168, 393, -316, 68, 280, -356, 459, -361, 386, -96, 384, -308, 154, 204, 137};
        assertEquals(15, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 11, 17));
        array = new int[] {-351, -117, 463, -1, -103, -466, -417, -392, -132, -437, -158, 270, -11, 134, 122, 477, 54, 10, 357};
        assertEquals(13, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 8, 18));
        array = new int[] {136, -461, -386, 261, 153, -29, -146, -170, -440, -112, 426, 67, 228, -473, 22, 106, 402, -185, 287, -5};
        assertEquals(19, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 1, 19));
        array = new int[] {460, 174, -134, 72, -370, -175, -294, -353, 325, -181, 280, -268, 52, 412, 249, -315, 263, -373, 177, -422, -454};
        answerGot = PivotFinder.getMedianPivotDistributed(5).findPivot(array, 13, 20);
        if (answerGot == 15) {
            System.out.println("Array: " + Arrays.toString(array));
            System.out.println("Case : PivotFinder.getMedianPivotDistributed(5).findPivot(array, 13, 20)");
            System.out.println("Technically 14 is the correct answer, however with a maybe wrong implementation (accepted by artemis) 15 may also be correct\nAnswer got = " + answerGot + "\n");
        } else {
            assertEquals(14, answerGot);
        }
        array = new int[] {73, -476, -65, -99, -316, 169, -485, -372, -58, -356, 6, -324, 410, -22, -170, 149, 182, -265, 391, -452, -107, -457};
        assertEquals(17, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 13, 21));
        array = new int[] {488, 33, -295, 333, -421, 354, 285, 77, 52, -320, -219, -249, -335, 345, 66, -178, -31, -241, -114, 166, 192, 369, 462};
        answerGot = PivotFinder.getMedianPivotDistributed(5).findPivot(array, 15, 22);
        if (answerGot == 16) {
            System.out.println("Array: " + Arrays.toString(array));
            System.out.println("Case : PivotFinder.getMedianPivotDistributed(5).findPivot(array, 15, 22)");
            System.out.println("Technically 18 is the correct answer, however with a maybe wrong implementation (accepted by artemis) 16 may also be correct\nAnswer got = " + answerGot + "\n");
        } else {
            assertEquals(18, answerGot);
        }
        array = new int[] {-413, -188, 27, 427, -413, 310, 246, 63, 152, -137, 240, 227, -350, -227, -196, 446, -308, 498, 124, 492, 397, 348, 104, -372};
        assertEquals(5, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 5, 23));
        array = new int[] {-223, 125, -489, 132, 332, -247, -171, -489, 393, -307, -154, 197, -48, -404, 217, 374, -351, -80, -163, 53, 269, -148, -495, 77, -355};
        assertEquals(18, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 12, 24));
        array = new int[] {-22, -307, 26, 79, -143, 206, -376, -58, 54, -2, -129, 463, -251, -187, -209, -134, 203, 293, 495, 342, 405, -481, 410, 452, 117, 23};
        assertEquals(4, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 4, 25));
        array = new int[] {-216, -301, -367, 52, 400, -396, -123, 103, 284, -327, 14, 440, 453, -298, -255, -11, 99, 261, -295, 75, 263, 294, -457, 95, -49, -170, -298};
        assertEquals(16, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 6, 26));
        array = new int[] {168, -326, 93, -337, 309, 150, 221, 451, 29, 374, -270, -138, 227, 447, -65, 397, -161, -45, -46, 108, 154, -240, 222, 98, -226, -412, 479, -349};
        assertEquals(23, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 14, 27));
        array = new int[] {255, 73, -438, -137, 421, 17, -175, -58, -129, 461, -33, -409, -228, 31, -492, -41, -263, 212, -172, 134, -406, 379, -483, 255, -61, 425, -441, 429, 281};
        assertEquals(12, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 12, 28));
        array = new int[] {-104, 272, 222, 186, -263, 239, -252, 465, 432, 368, -71, -92, 266, -437, 283, -328, -403, -180, -279, -238, -177, -1, 110, 178, 23, -458, -349, 246, -66, 374};
        assertEquals(21, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 15, 29));
        array = new int[] {27, 281, -88, 285, -346, 470, 99, -245, -288, -327, 470, 458, 144, -86, -93, -433, -174, 492, -152, -179, 437, -92, -65, -204, -357, -244, -3, 394, -263, -413, -121};
        assertEquals(16, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 12, 30));
        array = new int[] {342, 43, -344, -358, -167, 279, 95, -196, 451, 327, 45, 437, -421, -255, -139, -181, 496, -218, 76, -97, 241, -338, -176, -481, 368, 288, 101, -211, 430, -365, 58, 36};
        assertEquals(14, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 0, 31));
        array = new int[] {418, -109, -449, 430, -457, 471, -194, 308, -137, -407, 429, 122, 37, 412, 195, 14, 350, 327, -220, -159, -287, -72, -213, -305, 105, 164, 280, -424, -248, -83, 98, -285, -23};
        assertEquals(30, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 14, 32));
        array = new int[] {425, 451, 474, 167, -126, 17, -83, -211, 168, 152, 345, 299, 11, -376, 242, -414, -408, -133, -447, 313, -19, 115, -335, -194, -489, -444, 328, 115, 282, 222, 5, 115, -340, -70};
        assertEquals(30, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 28, 33));
        array = new int[] {-429, -234, -243, -316, -259, -392, -477, 194, 416, 472, 67, 363, 412, -169, -447, -37, 217, 464, -103, 53, -25, 470, 278, 317, -305, -359, 338, -318, 465, 316, 488, -366, 223, 174, -203};
        assertEquals(34, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 0, 34));
        array = new int[] {462, 482, 53, 434, 21, -234, 378, -32, -74, 197, -65, 89, 362, -319, -101, -304, 257, -159, 225, 37, 303, 2, 261, -381, -462, -403, 264, -305, 463, -379, 252, 304, -60, 155, 459, 454};
        assertEquals(32, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 0, 35));
        array = new int[] {-424, -31, 451, 7, -90, -125, 417, 98, 131, 439, 375, -165, -301, 315, 364, -402, -151, 153, 262, -158, -358, -400, -106, -449, 319, 494, 4, 74, 309, -335, -405, -188, -110, -243, -423, -399, -19};
        assertEquals(36, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 28, 36));
        array = new int[] {-18, 379, -485, 289, -50, -217, -46, 398, -132, -489, -181, -459, -140, 39, -287, -14, 165, 211, 233, 31, 482, 453, -395, -285, -68, 341, -56, 273, -274, 176, -296, -431, -452, -389, 219, 3, -216, -39};
        assertEquals(26, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 16, 37));
        array = new int[] {407, -398, -296, 356, 186, -204, 162, -483, -109, 231, 351, 214, 36, 30, 48, 279, 68, 213, -474, -368, 417, -379, -231, -382, 178, 71, -355, -22, -301, -110, 142, 187, -38, -309, 212, -130, 398, 416, 9};
        assertEquals(38, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 20, 38));
        array = new int[] {-217, 393, 376, 162, -304, 491, -248, -122, -135, 402, 485, 43, 361, 323, 160, -402, -15, -397, -364, -191, -268, -401, 186, -483, 322, 346, -353, -472, -292, 92, 392, 186, 82, -483, 40, -318, 103, -58, -168, 312};
        assertEquals(22, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 22, 39));
        array = new int[] {487, 437, 423, -18, -189, 128, -183, 9, 77, 46, 134, 122, 181, 456, 83, 341, 98, -467, 419, 32, 278, -222, -307, -25, 81, 476, -367, 134, 410, -419, 256, 143, -455, 210, -97, 35, 370, -235, 63, 469, 399};
        assertEquals(36, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 36, 40));
        array = new int[] {173, 418, -130, -364, -95, 461, 329, 194, 69, -33, -168, 396, -348, 35, -345, -240, -228, 456, -443, -118, 169, 471, 11, 432, -352, 436, -84, 52, -235, -310, -385, -272, 273, 415, -154, 323, 59, -169, -381, 186, 34, 396};
        assertEquals(40, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 26, 41));
        array = new int[] {370, 332, -190, -387, -279, -122, 417, -423, -492, 209, -325, -440, 491, -347, -346, -300, 377, -459, 20, 24, 352, 118, 429, -78, 73, 373, -58, 26, -368, 476, -357, 29, 22, -399, -248, 166, -375, -268, -363, 10, -146, -438, -368};
        assertEquals(16, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 16, 42));
        array = new int[] {295, -86, 76, -488, 303, -244, 278, 182, 1, -247, 497, -10, 41, 387, 200, 436, -470, 433, -8, 329, 103, -185, 304, -26, -467, 224, 201, 293, 53, 385, 287, 472, -440, -468, -214, -7, 3, -51, 166, 45, 449, -291, 237, -338};
        assertEquals(13, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 4, 43));
        array = new int[] {136, -393, -117, -117, 109, 344, 302, 343, -94, 312, 442, -6, 25, 480, 46, 61, -413, 95, -197, -326, -465, -388, 294, 400, -138, 382, -302, -349, 487, 111, 133, 489, -262, -264, -163, -488, -325, 294, -153, 178, -155, -286, -68, -246, -87};
        assertEquals(43, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 29, 44));
        array = new int[] {161, -175, 434, -198, -431, -391, -291, -417, 369, -133, 394, -253, 335, 59, -215, -181, 240, -175, 428, -425, 165, 59, 175, -410, 321, 453, 270, -141, 266, -405, 132, 335, -23, 189, 307, 222, -408, -111, 436, -346, 303, 151, 156, -7, -38, 485};
        assertEquals(44, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 10, 45));
        array = new int[] {-93, 219, 467, -119, 431, 111, -399, -362, 421, -448, 340, -56, 30, 191, -193, 62, -176, -389, -178, -191, -220, 290, -170, 8, 253, 243, 337, 258, -277, 214, 189, -196, -347, 233, 428, -362, -466, -337, 342, -428, 134, 199, 242, -98, -95, 135, -372};
        assertEquals(28, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 10, 46));
        array = new int[] {-356, 258, -472, -46, -429, -443, 76, 60, 336, -126, -204, -210, -249, -273, -481, 155, -275, 255, -129, 160, 446, 114, 318, -317, 325, 451, 156, 45, 150, -10, -36, 314, -345, -236, 286, 369, -466, -268, -112, 196, -388, -496, 229, 326, -217, -255, 239, -61};
        assertEquals(33, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 33, 47));
        array = new int[] {-216, 257, -199, 364, 362, 429, 97, 414, -49, -227, 98, 194, 8, 245, -294, 102, -486, -83, -199, 80, -117, 412, -203, 276, -368, 119, 44, 360, -79, -110, -319, -261, -447, 149, -394, 171, -11, 184, -446, -354, -471, 393, 255, -215, 489, -310, 266, -140, -213};
        assertEquals(48, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 42, 48));
        array = new int[] {0, 94, 415, -219, 354, 28, 191, 319, 53, -435, -351, 186, -303, 226, 310, 296, -333, -103, -266, -471, -472, -184, 282, -179, 33, -170, 398, 406, 46, 405, -415, 147, -224, 484, 402, 247, -232, -271, -143, -287, -363, -436, -401, 268, 213, 334, -286, -162, -348, 224};
        assertEquals(49, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 13, 49));
        array = new int[] {-123, 322, -224, 49, -227, 28, 454, 194, 79, 1, 14, -479, 460, 447, 462, 18, 143, 281, 150, 145, -176, -488, 447, 478, -364, -164, 196, 411, -198, -284, -467, 114, 385, -159, 131, -240, -324, 468, 318, 1, 16, -241, 73, 486, -20, -489, 319, 146, 343, -28, 367};
        assertEquals(48, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 48, 50));
        array = new int[] {208, -454, -149, -303, -346, 359, 71, 114, -288, 417, -76, -434, 311, -293, -164, 124, -425, 212, -425, 103, -268, 341, 348, 421, 242, -235, -68, -434, 332, -421, 81, 270, 30, -106, 348, 407, -217, -492, 283, 454, -91, -346, -343, -361, 396, 164, -249, -280, 370, 66, 216, 16};
        assertEquals(40, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 7, 51));
        array = new int[] {-498, 299, -126, 480, 485, 409, -318, -117, 298, 206, 50, 478, -158, -99, 401, -439, -442, 28, 473, -203, 486, 223, -157, -91, -449, 208, 193, -433, 185, -372, 128, 18, 495, -184, -343, 490, -85, -70, -366, 150, 397, -180, -459, 307, 224, -12, 180, 153, 66, 199, -280, 395, -298};
        assertEquals(33, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 15, 52));
        array = new int[] {277, -236, 288, -340, -269, 485, -372, -346, -212, -445, -253, 73, -467, 205, 251, -141, 138, 347, -95, -329, 123, -14, 38, -349, 181, -372, -180, -401, -74, -124, 483, 249, 137, -89, 12, 454, -230, -266, 176, -229, -450, 360, 198, -327, -478, 68, -199, -489, 119, -484, 234, -327, 207, -442};
        assertEquals(52, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 2, 53));
        array = new int[] {111, 375, -132, -386, -400, 48, 403, -241, 61, -245, 192, 334, 42, -439, -82, 234, 455, 412, 485, 373, 213, 366, -36, -8, -101, 12, 127, 355, -360, 46, 459, -306, 139, 230, 38, 14, 359, -342, 141, -385, -182, -200, 125, -246, -388, -259, 26, 292, 429, 17, 142, -469, -41, 419, 409};
        assertEquals(39, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 3, 54));
        array = new int[] {19, -83, 302, -440, -137, -381, 55, 384, -323, 278, 271, 344, -289, 455, -211, 31, 126, -286, 152, -267, 153, -127, 270, -405, -470, 497, 263, -403, 477, -347, -466, -19, 467, 422, -17, -299, 227, 244, 123, -7, -65, -29, 257, 438, 388, -444, -176, -221, -197, -201, -241, 379, 236, -358, -27, -101};
        assertEquals(47, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 45, 55));
        array = new int[] {233, 60, 182, 75, -262, 39, -461, 358, -133, 133, 439, 118, -445, 422, 397, 206, -79, -230, 263, 154, -227, -31, -41, 37, 401, -235, -114, 50, 20, -37, 432, -166, -53, 425, 91, 251, 276, 289, -278, -479, -312, 3, -326, -130, -492, 490, 120, 102, 133, -28, 468, -386, -387, -35, -73, -294, -66};
        assertEquals(46, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 19, 56));
        array = new int[] {-108, -371, -214, -395, 470, -45, 373, 202, 438, -437, 368, 320, 311, -416, -446, -145, 337, -241, 276, -413, 349, 146, -214, -467, -293, -5, -375, -265, -378, -484, -239, -115, 153, 395, -143, -17, -407, 220, 250, -53, 382, 190, 89, 47, -290, 447, 468, -44, 128, 475, -361, 118, 418, -88, 27, 304, 408, -99};
        assertEquals(41, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 41, 57));
        array = new int[] {332, -358, 25, -89, 80, 448, -353, -51, 188, -444, -169, 301, -312, -20, 272, -4, -261, -61, -54, -223, 54, 204, 104, -375, -354, 106, 394, 6, -440, 246, -255, -404, 335, -403, -61, -102, -190, 389, -394, 417, -351, 309, -423, -267, 45, 94, 190, -324, -129, -134, -100, 447, -112, 400, 329, 461, 288, -112, -67};
        assertEquals(17, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 4, 58));
        array = new int[] {-429, -327, 329, 371, -451, -316, -466, 432, -386, 45, 115, 490, -383, -490, 142, 459, -298, 344, 371, 199, 176, -481, -350, -118, -360, 168, -261, -40, 344, -230, 133, -40, -444, -394, -365, 438, 114, -220, -344, -13, -406, -181, 482, 196, -63, 197, -431, -28, 424, 285, 395, -449, -207, 174, -320, 364, -343, 345, -176, -491};
        assertEquals(51, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 51, 59));
        array = new int[] {114, -435, 486, 30, -296, 403, -176, -103, 447, -469, 97, 497, -500, 95, 458, 84, -236, -464, -339, 125, -407, 219, 272, 79, -70, -270, -302, 63, -258, -202, -279, -1, -459, -470, -410, -289, -133, 99, 302, 302, -174, -180, 269, -473, 43, -121, 353, 135, -128, -467, -16, -454, -255, 398, 80, 333, -175, 403, 169, -2, 404};
        assertEquals(55, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 51, 60));
        array = new int[] {112, 295, 47, -400, 291, 170, 380, -199, -356, 375, 321, 295, 324, 64, -436, 244, 477, -403, -163, 397, 403, 35, -392, -328, 384, -152, -35, 41, -300, -446, 38, 3, -450, -131, -276, 459, 465, -429, 158, 161, 237, -347, 392, 472, 192, -432, 380, -483, -175, 227, -113, 100, 401, 117, -430, -227, 159, -493, -204, -394, 223, -121};
        assertEquals(60, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 36, 61));
        array = new int[] {162, 142, -228, -296, -9, -340, 214, -242, 173, 462, -138, -77, 98, -290, -309, -226, 147, -214, 60, -150, 405, -217, 170, -180, -278, 287, -461, 368, -106, 118, -79, 151, 121, 20, -47, 111, -393, -312, 287, -329, -205, -222, -298, 453, -109, 411, -187, 407, -468, -356, 429, -478, -435, 135, -232, -358, -302, -331, -476, -242, -465, -11, -252};
        assertEquals(62, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 26, 62));
        array = new int[] {4, 86, 95, 477, 176, -127, -55, -394, 302, 294, 64, 340, 309, 194, -398, 98, 491, 250, 82, -405, -63, -210, 249, 438, 217, -299, 17, 250, 179, 272, 268, -206, -472, -410, -173, -130, 78, -276, 194, -466, -150, 30, 113, -278, -492, -129, -354, 123, -356, 337, 454, 136, -310, -159, -286, 310, -285, -326, -498, 480, 376, 292, 61, -330};
        assertEquals(34, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 34, 63));
        array = new int[] {-375, -248, 245, -267, -148, 389, 371, -220, -210, -156, -467, -242, -114, -59, -449, -308, -76, -123, -129, 95, -349, 200, -290, 197, 89, -464, 12, -368, 220, 259, -329, 496, -142, 275, -304, -263, 485, -346, -350, 471, 137, -66, 439, 141, 35, 323, 313, -2, -391, -188, 250, -110, 240, 29, -295, -118, -411, -245, -30, 271, -348, 298, -224, 133, 118};
        assertEquals(64, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 60, 64));
        array = new int[] {-375, -123, -237, -190, 246, -57, 36, 346, 53, 374, -5, 53, -330, 430, 185, 495, 142, -119, 236, 183, 211, 326, -485, 130, 117, 19, 496, 423, 469, -367, -71, -111, -67, -186, 330, -141, -492, -47, 426, 357, 316, 317, -24, 469, -55, 448, 267, 257, -40, -82, -429, -287, 297, 246, 23, -319, 347, -274, 308, -164, 235, 106, -346, 188, -392, -120};
        assertEquals(62, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 62, 65));
        array = new int[] {158, -154, -169, 337, 155, 326, 430, -400, 432, 358, -495, -175, -105, -6, 157, -14, -234, -306, -299, 469, -98, -458, -411, -4, 182, -235, -468, -390, -11, -153, -105, 332, 383, -325, -361, 114, 447, 392, -260, 190, -334, 242, -68, 192, -36, 193, 468, 331, -156, 383, -73, 416, -478, -188, 100, -323, 265, -408, -311, 473, 24, 468, -194, -370, 10, -491, -459};
        assertEquals(30, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 18, 66));
        array = new int[] {-411, 485, -3, 342, -112, -464, 253, 411, -243, -95, -411, 388, -114, 495, 161, 317, -357, -217, 135, -455, 338, 247, 199, -106, 48, 211, -6, 450, -125, -104, -453, -431, 482, -325, 443, -84, 188, -275, 225, 272, 93, 6, 445, 256, 127, -230, 125, -353, -275, -308, 481, -394, -205, -154, -223, 190, -439, 34, 47, 339, -218, 496, 303, -26, -14, 485, -333, 429};
        assertEquals(22, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 7, 67));
        array = new int[] {404, 114, 392, 385, -356, 80, 187, 197, 205, 273, -285, 308, 183, 207, -401, -79, 386, -228, -75, -328, -124, -39, 269, 488, -238, -100, 190, 104, 358, 72, -37, 410, -7, 134, -342, 444, -338, -310, 233, -133, 83, -143, -147, -422, -468, 61, -344, -143, 278, 43, -362, 377, 485, -60, -339, 139, -230, 127, -178, 224, 460, 184, -260, -5, -31, -15, 392, -421, -190};
        assertEquals(38, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 28, 68));
        array = new int[] {-370, -195, -391, 175, 296, 94, -401, -289, 342, 205, 486, -174, -178, -441, 416, 491, 293, -316, -477, 114, -390, 239, -423, -483, 315, 364, -352, 494, -233, -399, 106, 362, -297, -313, 330, -287, 265, 106, 20, 481, -173, -77, 367, -355, -87, -57, -21, -229, -349, 144, -279, -61, 389, 129, 363, -12, -340, -81, 488, -392, -454, 123, 52, -24, 151, 196, -414, -382, 436, 98};
        assertEquals(46, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 39, 69));
        array = new int[] {-298, -195, 85, 293, 265, 306, 60, -184, 352, -383, 145, 392, 214, 228, 17, -28, 424, -165, -22, -401, 62, -234, 61, 458, 12, 210, -262, 382, 255, -147, 467, -44, -269, -282, 289, 35, 280, -202, -182, 324, -482, -451, 29, 61, -187, -13, -476, 449, 79, 468, 167, -183, 49, -193, 130, -159, 12, 195, 92, -239, 394, -417, -128, 438, -364, -100, -199, 397, 401, 104, 255};
        assertEquals(39, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 8, 70));
        array = new int[] {168, -302, 454, 132, -10, 54, -483, 454, -405, -172, -140, -183, 159, -247, -210, 69, 274, -431, -162, 312, -55, -426, -322, -53, -323, 378, -285, 383, -283, -10, -284, -151, 139, -171, 338, -320, 228, 136, -191, -265, 273, -410, -277, -325, 259, 271, -298, -246, 211, 325, 204, -418, 208, -208, 305, 117, 161, 364, -390, 78, 74, -302, 288, 394, 467, 496, -117, 181, -52, 357, -29, 0};
        assertEquals(67, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 67, 71));
        array = new int[] {141, 306, -244, -15, 357, -298, -156, -189, -164, 146, 103, 129, -393, -108, -151, 21, 287, 33, -234, -277, -472, -299, 482, -268, -383, 55, -480, 416, -109, 80, 68, 355, 455, -244, -473, 430, 193, -191, 479, -106, 275, -92, -96, -430, -473, 4, -165, 485, -499, 326, -54, -92, -43, 375, 173, 106, 418, 88, 116, 286, 284, -181, -407, 494, -209, -444, -72, -219, -195, -485, -177, -408, 413};
        assertEquals(24, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 24, 72));
        array = new int[] {108, -266, 422, -356, -8, 469, 436, -332, 406, 370, 365, 3, 207, -56, -319, -20, -499, -142, -252, -303, -350, 99, -310, 48, -36, 330, -155, 418, -25, -436, 470, 237, 488, -447, 430, 240, -102, -415, -233, 415, 487, -449, 364, 260, -301, 323, 233, -115, -96, -90, 497, 198, 138, 46, -166, 91, 327, 266, -65, 463, -435, 255, 242, -277, 287, 480, -221, 254, 197, 108, 434, -286, 288, 489};
        assertEquals(45, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 17, 73));
        array = new int[] {175, -89, 415, -434, -263, 224, 152, 92, 173, -74, 251, -315, -23, 468, 183, 413, 489, -453, -99, -331, 317, 110, -250, -117, 271, -105, 211, 337, -237, -411, 52, 413, 48, 117, -248, 5, 67, 186, 51, -204, -422, 283, 182, -371, 246, -353, 31, -453, -207, -385, -87, 219, 391, 488, 295, 40, 490, -277, -254, -240, -67, 251, 155, 343, 490, 315, 257, 104, -489, 417, -69, 35, -142, -245, -222};
        assertEquals(60, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 56, 74));
        array = new int[] {-474, -36, 238, 319, -10, -413, -151, 305, 245, -415, 312, 366, 456, -187, 165, 348, -404, 325, 90, 120, -167, 211, 296, 365, -352, 410, 397, -298, -87, 155, 364, 481, 92, -464, 158, -453, 425, 468, 399, 330, -356, 158, 108, 330, 312, -136, 175, -9, 412, 56, -339, -500, 322, -246, 79, 487, -308, -241, -36, -15, 10, -289, 264, -155, 214, 303, 357, -349, 121, -290, -272, -398, -354, -54, -265, 88};
        assertEquals(74, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 28, 75));
        array = new int[] {378, -466, -433, -223, -113, 360, -153, 9, -236, 259, -23, -138, -65, 188, 487, 449, 307, -182, 22, 231, 459, 318, -299, 392, 453, -224, -363, -312, 209, -155, 332, -48, 309, -76, 343, -25, 6, 424, -180, -87, -475, -121, 138, -262, -381, -110, -339, -292, 19, 397, -495, -245, -197, 174, -445, -310, 141, 258, 383, -281, 400, -389, -431, -15, -306, -266, 291, 490, -102, 392, -24, -169, -351, 457, 43, -124, 346};
        assertEquals(76, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 70, 76));
        array = new int[] {-361, -76, -318, 174, -269, 438, 416, 32, 73, 372, -478, 227, 428, -11, -206, 236, -436, 426, -23, 455, -40, 22, 487, 197, -450, 334, -452, -45, -335, -64, -411, 389, 136, 392, -258, 185, -209, -492, -152, -496, -412, -375, 264, -209, 425, 32, -316, 348, -199, -136, -398, -371, 192, -281, -121, -247, 267, -213, -287, 466, -471, 74, -382, 266, 477, -23, 89, 442, 201, -14, -129, -462, 200, -450, 306, -14, 496, 218};
        assertEquals(77, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 25, 77));
        array = new int[] {-17, -245, -449, -451, -366, -71, 465, 408, 434, 163, 73, -170, 322, 318, -154, 396, 260, 25, -450, -351, 213, -99, 202, -441, -86, -351, -177, 478, 456, -265, -367, 438, -254, -457, 354, -50, -253, 93, 160, -26, -13, 305, -363, -475, 262, -445, -216, 424, -40, -79, -424, -176, -227, 367, -183, -353, 229, 50, 327, 142, 340, 401, -121, 102, -440, -104, -427, -223, 211, -142, 392, -76, 393, 306, 178, 12, 35, -354, 484};
        assertEquals(67, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 57, 78));
        array = new int[] {306, 409, -162, 115, 87, 308, -29, -440, 134, 40, -277, -16, -380, 26, -278, 85, 245, -173, -106, 130, -480, -357, -475, -2, -241, -214, -283, -395, 293, 339, 494, -284, 84, 397, 370, 191, -337, 62, 44, 144, 346, 431, 406, -106, 258, 222, 84, -472, 94, -156, 366, 188, 60, 308, -468, 401, 265, 148, -335, -347, -152, 492, 290, 284, 284, 496, 296, 110, -71, 291, 200, 179, -316, -22, 444, 109, -438, 282, -357, 386};
        assertEquals(66, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 30, 79));
        array = new int[] {-89, 475, 413, 28, 266, -185, 344, -205, 85, -197, -416, 296, -82, 52, 149, 237, -465, 469, 189, 192, -282, -108, -292, -417, -338, -373, -199, 346, -296, 242, -464, 281, 495, -471, 167, -164, 191, 387, -40, 154, -199, 135, 250, -296, 230, 248, 380, -381, 13, -172, -209, 121, 163, 386, 391, 402, 486, 188, 270, -52, -410, 28, -99, -164, -287, -277, -280, -288, -47, 317, 444, -328, -333, 184, -89, 486, 167, 2, -396, -461, -321};
        assertEquals(26, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 26, 80));
        array = new int[] {-198, 48, -370, 367, -448, -330, -81, -178, 184, 357, 479, 471, -291, -87, 208, 110, -406, 35, -213, -473, -432, 332, 192, 410, 403, 220, 173, -489, -150, 128, -303, 3, -495, 145, 332, -496, 493, 17, 21, -158, -229, -159, -353, 206, 253, 166, -55, 309, 482, 51, 449, -354, 257, -417, -468, 346, -54, -394, 44, 73, -271, -426, 230, -470, 383, -408, 359, 439, 367, -314, -28, -9, 114, -212, 442, 357, 312, -145, -136, 237, -252, -166};
        assertEquals(54, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 27, 81));
        array = new int[] {487, 458, 447, -446, -76, -105, -110, -8, 101, -267, -343, -380, 412, -446, 96, 109, 50, -132, 146, 303, -145, -357, -351, 5, 279, -285, 142, -384, 338, 124, -364, 457, 460, 207, -169, 447, 283, 376, 242, 430, -128, -69, 430, 28, 244, -404, -242, -295, 179, 471, -425, 106, 166, 240, 390, 42, -110, -255, 97, 54, -394, 366, -329, -61, -245, 45, 251, 231, -172, -497, -381, -352, 68, 14, -360, 389, 238, 427, -306, -105, -416, 189, -317};
        assertEquals(16, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 16, 82));
        array = new int[] {17, -433, -499, -193, 361, -482, -429, -202, 48, -435, -267, -238, 134, -264, -112, -427, 354, 250, 393, -204, -42, 451, 355, -295, -449, -23, -52, -421, 411, 185, -359, 396, 411, -14, -350, 183, 104, 487, -87, 371, 346, 423, 211, 193, -317, -181, -71, -306, 370, 195, -360, 285, 363, 453, -204, 5, 443, 43, 276, 105, -462, 7, 222, -302, -431, 238, -173, -138, -229, 447, -91, -102, 432, -177, -67, 204, 4, -70, 10, 222, 7, 215, 259, 439};
        assertEquals(74, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 53, 83));
        array = new int[] {-472, -266, 60, 373, 461, 345, -26, 31, -484, 125, -312, -321, -41, 186, -256, -218, 27, 29, 71, -377, 72, 455, -385, -57, -159, -297, -288, 14, -294, -192, 38, 410, 257, -27, -5, 210, 451, -24, -115, 288, 132, 82, -45, -248, 113, 212, 201, 445, -378, -219, -154, -405, -17, 76, -378, 55, -211, 173, -103, 226, -88, -303, 399, -212, -349, 453, 478, -90, -231, 93, -215, -168, -351, 337, -249, 168, -136, -11, 254, 324, -428, -281, -462, -369, 489};
        assertEquals(76, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 76, 84));
        array = new int[] {-299, 431, -294, -305, -52, 344, -27, -133, 348, -487, -261, -381, 280, -397, -398, 307, -88, -158, 393, -449, -409, -268, 304, 153, 329, 15, 82, 225, -1, 303, -16, -453, 9, 445, 35, 105, 230, 371, -91, 473, 275, -13, 492, -238, 182, -80, 404, 32, -227, -356, -192, -49, 440, -288, 381, -5, -64, -478, -85, 38, 67, -167, 97, 179, -251, 436, -84, 0, 363, 64, 475, -247, -1, 8, -246, 94, -404, -105, -70, 54, -115, 33, 89, -371, 230, 391};
        assertEquals(47, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 47, 85));
        array = new int[] {-327, -154, 337, -124, 98, -192, 230, -240, -96, 36, 23, -454, 103, 15, -254, -491, -155, 436, -493, 34, -76, -171, 340, -489, -246, -494, 396, -320, 309, -276, -338, 421, -83, -441, 360, -88, 146, -438, -284, -167, -268, 140, 364, -336, -390, -475, -274, -394, -262, -42, -265, -56, 78, 126, -364, 184, -272, -94, 83, 386, -500, -97, 368, 289, -36, -257, 396, 283, -263, 430, -81, -152, 60, -79, 270, -6, 237, 442, 432, 105, -309, 489, -158, 390, -270, -470, 331};
        assertEquals(86, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 32, 86));
        array = new int[] {459, -209, -31, -358, 357, 211, -254, -279, -127, -397, -385, 114, 315, -208, 458, 192, -204, 69, -207, 37, 189, -111, -445, 483, -34, 186, 423, -62, 300, 103, -484, -105, -359, -321, -134, 237, -196, -437, -329, -486, -174, 333, -290, -271, -59, -316, 202, 63, 144, 125, 449, -188, -355, 16, -141, -376, -323, -277, -14, 344, 39, 31, 419, 236, -460, -147, 482, 414, 254, -188, -164, -488, 401, -13, 69, -110, 130, -91, -389, 376, -44, -354, 74, 380, -295, -8, 293, 389};
        assertEquals(87, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 57, 87));
        array = new int[] {-350, 278, 483, 470, -34, 13, 381, 184, 134, -243, -95, -418, 378, -100, 448, 483, 128, 417, -229, 110, -456, -305, -426, -261, -133, -384, -56, 262, 376, -475, -348, 42, 458, 177, 47, 216, -150, 78, 78, -333, 180, -321, 459, -408, -256, 220, -485, 315, -288, -300, -472, 21, -415, 237, -490, -358, -200, -201, -436, 30, 498, -34, 162, 304, -337, -450, -183, 134, 492, -383, 90, 432, 196, -340, 351, -279, -341, 88, -80, 255, -57, -261, -100, 348, -253, 391, 109, -371, 473};
        assertEquals(51, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 15, 88));
        array = new int[] {-251, -361, -21, 445, -302, 50, -394, 217, -316, 390, 283, -309, 103, 386, -69, 336, 466, -461, 255, -45, -86, 193, -239, -285, 67, -114, -53, 73, -83, 95, -326, 232, 175, 453, -82, 141, -190, 437, 17, -354, 268, -165, 17, 415, 32, -114, 76, -313, -9, -276, -425, -367, -419, 30, -453, 6, 290, -113, -420, -376, -205, 214, -177, -190, 116, 98, 96, 283, -499, 253, 198, 41, -250, 425, -277, 194, 368, -160, 259, -475, 218, 416, 264, -41, -123, -294, 271, -494, -308, 203};
        assertEquals(60, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 32, 89));
        array = new int[] {-104, -141, 180, 181, 357, 362, -196, 133, -486, 438, -458, -97, 166, 406, 141, -203, 487, -67, -445, -324, 414, 256, 337, 422, 81, 229, -71, 51, 297, -114, -97, -340, 492, 249, 78, 183, 253, 245, -281, -328, 95, 171, -237, 418, 265, 486, 402, -462, 35, -47, -163, -109, -210, -396, 125, 212, -214, -182, 278, -446, 273, 387, -226, 67, -200, 336, 408, -71, 430, 152, 333, -10, -243, -434, 370, 466, 254, -83, -420, 407, -87, -391, -416, 349, -375, -173, 487, 47, -474, 177, -402};
        assertEquals(29, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 29, 90));
        array = new int[] {-180, -425, -236, 139, -303, -354, -123, -185, 380, 343, 428, 443, 169, 205, 397, 11, -471, 332, 8, 159, -418, -447, 345, -76, 292, 312, -148, 466, 298, -68, 301, 146, 96, -257, -338, 321, -309, 198, 42, -291, 148, 119, -177, 354, -482, -358, -175, -398, 342, 233, -160, -425, -307, -459, -149, 78, 209, -337, 30, 298, 162, 0, 239, 186, -96, 390, -161, -232, 89, -477, 436, 343, 440, -173, 410, 24, 297, 274, 9, 193, -79, -465, -398, -157, -445, -255, 140, -362, -195, 365, 371, -245};
        assertEquals(63, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 35, 91));
        array = new int[] {33, 208, 246, 31, -448, -189, 30, 496, -373, -164, -102, 133, -424, -414, 417, -498, -111, 235, -18, -266, 179, 290, 111, -364, 121, 22, 464, -91, 61, -425, -375, -380, -333, -109, 208, -213, 322, -249, -180, 35, -272, -487, 80, 360, 193, 18, -144, -152, 355, -423, 364, -206, 432, -326, -122, -389, -191, -282, -240, 43, 292, -188, 343, -138, 266, 269, -298, 471, 384, 461, -111, 423, 375, 69, -289, -477, -278, 350, 330, -413, -60, 0, 383, -417, -229, 240, -148, -252, 349, -328, -269, -492, 325};
        assertEquals(73, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 54, 92));
        array = new int[] {-302, -68, 226, -422, -213, -265, -59, -285, 31, 487, 100, 318, -326, -397, 392, 58, 115, 452, -65, -348, 67, 306, -417, -217, -481, -52, 408, -473, 347, 125, -219, 254, -11, 385, 423, 438, -76, -402, -3, -411, -213, 0, -93, 54, 429, 333, -50, 187, 342, -265, -494, -200, 180, -465, -200, -356, -463, 303, -96, -135, -114, 352, -170, 346, -403, -190, 460, 68, -197, -238, -28, -323, 48, -283, -160, 97, 316, 475, -472, 180, -224, 311, -217, -30, -177, -117, -477, 249, 431, -224, -1, -296, 39, 75};
        assertEquals(52, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 11, 93));
        array = new int[] {257, 62, -14, -177, 377, -19, -370, -497, 497, -413, -437, 327, -355, -60, -485, 227, 113, 309, -311, 188, -340, -146, -112, 51, 292, -244, 348, -222, 105, -150, 56, -127, -274, -261, -34, -414, 193, -385, -482, -142, 116, 200, -274, 420, -412, 400, -201, 115, -313, 56, 352, -485, -325, 95, 468, 373, -487, 389, 334, -18, -280, 59, -179, -6, -419, 450, -438, 458, 72, 52, 446, -448, 83, 474, -287, -302, -261, 379, 149, -125, -47, -106, -407, 26, -22, -283, -183, 4, -422, -242, -349, 413, 88, 142, -444};
        assertEquals(93, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 1, 94));
        array = new int[] {331, -300, 329, 195, 434, -288, -166, -491, 64, 414, 448, 127, -274, -397, 159, -113, 43, 355, -289, -349, -489, -476, -196, -476, 349, -102, -114, -124, -2, -112, -133, -32, -294, 312, 255, -302, 34, 343, 6, 309, 305, -496, -264, -371, 441, -205, -269, 123, -239, -390, 279, -277, -172, -224, -350, -14, -483, -362, -260, 207, 126, 188, -116, -28, 409, 320, 185, 129, -235, 453, -162, 277, 330, -189, -475, -254, -137, -161, 292, -468, -488, -184, 364, -346, -186, -451, -19, -38, 55, 70, -376, 410, -204, 197, -291, 231};
        assertEquals(75, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 75, 95));
        array = new int[] {169, 171, -43, 495, -233, -490, 473, -131, 236, -222, 232, 86, 20, -219, 422, -189, -48, 59, 136, 105, 48, 163, 350, 445, -203, -441, 128, -276, 177, -495, -108, -448, -58, -480, -167, -228, 375, -430, -52, 40, -145, -205, 332, -288, 348, -148, 92, -50, 152, -217, 404, -415, -420, 423, 180, -163, 416, 484, -185, 233, -357, -261, -368, 160, 124, 461, -69, -321, 283, 230, 130, -370, -297, 493, -118, -302, 213, 12, -238, 190, -199, -219, -88, 1, 301, -100, 392, -189, -229, 148, 49, 233, 496, 209, -250, -96, 455};
        assertEquals(50, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 4, 96));
        array = new int[] {174, -442, -130, 382, 472, 99, 9, -108, 310, 87, -422, 392, -195, -194, -382, 96, 471, -50, 383, -40, -315, 177, -151, 114, 92, 350, 274, 486, 466, -207, 74, 212, 333, 171, -252, -98, -351, 340, -487, 99, 244, 76, 151, 110, -488, 314, 493, 149, -196, -20, 134, 126, -241, -11, 455, 419, -62, -452, 463, -74, -391, -479, 242, -32, 206, -262, 18, -30, -455, 148, -470, 207, -168, 270, -248, -455, 279, 142, -281, -80, 109, 63, 134, 57, -325, -310, -295, -373, 424, 17, -447, 45, -242, 259, 459, -102, -293, 417};
        assertEquals(96, PivotFinder.getMedianPivotDistributed(3).findPivot(array, 78, 97));
        array = new int[] {-321, -99, 287, 457, 91, -386, 375, -407, -323, -81, -1, -13, -44, -460, 482, 196, -329, -100, -340, 466, 309, -389, -113, -418, 438, 61, 51, 160, -431, 161, 290, 329, -49, -184, -454, -166, 364, 49, -21, -481, 174, 331, -184, -289, 285, -346, -206, -366, -53, 478, 16, 215, 93, 325, 115, 241, 439, -197, -178, -242, 199, 341, -429, 164, -249, 383, 216, -376, -123, 415, -176, -196, -56, 472, 149, 116, 281, 311, -36, 198, -175, -466, 97, -108, -271, -253, -287, -241, 427, -60, -377, -39, -488, -247, -98, -186, -229, -123, -139};
        assertEquals(93, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 84, 98));
        array = new int[] {-101, 242, -144, 158, -209, 217, -437, 425, 1, 51, 49, 475, -212, 303, -141, -292, 362, -71, -27, 242, -122, 386, 498, -156, 329, 498, 463, 83, -224, 23, 29, 238, 266, -280, -272, -256, -169, 170, 5, 336, 435, -234, 480, 197, -110, 38, 11, 420, -458, -478, 394, -281, 12, -132, 291, 388, 205, 388, -4, 191, 352, 112, -323, -251, 21, -437, -332, 294, 420, -112, 167, -346, -189, 12, -365, 488, 222, 254, -5, -449, 433, -500, 365, -341, 345, -261, 367, -180, 225, -86, -377, 487, 265, 308, -296, -54, 328, -432, -337, 356};
        assertEquals(94, PivotFinder.getMedianPivotDistributed(5).findPivot(array, 90, 99));
    }

    /**
     Beware: These tests are in some regards *stricter* than the Artemis tests. Good for finding exceptions and general edge cases regardless.

     Provided by the man, the myth, the legend: Ralg
     */
    @Test
    void testAll() {
        System.out.println("Mid Pivot"+System.lineSeparator());
        bigArraysTestHelper(PivotFinder.getMidPivot(), 300, 30);
        printLine();
        System.out.println("Random Pivot: "+System.lineSeparator());
        bigArraysTestHelper(PivotFinder.getRandomPivot(50), 300, 30);
        printLine();
        System.out.println("Median Front(3) Pivot: "+System.lineSeparator());
        bigArraysTestHelper(PivotFinder.getMedianPivotFront(3), 300, 30);
        printLine();
        System.out.println("Median Front(5) Pivot: "+System.lineSeparator());
        bigArraysTestHelper(PivotFinder.getMedianPivotFront(5), 300, 30);
        printLine();
        System.out.println("Median Distributed(3) Pivot: "+System.lineSeparator());
        bigArraysTestHelper(PivotFinder.getMedianPivotDistributed(3), 300, 30);
        printLine();
        System.out.println("Median Distributed(5) Pivot: "+System.lineSeparator());
        bigArraysTestHelper(PivotFinder.getMedianPivotDistributed(5), 300, 30);
        printLine();
    }

    /**
     Beware: This test helper is in some regards *stricter* than the Artemis tests. Good for finding exceptions and general edge cases regardless.
     maxArrayLength 30 is recommended for general testing, 3 for the small array tests.

     Provided by the man, the myth, the legend: Ralg
     */
    static void bigArraysTestHelper(PivotFinder f, int seed, int maxArrayLength) {
        Random ralg = new Random(seed);
        for (int i = 0; i < 10000; i++) {
            final int[] a = IntStream.generate(() -> ralg.nextInt(200) - 100).limit(i % maxArrayLength + 1).toArray();
            int from = ralg.nextInt(a.length);
            int to = ralg.nextInt(a.length);
            if (from == to) continue;
            if (to < from) {
                int temp = to;
                to = from;
                from = temp;
            }
            final int result = f.findPivot(a, from, to);
            assertTrue(result >= from && result <= to,
                    "Bounds check failed for Array: " + Arrays.toString(a)
                            + "\tfrom " + from + " to " + to
                            + ":\tfindPivot returned:" + result);
        }
    }
}
