package tests.simplesort;

import gad.simplesort.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

class MergesortSimpleTester {

    @BeforeEach
    void printLine() {
        System.out.println("-------------------------");
    }

    /**
     * Tests proper merge sort, this should've been implemented already
     * WITH THE optimisation but without the use of selection sort optimisation
     * @author Aamin
     */
    @Test
    public void mergeSortSimple() {
        MergesortSimple mergesortSimple = new MergesortSimple(0);
        int[] array;
        int[] sortedArray;
        FastLoggingResult fastLoggingResult;
        List<String> expectedResult;

        array = new int[] {106, 58, -128, 418, -205, 496, 169, 226, 200, -313, 427};
        sortedArray = new int[]{106, 58, -205, -128, 169, 418, 496, 226, 200, -313, 427};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nMS : [106, 58, -128, 418, -205, 496, 169, 226, 200, -313, 427] in [2, 6]");
            expectedResult.add("\nMS : [106, 58, -128, 418, -205, 496, 169, 226, 200, -313, 427] in [2, 4]");
            expectedResult.add("\nMS : [106, 58, -128, 418, -205, 496, 169, 226, 200, -313, 427] in [2, 3]");
            expectedResult.add("\n\tLPA : [106, 58, -128, 418, -205, 496, 169, 226, 200, -313, 427] in [2, 3]");
            expectedResult.add("\n\tLPA : [106, 58, -205, -128, 418, 496, 169, 226, 200, -313, 427] in [2, 4]");
            expectedResult.add("\nMS : [106, 58, -205, -128, 418, 496, 169, 226, 200, -313, 427] in [5, 6]");
            expectedResult.add("\n\tLPA : [106, 58, -205, -128, 418, 169, 496, 226, 200, -313, 427] in [5, 6]");
            expectedResult.add("\n\tLPA : [106, 58, -205, -128, 169, 418, 496, 226, 200, -313, 427] in [2, 6]");
        }
        mergesortSimple.sort(array, fastLoggingResult, 2, 6);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {384, 203, -22, -406, 411, -411, 98, 43, -446, 57, 245, 131, -26, -258, -264, -168};
        sortedArray = new int[]{384, 203, -22, -406, -446, -411, 43, 98, 411, 57, 245, 131, -26, -258, -264, -168};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nMS : [384, 203, -22, -406, 411, -411, 98, 43, -446, 57, 245, 131, -26, -258, -264, -168] in [4, 8]");
            expectedResult.add("\nMS : [384, 203, -22, -406, 411, -411, 98, 43, -446, 57, 245, 131, -26, -258, -264, -168] in [4, 6]");
            expectedResult.add("\nMS : [384, 203, -22, -406, 411, -411, 98, 43, -446, 57, 245, 131, -26, -258, -264, -168] in [4, 5]");
            expectedResult.add("\n\tLPA : [384, 203, -22, -406, -411, 411, 98, 43, -446, 57, 245, 131, -26, -258, -264, -168] in [4, 5]");
            expectedResult.add("\n\tLPA : [384, 203, -22, -406, -411, 98, 411, 43, -446, 57, 245, 131, -26, -258, -264, -168] in [4, 6]");
            expectedResult.add("\nMS : [384, 203, -22, -406, -411, 98, 411, 43, -446, 57, 245, 131, -26, -258, -264, -168] in [7, 8]");
            expectedResult.add("\n\tLPA : [384, 203, -22, -406, -411, 98, 411, -446, 43, 57, 245, 131, -26, -258, -264, -168] in [7, 8]");
            expectedResult.add("\n\tLPA : [384, 203, -22, -406, -446, -411, 43, 98, 411, 57, 245, 131, -26, -258, -264, -168] in [4, 8]");
        }
        mergesortSimple.sort(array, fastLoggingResult, 4, 8);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {-293, -306, -99, -131, 353, 50, -301, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262};
        sortedArray = new int[]{-293, -306, -301, -131, -99, 6, 50, 97, 353, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nMS : [-293, -306, -99, -131, 353, 50, -301, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [1, 8]");
            expectedResult.add("\nMS : [-293, -306, -99, -131, 353, 50, -301, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [1, 4]");
            expectedResult.add("\nMS : [-293, -306, -99, -131, 353, 50, -301, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [1, 2]");
            expectedResult.add("\n\tLPA : [-293, -306, -99, -131, 353, 50, -301, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [1, 2]");
            expectedResult.add("\nMS : [-293, -306, -99, -131, 353, 50, -301, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [3, 4]");
            expectedResult.add("\n\tLPA : [-293, -306, -99, -131, 353, 50, -301, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [3, 4]");
            expectedResult.add("\n\tLPA : [-293, -306, -131, -99, 353, 50, -301, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [1, 4]");
            expectedResult.add("\nMS : [-293, -306, -131, -99, 353, 50, -301, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [5, 8]");
            expectedResult.add("\nMS : [-293, -306, -131, -99, 353, 50, -301, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [5, 6]");
            expectedResult.add("\n\tLPA : [-293, -306, -131, -99, 353, -301, 50, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [5, 6]");
            expectedResult.add("\nMS : [-293, -306, -131, -99, 353, -301, 50, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [7, 8]");
            expectedResult.add("\n\tLPA : [-293, -306, -131, -99, 353, -301, 50, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [7, 8]");
            expectedResult.add("\n\tLPA : [-293, -306, -131, -99, 353, -301, 6, 50, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [5, 8]");
            expectedResult.add("\n\tLPA : [-293, -306, -301, -131, -99, 6, 50, 97, 353, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [1, 8]");
        }
        mergesortSimple.sort(array, fastLoggingResult, 1, 8);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {4, -498, -135, -250, -240, -40, 395, 74, 285, -362, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264};
        sortedArray = new int[]{4, -498, -135, -250, -240, -40, -362, -237, -38, 63, 74, 285, 291, 395, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nMS : [4, -498, -135, -250, -240, -40, 395, 74, 285, -362, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [6, 13]");
            expectedResult.add("\nMS : [4, -498, -135, -250, -240, -40, 395, 74, 285, -362, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [6, 9]");
            expectedResult.add("\nMS : [4, -498, -135, -250, -240, -40, 395, 74, 285, -362, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [6, 7]");
            expectedResult.add("\n\tLPA : [4, -498, -135, -250, -240, -40, 74, 395, 285, -362, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [6, 7]");
            expectedResult.add("\nMS : [4, -498, -135, -250, -240, -40, 74, 395, 285, -362, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [8, 9]");
            expectedResult.add("\n\tLPA : [4, -498, -135, -250, -240, -40, 74, 395, -362, 285, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [8, 9]");
            expectedResult.add("\n\tLPA : [4, -498, -135, -250, -240, -40, -362, 74, 285, 395, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [6, 9]");
            expectedResult.add("\nMS : [4, -498, -135, -250, -240, -40, -362, 74, 285, 395, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [10, 13]");
            expectedResult.add("\nMS : [4, -498, -135, -250, -240, -40, -362, 74, 285, 395, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [10, 11]");
            expectedResult.add("\n\tLPA : [4, -498, -135, -250, -240, -40, -362, 74, 285, 395, 63, 291, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [10, 11]");
            expectedResult.add("\nMS : [4, -498, -135, -250, -240, -40, -362, 74, 285, 395, 63, 291, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [12, 13]");
            expectedResult.add("\n\tLPA : [4, -498, -135, -250, -240, -40, -362, 74, 285, 395, 63, 291, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [12, 13]");
            expectedResult.add("\n\tLPA : [4, -498, -135, -250, -240, -40, -362, 74, 285, 395, -237, -38, 63, 291, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [10, 13]");
            expectedResult.add("\n\tLPA : [4, -498, -135, -250, -240, -40, -362, -237, -38, 63, 74, 285, 291, 395, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [6, 13]");
        }
        mergesortSimple.sort(array, fastLoggingResult, 6, 13);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {263, -99, -219, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21};
        sortedArray = new int[]{263, -384, -340, -321, -312, -257, -221, -219, -208, -99, -32, 38, 75, 81, 96, 133, 194, 227, 242, 269, 269, 303, 304, 479, 238, -253, 185, 401, -476, -119, 21};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nMS : [263, -99, -219, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [1, 23]");
            expectedResult.add("\nMS : [263, -99, -219, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [1, 12]");
            expectedResult.add("\nMS : [263, -99, -219, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [1, 6]");
            expectedResult.add("\nMS : [263, -99, -219, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [1, 3]");
            expectedResult.add("\nMS : [263, -99, -219, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [1, 2]");
            expectedResult.add("\n\tLPA : [263, -219, -99, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [1, 2]");
            expectedResult.add("\n\tLPA : [263, -219, -99, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [1, 3]");
            expectedResult.add("\nMS : [263, -219, -99, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [4, 6]");
            expectedResult.add("\nMS : [263, -219, -99, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [4, 5]");
            expectedResult.add("\n\tLPA : [263, -219, -99, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [4, 5]");
            expectedResult.add("\n\tLPA : [263, -219, -99, 269, -257, 304, 479, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [4, 6]");
            expectedResult.add("\n\tLPA : [263, -257, -219, -99, 269, 304, 479, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [1, 6]");
            expectedResult.add("\nMS : [263, -257, -219, -99, 269, 304, 479, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [7, 12]");
            expectedResult.add("\nMS : [263, -257, -219, -99, 269, 304, 479, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [7, 9]");
            expectedResult.add("\nMS : [263, -257, -219, -99, 269, 304, 479, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [7, 8]");
            expectedResult.add("\n\tLPA : [263, -257, -219, -99, 269, 304, 479, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [7, 8]");
            expectedResult.add("\n\tLPA : [263, -257, -219, -99, 269, 304, 479, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [7, 9]");
            expectedResult.add("\nMS : [263, -257, -219, -99, 269, 304, 479, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [10, 12]");
            expectedResult.add("\nMS : [263, -257, -219, -99, 269, 304, 479, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [10, 11]");
            expectedResult.add("\n\tLPA : [263, -257, -219, -99, 269, 304, 479, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [10, 11]");
            expectedResult.add("\n\tLPA : [263, -257, -219, -99, 269, 304, 479, -384, 75, 269, -208, 227, 303, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [10, 12]");
            expectedResult.add("\n\tLPA : [263, -257, -219, -99, 269, 304, 479, -384, -208, 75, 227, 269, 303, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [7, 12]");
            expectedResult.add("\n\tLPA : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [1, 12]");
            expectedResult.add("\nMS : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [13, 23]");
            expectedResult.add("\nMS : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [13, 18]");
            expectedResult.add("\nMS : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [13, 15]");
            expectedResult.add("\nMS : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [13, 14]");
            expectedResult.add("\n\tLPA : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [13, 14]");
            expectedResult.add("\n\tLPA : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [13, 15]");
            expectedResult.add("\nMS : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [16, 18]");
            expectedResult.add("\nMS : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [16, 17]");
            expectedResult.add("\n\tLPA : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [16, 17]");
            expectedResult.add("\n\tLPA : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [16, 18]");
            expectedResult.add("\n\tLPA : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -321, -32, 38, 81, 133, 194, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [13, 18]");
            expectedResult.add("\nMS : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -321, -32, 38, 81, 133, 194, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [19, 23]");
            expectedResult.add("\nMS : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -321, -32, 38, 81, 133, 194, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [19, 21]");
            expectedResult.add("\nMS : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -321, -32, 38, 81, 133, 194, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [19, 20]");
            expectedResult.add("\n\tLPA : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -321, -32, 38, 81, 133, 194, -340, -312, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [19, 20]");
            expectedResult.add("\n\tLPA : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -321, -32, 38, 81, 133, 194, -340, -312, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [19, 21]");
            expectedResult.add("\nMS : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -321, -32, 38, 81, 133, 194, -340, -312, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [22, 23]");
            expectedResult.add("\n\tLPA : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -321, -32, 38, 81, 133, 194, -340, -312, -221, 96, 242, 238, -253, 185, 401, -476, -119, 21] in [22, 23]");
            expectedResult.add("\n\tLPA : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -321, -32, 38, 81, 133, 194, -340, -312, -221, 96, 242, 238, -253, 185, 401, -476, -119, 21] in [19, 23]");
            expectedResult.add("\n\tLPA : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -340, -321, -312, -221, -32, 38, 81, 96, 133, 194, 242, 238, -253, 185, 401, -476, -119, 21] in [13, 23]");
            expectedResult.add("\n\tLPA : [263, -384, -340, -321, -312, -257, -221, -219, -208, -99, -32, 38, 75, 81, 96, 133, 194, 227, 242, 269, 269, 303, 304, 479, 238, -253, 185, 401, -476, -119, 21] in [1, 23]");
        }
        mergesortSimple.sort(array, fastLoggingResult, 1, 23);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {251, 198, -96, 98, -213, 409, -33, -310, -422, 380, -381, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345};
        sortedArray = new int[]{251, 198, -96, 98, -213, 409, -33, -422, -381, -310, -215, 180, 196, 380, 480, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nMS : [251, 198, -96, 98, -213, 409, -33, -310, -422, 380, -381, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [7, 14]");
            expectedResult.add("\nMS : [251, 198, -96, 98, -213, 409, -33, -310, -422, 380, -381, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [7, 10]");
            expectedResult.add("\nMS : [251, 198, -96, 98, -213, 409, -33, -310, -422, 380, -381, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [7, 8]");
            expectedResult.add("\n\tLPA : [251, 198, -96, 98, -213, 409, -33, -422, -310, 380, -381, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [7, 8]");
            expectedResult.add("\nMS : [251, 198, -96, 98, -213, 409, -33, -422, -310, 380, -381, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [9, 10]");
            expectedResult.add("\n\tLPA : [251, 198, -96, 98, -213, 409, -33, -422, -310, -381, 380, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [9, 10]");
            expectedResult.add("\n\tLPA : [251, 198, -96, 98, -213, 409, -33, -422, -381, -310, 380, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [7, 10]");
            expectedResult.add("\nMS : [251, 198, -96, 98, -213, 409, -33, -422, -381, -310, 380, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [11, 14]");
            expectedResult.add("\nMS : [251, 198, -96, 98, -213, 409, -33, -422, -381, -310, 380, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [11, 12]");
            expectedResult.add("\n\tLPA : [251, 198, -96, 98, -213, 409, -33, -422, -381, -310, 380, -215, 180, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [11, 12]");
            expectedResult.add("\nMS : [251, 198, -96, 98, -213, 409, -33, -422, -381, -310, 380, -215, 180, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [13, 14]");
            expectedResult.add("\n\tLPA : [251, 198, -96, 98, -213, 409, -33, -422, -381, -310, 380, -215, 180, 196, 480, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [13, 14]");
            expectedResult.add("\n\tLPA : [251, 198, -96, 98, -213, 409, -33, -422, -381, -310, 380, -215, 180, 196, 480, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [11, 14]");
            expectedResult.add("\n\tLPA : [251, 198, -96, 98, -213, 409, -33, -422, -381, -310, -215, 180, 196, 380, 480, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [7, 14]");
        }
        mergesortSimple.sort(array, fastLoggingResult, 7, 14);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {430, 297, -101, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79};
        sortedArray = new int[]{-489, -374, -348, -322, -305, -151, -126, -101, -65, -48, 37, 51, 68, 148, 177, 251, 266, 276, 297, 313, 332, 430, 463, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nMS : [430, 297, -101, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 22]");
            expectedResult.add("\nMS : [430, 297, -101, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 11]");
            expectedResult.add("\nMS : [430, 297, -101, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 5]");
            expectedResult.add("\nMS : [430, 297, -101, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 2]");
            expectedResult.add("\nMS : [430, 297, -101, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 1]");
            expectedResult.add("\n\tLPA : [297, 430, -101, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 1]");
            expectedResult.add("\n\tLPA : [-101, 297, 430, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 2]");
            expectedResult.add("\nMS : [-101, 297, 430, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [3, 5]");
            expectedResult.add("\nMS : [-101, 297, 430, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [3, 4]");
            expectedResult.add("\n\tLPA : [-101, 297, 430, -65, 251, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [3, 4]");
            expectedResult.add("\n\tLPA : [-101, 297, 430, -65, 148, 251, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [3, 5]");
            expectedResult.add("\n\tLPA : [-101, -65, 148, 251, 297, 430, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 5]");
            expectedResult.add("\nMS : [-101, -65, 148, 251, 297, 430, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [6, 11]");
            expectedResult.add("\nMS : [-101, -65, 148, 251, 297, 430, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [6, 8]");
            expectedResult.add("\nMS : [-101, -65, 148, 251, 297, 430, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [6, 7]");
            expectedResult.add("\n\tLPA : [-101, -65, 148, 251, 297, 430, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [6, 7]");
            expectedResult.add("\n\tLPA : [-101, -65, 148, 251, 297, 430, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [6, 8]");
            expectedResult.add("\nMS : [-101, -65, 148, 251, 297, 430, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [9, 11]");
            expectedResult.add("\nMS : [-101, -65, 148, 251, 297, 430, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [9, 10]");
            expectedResult.add("\n\tLPA : [-101, -65, 148, 251, 297, 430, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [9, 10]");
            expectedResult.add("\n\tLPA : [-101, -65, 148, 251, 297, 430, -126, 313, 463, -489, 177, 276, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [9, 11]");
            expectedResult.add("\n\tLPA : [-101, -65, 148, 251, 297, 430, -489, -126, 177, 276, 313, 463, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [6, 11]");
            expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 11]");
            expectedResult.add("\nMS : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [12, 22]");
            expectedResult.add("\nMS : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [12, 17]");
            expectedResult.add("\nMS : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [12, 14]");
            expectedResult.add("\nMS : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [12, 13]");
            expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [12, 13]");
            expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [12, 14]");
            expectedResult.add("\nMS : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [15, 17]");
            expectedResult.add("\nMS : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [15, 16]");
            expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, 37, -151, 68, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [15, 16]");
            expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, 37, -151, 68, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [15, 17]");
            expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, -151, 37, 68, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [12, 17]");
            expectedResult.add("\nMS : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, -151, 37, 68, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [18, 22]");
            expectedResult.add("\nMS : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, -151, 37, 68, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [18, 20]");
            expectedResult.add("\nMS : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, -151, 37, 68, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [18, 19]");
            expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, -151, 37, 68, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [18, 19]");
            expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, -151, 37, 68, 266, -348, -322, 51, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [18, 20]");
            expectedResult.add("\nMS : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, -151, 37, 68, 266, -348, -322, 51, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [21, 22]");
            expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, -151, 37, 68, 266, -348, -322, 51, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [21, 22]");
            expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, -151, 37, 68, 266, -348, -322, -48, 51, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [18, 22]");
            expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -348, -322, -305, -151, -48, 37, 51, 68, 266, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [12, 22]");
            expectedResult.add("\n\tLPA : [-489, -374, -348, -322, -305, -151, -126, -101, -65, -48, 37, 51, 68, 148, 177, 251, 266, 276, 297, 313, 332, 430, 463, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 22]");
        }
        mergesortSimple.sort(array, fastLoggingResult, 0, 22);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());

        array = new int[] {-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432};
        sortedArray = new int[]{-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nMS : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [0, 10]");
            expectedResult.add("\nMS : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [0, 5]");
            expectedResult.add("\nMS : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [0, 2]");
            expectedResult.add("\nMS : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [0, 1]");
            expectedResult.add("\n\tLPA : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [0, 1]");
            expectedResult.add("\n\tLPA : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [0, 2]");
            expectedResult.add("\nMS : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [3, 5]");
            expectedResult.add("\nMS : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [3, 4]");
            expectedResult.add("\n\tLPA : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [3, 4]");
            expectedResult.add("\n\tLPA : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [3, 5]");
            expectedResult.add("\n\tLPA : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [0, 5]");
            expectedResult.add("\nMS : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [6, 10]");
            expectedResult.add("\nMS : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [6, 8]");
            expectedResult.add("\nMS : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [6, 7]");
            expectedResult.add("\n\tLPA : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [6, 7]");
            expectedResult.add("\n\tLPA : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [6, 8]");
            expectedResult.add("\nMS : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [9, 10]");
            expectedResult.add("\n\tLPA : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [9, 10]");
            expectedResult.add("\n\tLPA : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [6, 10]");
            expectedResult.add("\n\tLPA : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [0, 10]");
        }
        mergesortSimple.sort(array, fastLoggingResult, 0, 10);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());

    }

    /**
     * Tests full blown merge sort
     * WITH ALL OPTIMISATIONS incl WITH the use of selection sort optimisation
     * @author
     */
    @Test
    public void mergeSortSimpleOptimised() {
        MergesortSimple mergesortSimple = new MergesortSimple(30);
        int[] array;
        int[] sortedArray;
        FastLoggingResult fastLoggingResult;
        List<String> expectedResult;

        array = new int[] {263, -385, 116, -447, -227, -61, 1, 13, 495, -91, 381, 489, 481, -289, -44, -426, -215, -347, 268, -411, -193, -115, 334, 151, 3, 139, -323, 439, 89, -359, -238, 20, 58, -468, 186, 155, 474, -63, -292, -87, -14, 486, 83, 117, 306, -410, 380, -412, -243, -252, -252, -498, -464, 329, -54, -154, 392, -88, -204, -193, -377, -146, -455, 402, -317, 199, -366, -116, 267, 483, 270, 116, 287, -48, -296, -53, 59, 41, -481, 43, 431, -420, -358, -422, -466, 74, -115, 488, -351, 31, -307, 283, 448, 193, -28, 340, -188, 341, 242, -134, -12};
        sortedArray = new int[]{263, -385, 116, -447, -227, -61, 1, 13, 495, -91, 381, 489, 481, -498, -468, -464, -426, -412, -411, -410, -377, -359, -347, -323, -292, -289, -252, -252, -243, -238, -215, -204, -193, -193, -154, -115, -88, -87, -63, -54, -44, -14, 3, 20, 58, 83, 89, 117, 139, 151, 155, 186, 268, 306, 329, 334, 380, 392, 439, 474, 486, -146, -455, 402, -317, 199, -366, -116, 267, 483, 270, 116, 287, -48, -296, -53, 59, 41, -481, 43, 431, -420, -358, -422, -466, 74, -115, 488, -351, 31, -307, 283, 448, 193, -28, 340, -188, 341, 242, -134, -12};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nMS : [263, -385, 116, -447, -227, -61, 1, 13, 495, -91, 381, 489, 481, -289, -44, -426, -215, -347, 268, -411, -193, -115, 334, 151, 3, 139, -323, 439, 89, -359, -238, 20, 58, -468, 186, 155, 474, -63, -292, -87, -14, 486, 83, 117, 306, -410, 380, -412, -243, -252, -252, -498, -464, 329, -54, -154, 392, -88, -204, -193, -377, -146, -455, 402, -317, 199, -366, -116, 267, 483, 270, 116, 287, -48, -296, -53, 59, 41, -481, 43, 431, -420, -358, -422, -466, 74, -115, 488, -351, 31, -307, 283, 448, 193, -28, 340, -188, 341, 242, -134, -12] in [13, 60]");
            expectedResult.add("\nMS : [263, -385, 116, -447, -227, -61, 1, 13, 495, -91, 381, 489, 481, -289, -44, -426, -215, -347, 268, -411, -193, -115, 334, 151, 3, 139, -323, 439, 89, -359, -238, 20, 58, -468, 186, 155, 474, -63, -292, -87, -14, 486, 83, 117, 306, -410, 380, -412, -243, -252, -252, -498, -464, 329, -54, -154, 392, -88, -204, -193, -377, -146, -455, 402, -317, 199, -366, -116, 267, 483, 270, 116, 287, -48, -296, -53, 59, 41, -481, 43, 431, -420, -358, -422, -466, 74, -115, 488, -351, 31, -307, 283, 448, 193, -28, 340, -188, 341, 242, -134, -12] in [13, 36]");
            expectedResult.add("\nSS : [263, -385, 116, -447, -227, -61, 1, 13, 495, -91, 381, 489, 481, -289, -44, -426, -215, -347, 268, -411, -193, -115, 334, 151, 3, 139, -323, 439, 89, -359, -238, 20, 58, -468, 186, 155, 474, -63, -292, -87, -14, 486, 83, 117, 306, -410, 380, -412, -243, -252, -252, -498, -464, 329, -54, -154, 392, -88, -204, -193, -377, -146, -455, 402, -317, 199, -366, -116, 267, 483, 270, 116, 287, -48, -296, -53, 59, 41, -481, 43, 431, -420, -358, -422, -466, 74, -115, 488, -351, 31, -307, 283, 448, 193, -28, 340, -188, 341, 242, -134, -12] in [13, 36]");
            expectedResult.add("\nMS : [263, -385, 116, -447, -227, -61, 1, 13, 495, -91, 381, 489, 481, -468, -426, -411, -359, -347, -323, -289, -238, -215, -193, -115, -44, 3, 20, 58, 89, 139, 151, 155, 186, 268, 334, 439, 474, -63, -292, -87, -14, 486, 83, 117, 306, -410, 380, -412, -243, -252, -252, -498, -464, 329, -54, -154, 392, -88, -204, -193, -377, -146, -455, 402, -317, 199, -366, -116, 267, 483, 270, 116, 287, -48, -296, -53, 59, 41, -481, 43, 431, -420, -358, -422, -466, 74, -115, 488, -351, 31, -307, 283, 448, 193, -28, 340, -188, 341, 242, -134, -12] in [37, 60]");
            expectedResult.add("\nSS : [263, -385, 116, -447, -227, -61, 1, 13, 495, -91, 381, 489, 481, -468, -426, -411, -359, -347, -323, -289, -238, -215, -193, -115, -44, 3, 20, 58, 89, 139, 151, 155, 186, 268, 334, 439, 474, -63, -292, -87, -14, 486, 83, 117, 306, -410, 380, -412, -243, -252, -252, -498, -464, 329, -54, -154, 392, -88, -204, -193, -377, -146, -455, 402, -317, 199, -366, -116, 267, 483, 270, 116, 287, -48, -296, -53, 59, 41, -481, 43, 431, -420, -358, -422, -466, 74, -115, 488, -351, 31, -307, 283, 448, 193, -28, 340, -188, 341, 242, -134, -12] in [37, 60]");
            expectedResult.add("\n\tLPA : [263, -385, 116, -447, -227, -61, 1, 13, 495, -91, 381, 489, 481, -498, -468, -464, -426, -412, -411, -410, -377, -359, -347, -323, -292, -289, -252, -252, -243, -238, -215, -204, -193, -193, -154, -115, -88, -87, -63, -54, -44, -14, 3, 20, 58, 83, 89, 117, 139, 151, 155, 186, 268, 306, 329, 334, 380, 392, 439, 474, 486, -146, -455, 402, -317, 199, -366, -116, 267, 483, 270, 116, 287, -48, -296, -53, 59, 41, -481, 43, 431, -420, -358, -422, -466, 74, -115, 488, -351, 31, -307, 283, 448, 193, -28, 340, -188, 341, 242, -134, -12] in [13, 60]");
        }
        mergesortSimple.sort(array, fastLoggingResult, 13, 60);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {-467, 282, -171, 138, -467, -480, 189, 272, -7, -76, -311, -351, -453, 414, 12, 141, 400, -6, 124, -420, -339, 271, 54, -32, 382, -61, 394, 173, -56, -312, 489, -479, 262, 366, -94, 139, 217, -314, 101, -140, 407, 137, 71, 428, 438, 179, -324, 211, -325, 479, 10, 470, 379, 40, -119, -215, -350, -478, 321, -129, 42, 179, 309, -21, 299, -311, 107, 465, 217, 160, 125, -417, -364, -488, -215, 97, 368, 201, -300, -282, -300, 421, -90, -347, -424, -112, -441, 67, 87, 174, -416, 68, 180, 129, -388, -366, 33, 53, 196, -433, -101, 27, 217, 412, -471, 390};
        sortedArray = new int[]{-467, 282, -171, 138, -467, -480, 189, 272, -7, -76, -311, -351, -453, 414, 12, 141, 400, -6, 124, -420, -339, 271, 54, -32, 382, -61, 394, 173, -488, -479, -478, -417, -364, -350, -325, -324, -314, -312, -311, -300, -282, -215, -215, -140, -129, -119, -94, -56, -21, 10, 40, 42, 71, 97, 101, 107, 125, 137, 139, 160, 179, 179, 201, 211, 217, 217, 262, 299, 309, 321, 366, 368, 379, 407, 428, 438, 465, 470, 479, 489, -300, 421, -90, -347, -424, -112, -441, 67, 87, 174, -416, 68, 180, 129, -388, -366, 33, 53, 196, -433, -101, 27, 217, 412, -471, 390};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nMS : [-467, 282, -171, 138, -467, -480, 189, 272, -7, -76, -311, -351, -453, 414, 12, 141, 400, -6, 124, -420, -339, 271, 54, -32, 382, -61, 394, 173, -56, -312, 489, -479, 262, 366, -94, 139, 217, -314, 101, -140, 407, 137, 71, 428, 438, 179, -324, 211, -325, 479, 10, 470, 379, 40, -119, -215, -350, -478, 321, -129, 42, 179, 309, -21, 299, -311, 107, 465, 217, 160, 125, -417, -364, -488, -215, 97, 368, 201, -300, -282, -300, 421, -90, -347, -424, -112, -441, 67, 87, 174, -416, 68, 180, 129, -388, -366, 33, 53, 196, -433, -101, 27, 217, 412, -471, 390] in [28, 79]");
            expectedResult.add("\nMS : [-467, 282, -171, 138, -467, -480, 189, 272, -7, -76, -311, -351, -453, 414, 12, 141, 400, -6, 124, -420, -339, 271, 54, -32, 382, -61, 394, 173, -56, -312, 489, -479, 262, 366, -94, 139, 217, -314, 101, -140, 407, 137, 71, 428, 438, 179, -324, 211, -325, 479, 10, 470, 379, 40, -119, -215, -350, -478, 321, -129, 42, 179, 309, -21, 299, -311, 107, 465, 217, 160, 125, -417, -364, -488, -215, 97, 368, 201, -300, -282, -300, 421, -90, -347, -424, -112, -441, 67, 87, 174, -416, 68, 180, 129, -388, -366, 33, 53, 196, -433, -101, 27, 217, 412, -471, 390] in [28, 53]");
            expectedResult.add("\nSS : [-467, 282, -171, 138, -467, -480, 189, 272, -7, -76, -311, -351, -453, 414, 12, 141, 400, -6, 124, -420, -339, 271, 54, -32, 382, -61, 394, 173, -56, -312, 489, -479, 262, 366, -94, 139, 217, -314, 101, -140, 407, 137, 71, 428, 438, 179, -324, 211, -325, 479, 10, 470, 379, 40, -119, -215, -350, -478, 321, -129, 42, 179, 309, -21, 299, -311, 107, 465, 217, 160, 125, -417, -364, -488, -215, 97, 368, 201, -300, -282, -300, 421, -90, -347, -424, -112, -441, 67, 87, 174, -416, 68, 180, 129, -388, -366, 33, 53, 196, -433, -101, 27, 217, 412, -471, 390] in [28, 53]");
            expectedResult.add("\nMS : [-467, 282, -171, 138, -467, -480, 189, 272, -7, -76, -311, -351, -453, 414, 12, 141, 400, -6, 124, -420, -339, 271, 54, -32, 382, -61, 394, 173, -479, -325, -324, -314, -312, -140, -94, -56, 10, 40, 71, 101, 137, 139, 179, 211, 217, 262, 366, 379, 407, 428, 438, 470, 479, 489, -119, -215, -350, -478, 321, -129, 42, 179, 309, -21, 299, -311, 107, 465, 217, 160, 125, -417, -364, -488, -215, 97, 368, 201, -300, -282, -300, 421, -90, -347, -424, -112, -441, 67, 87, 174, -416, 68, 180, 129, -388, -366, 33, 53, 196, -433, -101, 27, 217, 412, -471, 390] in [54, 79]");
            expectedResult.add("\nSS : [-467, 282, -171, 138, -467, -480, 189, 272, -7, -76, -311, -351, -453, 414, 12, 141, 400, -6, 124, -420, -339, 271, 54, -32, 382, -61, 394, 173, -479, -325, -324, -314, -312, -140, -94, -56, 10, 40, 71, 101, 137, 139, 179, 211, 217, 262, 366, 379, 407, 428, 438, 470, 479, 489, -119, -215, -350, -478, 321, -129, 42, 179, 309, -21, 299, -311, 107, 465, 217, 160, 125, -417, -364, -488, -215, 97, 368, 201, -300, -282, -300, 421, -90, -347, -424, -112, -441, 67, 87, 174, -416, 68, 180, 129, -388, -366, 33, 53, 196, -433, -101, 27, 217, 412, -471, 390] in [54, 79]");
            expectedResult.add("\n\tLPA : [-467, 282, -171, 138, -467, -480, 189, 272, -7, -76, -311, -351, -453, 414, 12, 141, 400, -6, 124, -420, -339, 271, 54, -32, 382, -61, 394, 173, -488, -479, -478, -417, -364, -350, -325, -324, -314, -312, -311, -300, -282, -215, -215, -140, -129, -119, -94, -56, -21, 10, 40, 42, 71, 97, 101, 107, 125, 137, 139, 160, 179, 179, 201, 211, 217, 217, 262, 299, 309, 321, 366, 368, 379, 407, 428, 438, 465, 470, 479, 489, -300, 421, -90, -347, -424, -112, -441, 67, 87, 174, -416, 68, 180, 129, -388, -366, 33, 53, 196, -433, -101, 27, 217, 412, -471, 390] in [28, 79]");
        }
        mergesortSimple.sort(array, fastLoggingResult, 28, 79);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {-357, -339, 35, 320, -32, -243, -291, -49, -337, -197, -405, -159, -209, 459, -31, -416, 434, -225, 274, 68, 188, -168, 168, -398, -271, 322, 198, 312, -75, 479, -195, -9, 37, 275, -302, -483, -406, 390, -384, -2, 22, 51, -446, -201, -129, 189, -479, -297, -392, -295, 371, 163, 487, -220, 477, -4, -295, -495, 111, 166, 201, -153, -307, 184, -448, -347, -121, 451, 247, -77, -106, 488, 128, 167, 94, 211, 338, 112, -317, -234, -206, 314, -500, -53, -234, -434, -243, -134, 230, -115, 216, -397, -380, 162, 123, -223, -6, 489, 341, 300, -230, 88, 449, 337, 232, -152, 77, -121, -364, -329, 189};
        sortedArray = new int[]{-357, -339, 35, 320, -32, -243, -291, -49, -337, -197, -405, -159, -209, 459, -31, -416, 434, -225, 274, 68, 188, -168, 168, -398, -271, 198, 322, 312, -75, 479, -195, -9, 37, 275, -302, -483, -406, 390, -384, -2, 22, 51, -446, -201, -129, 189, -479, -297, -392, -295, 371, 163, 487, -220, 477, -4, -295, -495, 111, 166, 201, -153, -307, 184, -448, -347, -121, 451, 247, -77, -106, 488, 128, 167, 94, 211, 338, 112, -317, -234, -206, 314, -500, -53, -234, -434, -243, -134, 230, -115, 216, -397, -380, 162, 123, -223, -6, 489, 341, 300, -230, 88, 449, 337, 232, -152, 77, -121, -364, -329, 189};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nMS : [-357, -339, 35, 320, -32, -243, -291, -49, -337, -197, -405, -159, -209, 459, -31, -416, 434, -225, 274, 68, 188, -168, 168, -398, -271, 322, 198, 312, -75, 479, -195, -9, 37, 275, -302, -483, -406, 390, -384, -2, 22, 51, -446, -201, -129, 189, -479, -297, -392, -295, 371, 163, 487, -220, 477, -4, -295, -495, 111, 166, 201, -153, -307, 184, -448, -347, -121, 451, 247, -77, -106, 488, 128, 167, 94, 211, 338, 112, -317, -234, -206, 314, -500, -53, -234, -434, -243, -134, 230, -115, 216, -397, -380, 162, 123, -223, -6, 489, 341, 300, -230, 88, 449, 337, 232, -152, 77, -121, -364, -329, 189] in [24, 26]");
            expectedResult.add("\nSS : [-357, -339, 35, 320, -32, -243, -291, -49, -337, -197, -405, -159, -209, 459, -31, -416, 434, -225, 274, 68, 188, -168, 168, -398, -271, 322, 198, 312, -75, 479, -195, -9, 37, 275, -302, -483, -406, 390, -384, -2, 22, 51, -446, -201, -129, 189, -479, -297, -392, -295, 371, 163, 487, -220, 477, -4, -295, -495, 111, 166, 201, -153, -307, 184, -448, -347, -121, 451, 247, -77, -106, 488, 128, 167, 94, 211, 338, 112, -317, -234, -206, 314, -500, -53, -234, -434, -243, -134, 230, -115, 216, -397, -380, 162, 123, -223, -6, 489, 341, 300, -230, 88, 449, 337, 232, -152, 77, -121, -364, -329, 189] in [24, 26]");
        }
        mergesortSimple.sort(array, fastLoggingResult, 24, 26);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {110, 152, 58, -361, -446, -427, -191, 460, -479, 382, -277, 312, -85, -39, 480, 454, -333, -184, -500, -64, -16, 71, -269, 476, -444, -302, -321, -150, -304, -375, 57, -246, 450, -196, 114, 11, 132, 368, -220, 398, -286, -300, 370, -359, -104, -163, -224, 63, -42, 300, 153, -51, 129, 426, -469, 15, -106, 98, -207, 24, 398, 228, -235, -39, -359, 58, -281, 216, 280, 435, 407, -302, -309, 22, 307, -188, -229, 273, 77, 203, 294, -498, 301, -460, 301, -66, -42, -123, -21, 112, -193, 217, -124, -238, 128, 435, -449, 208, 23, 50, 402, 203, 38, 379, -63, -152, -61, 253, -390, -343, 356, 85, -80, -439, -244, 57};
        sortedArray = new int[]{110, 152, 58, -361, -446, -427, -191, 460, -479, 382, -277, 312, -85, -39, 480, 454, -333, -184, -500, -64, -16, -469, -444, -375, -359, -359, -321, -304, -302, -300, -286, -281, -269, -246, -235, -224, -220, -207, -196, -163, -150, -106, -104, -51, -42, -39, 11, 15, 24, 57, 58, 63, 71, 98, 114, 129, 132, 153, 216, 228, 280, 300, 368, 370, 398, 398, 426, 450, 476, 435, 407, -302, -309, 22, 307, -188, -229, 273, 77, 203, 294, -498, 301, -460, 301, -66, -42, -123, -21, 112, -193, 217, -124, -238, 128, 435, -449, 208, 23, 50, 402, 203, 38, 379, -63, -152, -61, 253, -390, -343, 356, 85, -80, -439, -244, 57};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nMS : [110, 152, 58, -361, -446, -427, -191, 460, -479, 382, -277, 312, -85, -39, 480, 454, -333, -184, -500, -64, -16, 71, -269, 476, -444, -302, -321, -150, -304, -375, 57, -246, 450, -196, 114, 11, 132, 368, -220, 398, -286, -300, 370, -359, -104, -163, -224, 63, -42, 300, 153, -51, 129, 426, -469, 15, -106, 98, -207, 24, 398, 228, -235, -39, -359, 58, -281, 216, 280, 435, 407, -302, -309, 22, 307, -188, -229, 273, 77, 203, 294, -498, 301, -460, 301, -66, -42, -123, -21, 112, -193, 217, -124, -238, 128, 435, -449, 208, 23, 50, 402, 203, 38, 379, -63, -152, -61, 253, -390, -343, 356, 85, -80, -439, -244, 57] in [21, 68]");
            expectedResult.add("\nMS : [110, 152, 58, -361, -446, -427, -191, 460, -479, 382, -277, 312, -85, -39, 480, 454, -333, -184, -500, -64, -16, 71, -269, 476, -444, -302, -321, -150, -304, -375, 57, -246, 450, -196, 114, 11, 132, 368, -220, 398, -286, -300, 370, -359, -104, -163, -224, 63, -42, 300, 153, -51, 129, 426, -469, 15, -106, 98, -207, 24, 398, 228, -235, -39, -359, 58, -281, 216, 280, 435, 407, -302, -309, 22, 307, -188, -229, 273, 77, 203, 294, -498, 301, -460, 301, -66, -42, -123, -21, 112, -193, 217, -124, -238, 128, 435, -449, 208, 23, 50, 402, 203, 38, 379, -63, -152, -61, 253, -390, -343, 356, 85, -80, -439, -244, 57] in [21, 44]");
            expectedResult.add("\nSS : [110, 152, 58, -361, -446, -427, -191, 460, -479, 382, -277, 312, -85, -39, 480, 454, -333, -184, -500, -64, -16, 71, -269, 476, -444, -302, -321, -150, -304, -375, 57, -246, 450, -196, 114, 11, 132, 368, -220, 398, -286, -300, 370, -359, -104, -163, -224, 63, -42, 300, 153, -51, 129, 426, -469, 15, -106, 98, -207, 24, 398, 228, -235, -39, -359, 58, -281, 216, 280, 435, 407, -302, -309, 22, 307, -188, -229, 273, 77, 203, 294, -498, 301, -460, 301, -66, -42, -123, -21, 112, -193, 217, -124, -238, 128, 435, -449, 208, 23, 50, 402, 203, 38, 379, -63, -152, -61, 253, -390, -343, 356, 85, -80, -439, -244, 57] in [21, 44]");
            expectedResult.add("\nMS : [110, 152, 58, -361, -446, -427, -191, 460, -479, 382, -277, 312, -85, -39, 480, 454, -333, -184, -500, -64, -16, -444, -375, -359, -321, -304, -302, -300, -286, -269, -246, -220, -196, -150, -104, 11, 57, 71, 114, 132, 368, 370, 398, 450, 476, -163, -224, 63, -42, 300, 153, -51, 129, 426, -469, 15, -106, 98, -207, 24, 398, 228, -235, -39, -359, 58, -281, 216, 280, 435, 407, -302, -309, 22, 307, -188, -229, 273, 77, 203, 294, -498, 301, -460, 301, -66, -42, -123, -21, 112, -193, 217, -124, -238, 128, 435, -449, 208, 23, 50, 402, 203, 38, 379, -63, -152, -61, 253, -390, -343, 356, 85, -80, -439, -244, 57] in [45, 68]");
            expectedResult.add("\nSS : [110, 152, 58, -361, -446, -427, -191, 460, -479, 382, -277, 312, -85, -39, 480, 454, -333, -184, -500, -64, -16, -444, -375, -359, -321, -304, -302, -300, -286, -269, -246, -220, -196, -150, -104, 11, 57, 71, 114, 132, 368, 370, 398, 450, 476, -163, -224, 63, -42, 300, 153, -51, 129, 426, -469, 15, -106, 98, -207, 24, 398, 228, -235, -39, -359, 58, -281, 216, 280, 435, 407, -302, -309, 22, 307, -188, -229, 273, 77, 203, 294, -498, 301, -460, 301, -66, -42, -123, -21, 112, -193, 217, -124, -238, 128, 435, -449, 208, 23, 50, 402, 203, 38, 379, -63, -152, -61, 253, -390, -343, 356, 85, -80, -439, -244, 57] in [45, 68]");
            expectedResult.add("\n\tLPA : [110, 152, 58, -361, -446, -427, -191, 460, -479, 382, -277, 312, -85, -39, 480, 454, -333, -184, -500, -64, -16, -469, -444, -375, -359, -359, -321, -304, -302, -300, -286, -281, -269, -246, -235, -224, -220, -207, -196, -163, -150, -106, -104, -51, -42, -39, 11, 15, 24, 57, 58, 63, 71, 98, 114, 129, 132, 153, 216, 228, 280, 300, 368, 370, 398, 398, 426, 450, 476, 435, 407, -302, -309, 22, 307, -188, -229, 273, 77, 203, 294, -498, 301, -460, 301, -66, -42, -123, -21, 112, -193, 217, -124, -238, 128, 435, -449, 208, 23, 50, 402, 203, 38, 379, -63, -152, -61, 253, -390, -343, 356, 85, -80, -439, -244, 57] in [21, 68]");
        }
        mergesortSimple.sort(array, fastLoggingResult, 21, 68);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {151, 369, 78, -24, 37, -30, 471, -321, -385, -491, 49, 442, -396, 140, -194, -38, -131, -451, -58, -105, -307, -457, -121, -485, 487, -208, -233, -38, -21, 89, -255, 37, 33, -263, -244, 342, -207, -90, 212, -394, -164, 443, -462, -126, -78, -493, -89, 492, -487, -420, 265, 70, 22, -66, -265, 257, 260, -6, 175, -213, -34, 192, -431, -241, -134, -392, -360, 191, 21, 418, 165, -420, -459, 18, 439, 230, 38, 43, 475, -337, 237, -252, -421, 369, 402, 135, -281, -352, 390, 406, 373, -422, -47, 449, 365, 179, -82, 338, 230, -2, -43, 266, -353, 85, -419, -44, 355, -63, 300, 422, -68, 333, 52, -23, -14, 181, 77, -146, 457, -364, 369};
        sortedArray = new int[]{151, 369, 78, -24, -493, -491, -487, -485, -462, -459, -457, -451, -431, -422, -421, -420, -420, -419, -396, -394, -392, -385, -360, -353, -352, -337, -321, -307, -281, -265, -263, -255, -252, -244, -241, -233, -213, -208, -207, -194, -164, -134, -131, -126, -121, -105, -90, -89, -82, -78, -66, -63, -58, -47, -44, -43, -38, -38, -34, -30, -21, -6, -2, 18, 21, 22, 33, 37, 37, 38, 43, 49, 70, 85, 89, 135, 140, 165, 175, 179, 191, 192, 212, 230, 230, 237, 257, 260, 265, 266, 300, 338, 342, 355, 365, 369, 373, 390, 402, 406, 418, 439, 442, 443, 449, 471, 475, 487, 492, 422, -68, 333, 52, -23, -14, 181, 77, -146, 457, -364, 369};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nMS : [151, 369, 78, -24, 37, -30, 471, -321, -385, -491, 49, 442, -396, 140, -194, -38, -131, -451, -58, -105, -307, -457, -121, -485, 487, -208, -233, -38, -21, 89, -255, 37, 33, -263, -244, 342, -207, -90, 212, -394, -164, 443, -462, -126, -78, -493, -89, 492, -487, -420, 265, 70, 22, -66, -265, 257, 260, -6, 175, -213, -34, 192, -431, -241, -134, -392, -360, 191, 21, 418, 165, -420, -459, 18, 439, 230, 38, 43, 475, -337, 237, -252, -421, 369, 402, 135, -281, -352, 390, 406, 373, -422, -47, 449, 365, 179, -82, 338, 230, -2, -43, 266, -353, 85, -419, -44, 355, -63, 300, 422, -68, 333, 52, -23, -14, 181, 77, -146, 457, -364, 369] in [4, 108]");
            expectedResult.add("\nMS : [151, 369, 78, -24, 37, -30, 471, -321, -385, -491, 49, 442, -396, 140, -194, -38, -131, -451, -58, -105, -307, -457, -121, -485, 487, -208, -233, -38, -21, 89, -255, 37, 33, -263, -244, 342, -207, -90, 212, -394, -164, 443, -462, -126, -78, -493, -89, 492, -487, -420, 265, 70, 22, -66, -265, 257, 260, -6, 175, -213, -34, 192, -431, -241, -134, -392, -360, 191, 21, 418, 165, -420, -459, 18, 439, 230, 38, 43, 475, -337, 237, -252, -421, 369, 402, 135, -281, -352, 390, 406, 373, -422, -47, 449, 365, 179, -82, 338, 230, -2, -43, 266, -353, 85, -419, -44, 355, -63, 300, 422, -68, 333, 52, -23, -14, 181, 77, -146, 457, -364, 369] in [4, 56]");
            expectedResult.add("\nMS : [151, 369, 78, -24, 37, -30, 471, -321, -385, -491, 49, 442, -396, 140, -194, -38, -131, -451, -58, -105, -307, -457, -121, -485, 487, -208, -233, -38, -21, 89, -255, 37, 33, -263, -244, 342, -207, -90, 212, -394, -164, 443, -462, -126, -78, -493, -89, 492, -487, -420, 265, 70, 22, -66, -265, 257, 260, -6, 175, -213, -34, 192, -431, -241, -134, -392, -360, 191, 21, 418, 165, -420, -459, 18, 439, 230, 38, 43, 475, -337, 237, -252, -421, 369, 402, 135, -281, -352, 390, 406, 373, -422, -47, 449, 365, 179, -82, 338, 230, -2, -43, 266, -353, 85, -419, -44, 355, -63, 300, 422, -68, 333, 52, -23, -14, 181, 77, -146, 457, -364, 369] in [4, 30]");
            expectedResult.add("\nSS : [151, 369, 78, -24, 37, -30, 471, -321, -385, -491, 49, 442, -396, 140, -194, -38, -131, -451, -58, -105, -307, -457, -121, -485, 487, -208, -233, -38, -21, 89, -255, 37, 33, -263, -244, 342, -207, -90, 212, -394, -164, 443, -462, -126, -78, -493, -89, 492, -487, -420, 265, 70, 22, -66, -265, 257, 260, -6, 175, -213, -34, 192, -431, -241, -134, -392, -360, 191, 21, 418, 165, -420, -459, 18, 439, 230, 38, 43, 475, -337, 237, -252, -421, 369, 402, 135, -281, -352, 390, 406, 373, -422, -47, 449, 365, 179, -82, 338, 230, -2, -43, 266, -353, 85, -419, -44, 355, -63, 300, 422, -68, 333, 52, -23, -14, 181, 77, -146, 457, -364, 369] in [4, 30]");
            expectedResult.add("\nMS : [151, 369, 78, -24, -491, -485, -457, -451, -396, -385, -321, -307, -255, -233, -208, -194, -131, -121, -105, -58, -38, -38, -30, -21, 37, 49, 89, 140, 442, 471, 487, 37, 33, -263, -244, 342, -207, -90, 212, -394, -164, 443, -462, -126, -78, -493, -89, 492, -487, -420, 265, 70, 22, -66, -265, 257, 260, -6, 175, -213, -34, 192, -431, -241, -134, -392, -360, 191, 21, 418, 165, -420, -459, 18, 439, 230, 38, 43, 475, -337, 237, -252, -421, 369, 402, 135, -281, -352, 390, 406, 373, -422, -47, 449, 365, 179, -82, 338, 230, -2, -43, 266, -353, 85, -419, -44, 355, -63, 300, 422, -68, 333, 52, -23, -14, 181, 77, -146, 457, -364, 369] in [31, 56]");
            expectedResult.add("\nSS : [151, 369, 78, -24, -491, -485, -457, -451, -396, -385, -321, -307, -255, -233, -208, -194, -131, -121, -105, -58, -38, -38, -30, -21, 37, 49, 89, 140, 442, 471, 487, 37, 33, -263, -244, 342, -207, -90, 212, -394, -164, 443, -462, -126, -78, -493, -89, 492, -487, -420, 265, 70, 22, -66, -265, 257, 260, -6, 175, -213, -34, 192, -431, -241, -134, -392, -360, 191, 21, 418, 165, -420, -459, 18, 439, 230, 38, 43, 475, -337, 237, -252, -421, 369, 402, 135, -281, -352, 390, 406, 373, -422, -47, 449, 365, 179, -82, 338, 230, -2, -43, 266, -353, 85, -419, -44, 355, -63, 300, 422, -68, 333, 52, -23, -14, 181, 77, -146, 457, -364, 369] in [31, 56]");
            expectedResult.add("\n\tLPA : [151, 369, 78, -24, -493, -491, -487, -485, -462, -457, -451, -420, -396, -394, -385, -321, -307, -265, -263, -255, -244, -233, -208, -207, -194, -164, -131, -126, -121, -105, -90, -89, -78, -66, -58, -38, -38, -30, -21, 22, 33, 37, 37, 49, 70, 89, 140, 212, 257, 260, 265, 342, 442, 443, 471, 487, 492, -6, 175, -213, -34, 192, -431, -241, -134, -392, -360, 191, 21, 418, 165, -420, -459, 18, 439, 230, 38, 43, 475, -337, 237, -252, -421, 369, 402, 135, -281, -352, 390, 406, 373, -422, -47, 449, 365, 179, -82, 338, 230, -2, -43, 266, -353, 85, -419, -44, 355, -63, 300, 422, -68, 333, 52, -23, -14, 181, 77, -146, 457, -364, 369] in [4, 56]");
            expectedResult.add("\nMS : [151, 369, 78, -24, -493, -491, -487, -485, -462, -457, -451, -420, -396, -394, -385, -321, -307, -265, -263, -255, -244, -233, -208, -207, -194, -164, -131, -126, -121, -105, -90, -89, -78, -66, -58, -38, -38, -30, -21, 22, 33, 37, 37, 49, 70, 89, 140, 212, 257, 260, 265, 342, 442, 443, 471, 487, 492, -6, 175, -213, -34, 192, -431, -241, -134, -392, -360, 191, 21, 418, 165, -420, -459, 18, 439, 230, 38, 43, 475, -337, 237, -252, -421, 369, 402, 135, -281, -352, 390, 406, 373, -422, -47, 449, 365, 179, -82, 338, 230, -2, -43, 266, -353, 85, -419, -44, 355, -63, 300, 422, -68, 333, 52, -23, -14, 181, 77, -146, 457, -364, 369] in [57, 108]");
            expectedResult.add("\nMS : [151, 369, 78, -24, -493, -491, -487, -485, -462, -457, -451, -420, -396, -394, -385, -321, -307, -265, -263, -255, -244, -233, -208, -207, -194, -164, -131, -126, -121, -105, -90, -89, -78, -66, -58, -38, -38, -30, -21, 22, 33, 37, 37, 49, 70, 89, 140, 212, 257, 260, 265, 342, 442, 443, 471, 487, 492, -6, 175, -213, -34, 192, -431, -241, -134, -392, -360, 191, 21, 418, 165, -420, -459, 18, 439, 230, 38, 43, 475, -337, 237, -252, -421, 369, 402, 135, -281, -352, 390, 406, 373, -422, -47, 449, 365, 179, -82, 338, 230, -2, -43, 266, -353, 85, -419, -44, 355, -63, 300, 422, -68, 333, 52, -23, -14, 181, 77, -146, 457, -364, 369] in [57, 82]");
            expectedResult.add("\nSS : [151, 369, 78, -24, -493, -491, -487, -485, -462, -457, -451, -420, -396, -394, -385, -321, -307, -265, -263, -255, -244, -233, -208, -207, -194, -164, -131, -126, -121, -105, -90, -89, -78, -66, -58, -38, -38, -30, -21, 22, 33, 37, 37, 49, 70, 89, 140, 212, 257, 260, 265, 342, 442, 443, 471, 487, 492, -6, 175, -213, -34, 192, -431, -241, -134, -392, -360, 191, 21, 418, 165, -420, -459, 18, 439, 230, 38, 43, 475, -337, 237, -252, -421, 369, 402, 135, -281, -352, 390, 406, 373, -422, -47, 449, 365, 179, -82, 338, 230, -2, -43, 266, -353, 85, -419, -44, 355, -63, 300, 422, -68, 333, 52, -23, -14, 181, 77, -146, 457, -364, 369] in [57, 82]");
            expectedResult.add("\nMS : [151, 369, 78, -24, -493, -491, -487, -485, -462, -457, -451, -420, -396, -394, -385, -321, -307, -265, -263, -255, -244, -233, -208, -207, -194, -164, -131, -126, -121, -105, -90, -89, -78, -66, -58, -38, -38, -30, -21, 22, 33, 37, 37, 49, 70, 89, 140, 212, 257, 260, 265, 342, 442, 443, 471, 487, 492, -459, -431, -421, -420, -392, -360, -337, -252, -241, -213, -134, -34, -6, 18, 21, 38, 43, 165, 175, 191, 192, 230, 237, 418, 439, 475, 369, 402, 135, -281, -352, 390, 406, 373, -422, -47, 449, 365, 179, -82, 338, 230, -2, -43, 266, -353, 85, -419, -44, 355, -63, 300, 422, -68, 333, 52, -23, -14, 181, 77, -146, 457, -364, 369] in [83, 108]");
            expectedResult.add("\nSS : [151, 369, 78, -24, -493, -491, -487, -485, -462, -457, -451, -420, -396, -394, -385, -321, -307, -265, -263, -255, -244, -233, -208, -207, -194, -164, -131, -126, -121, -105, -90, -89, -78, -66, -58, -38, -38, -30, -21, 22, 33, 37, 37, 49, 70, 89, 140, 212, 257, 260, 265, 342, 442, 443, 471, 487, 492, -459, -431, -421, -420, -392, -360, -337, -252, -241, -213, -134, -34, -6, 18, 21, 38, 43, 165, 175, 191, 192, 230, 237, 418, 439, 475, 369, 402, 135, -281, -352, 390, 406, 373, -422, -47, 449, 365, 179, -82, 338, 230, -2, -43, 266, -353, 85, -419, -44, 355, -63, 300, 422, -68, 333, 52, -23, -14, 181, 77, -146, 457, -364, 369] in [83, 108]");
            expectedResult.add("\n\tLPA : [151, 369, 78, -24, -493, -491, -487, -485, -462, -457, -451, -420, -396, -394, -385, -321, -307, -265, -263, -255, -244, -233, -208, -207, -194, -164, -131, -126, -121, -105, -90, -89, -78, -66, -58, -38, -38, -30, -21, 22, 33, 37, 37, 49, 70, 89, 140, 212, 257, 260, 265, 342, 442, 443, 471, 487, 492, -459, -431, -422, -421, -420, -419, -392, -360, -353, -352, -337, -281, -252, -241, -213, -134, -82, -63, -47, -44, -43, -34, -6, -2, 18, 21, 38, 43, 85, 135, 165, 175, 179, 191, 192, 230, 230, 237, 266, 300, 338, 355, 365, 369, 373, 390, 402, 406, 418, 439, 449, 475, 422, -68, 333, 52, -23, -14, 181, 77, -146, 457, -364, 369] in [57, 108]");
            expectedResult.add("\n\tLPA : [151, 369, 78, -24, -493, -491, -487, -485, -462, -459, -457, -451, -431, -422, -421, -420, -420, -419, -396, -394, -392, -385, -360, -353, -352, -337, -321, -307, -281, -265, -263, -255, -252, -244, -241, -233, -213, -208, -207, -194, -164, -134, -131, -126, -121, -105, -90, -89, -82, -78, -66, -63, -58, -47, -44, -43, -38, -38, -34, -30, -21, -6, -2, 18, 21, 22, 33, 37, 37, 38, 43, 49, 70, 85, 89, 135, 140, 165, 175, 179, 191, 192, 212, 230, 230, 237, 257, 260, 265, 266, 300, 338, 342, 355, 365, 369, 373, 390, 402, 406, 418, 439, 442, 443, 449, 471, 475, 487, 492, 422, -68, 333, 52, -23, -14, 181, 77, -146, 457, -364, 369] in [4, 108]");
        }
        mergesortSimple.sort(array, fastLoggingResult, 4, 108);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());


        array = new int[] {-470, -449, -272, 297, -59, 191, 203, 91, 151, -121, 0, 278, 245, -136, -290, 483, 279, -344, 459, 480, -229, 180, 47, -94, -436, -198, -338, -111, -287, 209, 220, 193, 296, 165, -414, 17, -104, 147, 79, 26, -266, 189, -85, -218, -305, 226, -51, -126, 261, 413, -340, -375, 485, 248, -150, -370, -4, 94, 212, 205, -414, -390, 110, -265, 479, 247, 51, -415, -54, -172, 82, 288, 392, -261, -19, 99, -375, 287, 291, -396, 230, 496, 45, 348, 31, 221, 110, 114, 217, -284, 67, -224, -380, -400, -423, 339, 379, -336, -186, 204, 325, -480, 288, -416, -328, -458, -222, -408, -395, 284, 101, -402, -490, 445, -181, 397, -212, 117, -385, -277, -235, 137, -168, 438, -5, -272};
        sortedArray = new int[]{-470, -449, -272, 297, -59, 191, 203, 91, 151, -121, 0, 278, 245, -136, -290, 483, -436, -415, -414, -414, -390, -375, -370, -344, -340, -338, -305, -287, -266, -265, -229, -218, -198, -150, -126, -111, -104, -94, -85, -51, -4, 17, 26, 47, 51, 79, 94, 110, 147, 165, 180, 189, 193, 205, 209, 212, 220, 226, 247, 248, 261, 279, 296, 413, 459, 479, 480, 485, -54, -172, 82, 288, 392, -261, -19, 99, -375, 287, 291, -396, 230, 496, 45, 348, 31, 221, 110, 114, 217, -284, 67, -224, -380, -400, -423, 339, 379, -336, -186, 204, 325, -480, 288, -416, -328, -458, -222, -408, -395, 284, 101, -402, -490, 445, -181, 397, -212, 117, -385, -277, -235, 137, -168, 438, -5, -272};
        fastLoggingResult = new FastLoggingResult();
        expectedResult = new ArrayList<>();
        {
            expectedResult.add("\nMS : [-470, -449, -272, 297, -59, 191, 203, 91, 151, -121, 0, 278, 245, -136, -290, 483, 279, -344, 459, 480, -229, 180, 47, -94, -436, -198, -338, -111, -287, 209, 220, 193, 296, 165, -414, 17, -104, 147, 79, 26, -266, 189, -85, -218, -305, 226, -51, -126, 261, 413, -340, -375, 485, 248, -150, -370, -4, 94, 212, 205, -414, -390, 110, -265, 479, 247, 51, -415, -54, -172, 82, 288, 392, -261, -19, 99, -375, 287, 291, -396, 230, 496, 45, 348, 31, 221, 110, 114, 217, -284, 67, -224, -380, -400, -423, 339, 379, -336, -186, 204, 325, -480, 288, -416, -328, -458, -222, -408, -395, 284, 101, -402, -490, 445, -181, 397, -212, 117, -385, -277, -235, 137, -168, 438, -5, -272] in [16, 67]");
            expectedResult.add("\nMS : [-470, -449, -272, 297, -59, 191, 203, 91, 151, -121, 0, 278, 245, -136, -290, 483, 279, -344, 459, 480, -229, 180, 47, -94, -436, -198, -338, -111, -287, 209, 220, 193, 296, 165, -414, 17, -104, 147, 79, 26, -266, 189, -85, -218, -305, 226, -51, -126, 261, 413, -340, -375, 485, 248, -150, -370, -4, 94, 212, 205, -414, -390, 110, -265, 479, 247, 51, -415, -54, -172, 82, 288, 392, -261, -19, 99, -375, 287, 291, -396, 230, 496, 45, 348, 31, 221, 110, 114, 217, -284, 67, -224, -380, -400, -423, 339, 379, -336, -186, 204, 325, -480, 288, -416, -328, -458, -222, -408, -395, 284, 101, -402, -490, 445, -181, 397, -212, 117, -385, -277, -235, 137, -168, 438, -5, -272] in [16, 41]");
            expectedResult.add("\nSS : [-470, -449, -272, 297, -59, 191, 203, 91, 151, -121, 0, 278, 245, -136, -290, 483, 279, -344, 459, 480, -229, 180, 47, -94, -436, -198, -338, -111, -287, 209, 220, 193, 296, 165, -414, 17, -104, 147, 79, 26, -266, 189, -85, -218, -305, 226, -51, -126, 261, 413, -340, -375, 485, 248, -150, -370, -4, 94, 212, 205, -414, -390, 110, -265, 479, 247, 51, -415, -54, -172, 82, 288, 392, -261, -19, 99, -375, 287, 291, -396, 230, 496, 45, 348, 31, 221, 110, 114, 217, -284, 67, -224, -380, -400, -423, 339, 379, -336, -186, 204, 325, -480, 288, -416, -328, -458, -222, -408, -395, 284, 101, -402, -490, 445, -181, 397, -212, 117, -385, -277, -235, 137, -168, 438, -5, -272] in [16, 41]");
            expectedResult.add("\nMS : [-470, -449, -272, 297, -59, 191, 203, 91, 151, -121, 0, 278, 245, -136, -290, 483, -436, -414, -344, -338, -287, -266, -229, -198, -111, -104, -94, 17, 26, 47, 79, 147, 165, 180, 189, 193, 209, 220, 279, 296, 459, 480, -85, -218, -305, 226, -51, -126, 261, 413, -340, -375, 485, 248, -150, -370, -4, 94, 212, 205, -414, -390, 110, -265, 479, 247, 51, -415, -54, -172, 82, 288, 392, -261, -19, 99, -375, 287, 291, -396, 230, 496, 45, 348, 31, 221, 110, 114, 217, -284, 67, -224, -380, -400, -423, 339, 379, -336, -186, 204, 325, -480, 288, -416, -328, -458, -222, -408, -395, 284, 101, -402, -490, 445, -181, 397, -212, 117, -385, -277, -235, 137, -168, 438, -5, -272] in [42, 67]");
            expectedResult.add("\nSS : [-470, -449, -272, 297, -59, 191, 203, 91, 151, -121, 0, 278, 245, -136, -290, 483, -436, -414, -344, -338, -287, -266, -229, -198, -111, -104, -94, 17, 26, 47, 79, 147, 165, 180, 189, 193, 209, 220, 279, 296, 459, 480, -85, -218, -305, 226, -51, -126, 261, 413, -340, -375, 485, 248, -150, -370, -4, 94, 212, 205, -414, -390, 110, -265, 479, 247, 51, -415, -54, -172, 82, 288, 392, -261, -19, 99, -375, 287, 291, -396, 230, 496, 45, 348, 31, 221, 110, 114, 217, -284, 67, -224, -380, -400, -423, 339, 379, -336, -186, 204, 325, -480, 288, -416, -328, -458, -222, -408, -395, 284, 101, -402, -490, 445, -181, 397, -212, 117, -385, -277, -235, 137, -168, 438, -5, -272] in [42, 67]");
            expectedResult.add("\n\tLPA : [-470, -449, -272, 297, -59, 191, 203, 91, 151, -121, 0, 278, 245, -136, -290, 483, -436, -415, -414, -414, -390, -375, -370, -344, -340, -338, -305, -287, -266, -265, -229, -218, -198, -150, -126, -111, -104, -94, -85, -51, -4, 17, 26, 47, 51, 79, 94, 110, 147, 165, 180, 189, 193, 205, 209, 212, 220, 226, 247, 248, 261, 279, 296, 413, 459, 479, 480, 485, -54, -172, 82, 288, 392, -261, -19, 99, -375, 287, 291, -396, 230, 496, 45, 348, 31, 221, 110, 114, 217, -284, 67, -224, -380, -400, -423, 339, 379, -336, -186, 204, 325, -480, 288, -416, -328, -458, -222, -408, -395, 284, 101, -402, -490, 445, -181, 397, -212, 117, -385, -277, -235, 137, -168, 438, -5, -272] in [16, 67]");
        }
        mergesortSimple.sort(array, fastLoggingResult, 16, 67);
        assertArrayEquals(sortedArray, array);
        assertEquals(expectedResult, fastLoggingResult.getOutputs());

    }


}
