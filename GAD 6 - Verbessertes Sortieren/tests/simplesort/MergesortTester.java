package tests.simplesort;

import gad.simplesort.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import static org.junit.jupiter.api.Assertions.*;

class MergesortTester {

	/**
	 * This class makes full sorting runs and tests every available aspect of the run such as logging and the result.
	 */
	@Nested
	@DisplayName("Full sorting runs")
	public static class FullRunTest {

		@BeforeEach
		void printLine() {
			System.out.println("-------------------------");
		}

		/**
		 * Tests simple merge sort, this should've been implemented already
		 * Without any optimisation and without the use of selection sort optimisation
		 * Note: This is one possible version of logging, you may fail this test if you're using a different way of logging and still have 100%
		 *
		 * @author Aamin
		 */
		@Test
		public void mergeSort() {
			Mergesort mergesort = new Mergesort(0);
			int[] array;
			int[] sortedArray;
			FastLoggingResult fastLoggingResult;
			List<String> expectedResult;

			array = new int[]{106, 58, -128, 418, -205, 496, 169, 226, 200, -313, 427};
			sortedArray = new int[]{106, 58, -205, -128, 169, 418, 496, 226, 200, -313, 427};
			fastLoggingResult = new FastLoggingResult();
			expectedResult = new ArrayList<>();
			{
				expectedResult.add("\nMS : [106, 58, -128, 418, -205, 496, 169, 226, 200, -313, 427] in [2, 6]");
				expectedResult.add("\nMS : [106, 58, -128, 418, -205, 496, 169, 226, 200, -313, 427] in [2, 4]");
				expectedResult.add("\n\tLPA : [106, 58, -205, -128, 418, 496, 169, 226, 200, -313, 427] in [2, 4]");
				expectedResult.add("\nMS : [106, 58, -205, -128, 418, 496, 169, 226, 200, -313, 427] in [5, 6]");
				expectedResult.add("\n\tLPA : [106, 58, -205, -128, 418, 169, 496, 226, 200, -313, 427] in [5, 6]");
				expectedResult.add("\n\tLPA : [106, 58, -205, -128, 169, 418, 496, 226, 200, -313, 427] in [2, 6]");
			}
			mergesort.sort(array, fastLoggingResult, 2, 6);
			assertArrayEquals(sortedArray, array);
			assertEquals(expectedResult, fastLoggingResult.getOutputs());


			array = new int[]{384, 203, -22, -406, 411, -411, 98, 43, -446, 57, 245, 131, -26, -258, -264, -168};
			sortedArray = new int[]{384, 203, -22, -406, -446, -411, 43, 98, 411, 57, 245, 131, -26, -258, -264, -168};
			fastLoggingResult = new FastLoggingResult();
			expectedResult = new ArrayList<>();
			{
				expectedResult.add("\nMS : [384, 203, -22, -406, 411, -411, 98, 43, -446, 57, 245, 131, -26, -258, -264, -168] in [4, 8]");
				expectedResult.add("\nMS : [384, 203, -22, -406, 411, -411, 98, 43, -446, 57, 245, 131, -26, -258, -264, -168] in [4, 6]");
				expectedResult.add("\nMS : [384, 203, -22, -406, 411, -411, 98, 43, -446, 57, 245, 131, -26, -258, -264, -168] in [4, 5]");
				expectedResult.add("\n\tLPA : [384, 203, -22, -406, -411, 411, 98, 43, -446, 57, 245, 131, -26, -258, -264, -168] in [4, 5]");
				expectedResult.add("\n\tLPA : [384, 203, -22, -406, -411, 98, 411, 43, -446, 57, 245, 131, -26, -258, -264, -168] in [4, 6]");
				expectedResult.add("\nMS : [384, 203, -22, -406, -411, 98, 411, 43, -446, 57, 245, 131, -26, -258, -264, -168] in [7, 8]");
				expectedResult.add("\n\tLPA : [384, 203, -22, -406, -411, 98, 411, -446, 43, 57, 245, 131, -26, -258, -264, -168] in [7, 8]");
				expectedResult.add("\n\tLPA : [384, 203, -22, -406, -446, -411, 43, 98, 411, 57, 245, 131, -26, -258, -264, -168] in [4, 8]");
			}
			mergesort.sort(array, fastLoggingResult, 4, 8);
			assertArrayEquals(sortedArray, array);
			assertEquals(expectedResult, fastLoggingResult.getOutputs());


			array = new int[]{-293, -306, -99, -131, 353, 50, -301, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262};
			sortedArray = new int[]{-293, -306, -301, -131, -99, 6, 50, 97, 353, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262};
			fastLoggingResult = new FastLoggingResult();
			expectedResult = new ArrayList<>();
			{
				expectedResult.add("\nMS : [-293, -306, -99, -131, 353, 50, -301, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [1, 8]");
				expectedResult.add("\nMS : [-293, -306, -99, -131, 353, 50, -301, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [1, 4]");
				expectedResult.add("\n\tLPA : [-293, -306, -131, -99, 353, 50, -301, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [1, 4]");
				expectedResult.add("\nMS : [-293, -306, -131, -99, 353, 50, -301, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [5, 8]");
				expectedResult.add("\nMS : [-293, -306, -131, -99, 353, 50, -301, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [5, 6]");
				expectedResult.add("\n\tLPA : [-293, -306, -131, -99, 353, -301, 50, 6, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [5, 6]");
				expectedResult.add("\n\tLPA : [-293, -306, -131, -99, 353, -301, 6, 50, 97, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [5, 8]");
				expectedResult.add("\n\tLPA : [-293, -306, -301, -131, -99, 6, 50, 97, 353, 41, 452, 12, -343, -327, 13, -109, 34, -468, -435, 369, 262] in [1, 8]");
			}
			mergesort.sort(array, fastLoggingResult, 1, 8);
			assertArrayEquals(sortedArray, array);
			assertEquals(expectedResult, fastLoggingResult.getOutputs());


			array = new int[]{4, -498, -135, -250, -240, -40, 395, 74, 285, -362, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264};
			sortedArray = new int[]{4, -498, -135, -250, -240, -40, -362, -237, -38, 63, 74, 285, 291, 395, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264};
			fastLoggingResult = new FastLoggingResult();
			expectedResult = new ArrayList<>();
			{
				expectedResult.add("\nMS : [4, -498, -135, -250, -240, -40, 395, 74, 285, -362, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [6, 13]");
				expectedResult.add("\nMS : [4, -498, -135, -250, -240, -40, 395, 74, 285, -362, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [6, 9]");
				expectedResult.add("\nMS : [4, -498, -135, -250, -240, -40, 395, 74, 285, -362, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [6, 7]");
				expectedResult.add("\n\tLPA : [4, -498, -135, -250, -240, -40, 74, 395, 285, -362, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [6, 7]");
				expectedResult.add("\nMS : [4, -498, -135, -250, -240, -40, 74, 395, 285, -362, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [8, 9]");
				expectedResult.add("\n\tLPA : [4, -498, -135, -250, -240, -40, 74, 395, -362, 285, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [8, 9]");
				expectedResult.add("\n\tLPA : [4, -498, -135, -250, -240, -40, -362, 74, 285, 395, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [6, 9]");
				expectedResult.add("\nMS : [4, -498, -135, -250, -240, -40, -362, 74, 285, 395, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [10, 13]");
				expectedResult.add("\nMS : [4, -498, -135, -250, -240, -40, -362, 74, 285, 395, 291, 63, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [10, 11]");
				expectedResult.add("\n\tLPA : [4, -498, -135, -250, -240, -40, -362, 74, 285, 395, 63, 291, -237, -38, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [10, 11]");
				expectedResult.add("\n\tLPA : [4, -498, -135, -250, -240, -40, -362, 74, 285, 395, -237, -38, 63, 291, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [10, 13]");
				expectedResult.add("\n\tLPA : [4, -498, -135, -250, -240, -40, -362, -237, -38, 63, 74, 285, 291, 395, -324, -76, -445, 493, 400, -295, 444, 479, -165, 449, 295, -264] in [6, 13]");
			}
			mergesort.sort(array, fastLoggingResult, 6, 13);
			assertArrayEquals(sortedArray, array);
			assertEquals(expectedResult, fastLoggingResult.getOutputs());


			array = new int[]{263, -99, -219, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21};
			sortedArray = new int[]{263, -384, -340, -321, -312, -257, -221, -219, -208, -99, -32, 38, 75, 81, 96, 133, 194, 227, 242, 269, 269, 303, 304, 479, 238, -253, 185, 401, -476, -119, 21};
			fastLoggingResult = new FastLoggingResult();
			expectedResult = new ArrayList<>();
			{
				expectedResult.add("\nMS : [263, -99, -219, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [1, 23]");
				expectedResult.add("\nMS : [263, -99, -219, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [1, 12]");
				expectedResult.add("\nMS : [263, -99, -219, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [1, 6]");
				expectedResult.add("\nMS : [263, -99, -219, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [1, 3]");
				expectedResult.add("\nMS : [263, -99, -219, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [1, 2]");
				expectedResult.add("\n\tLPA : [263, -219, -99, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [1, 2]");
				expectedResult.add("\n\tLPA : [263, -219, -99, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [1, 3]");
				expectedResult.add("\nMS : [263, -219, -99, 269, 304, 479, -257, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [4, 6]");
				expectedResult.add("\n\tLPA : [263, -219, -99, 269, -257, 304, 479, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [4, 6]");
				expectedResult.add("\n\tLPA : [263, -257, -219, -99, 269, 304, 479, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [1, 6]");
				expectedResult.add("\nMS : [263, -257, -219, -99, 269, 304, 479, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [7, 12]");
				expectedResult.add("\nMS : [263, -257, -219, -99, 269, 304, 479, -384, 75, 269, -208, 303, 227, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [10, 12]");
				expectedResult.add("\n\tLPA : [263, -257, -219, -99, 269, 304, 479, -384, 75, 269, -208, 227, 303, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [10, 12]");
				expectedResult.add("\n\tLPA : [263, -257, -219, -99, 269, 304, 479, -384, -208, 75, 227, 269, 303, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [7, 12]");
				expectedResult.add("\n\tLPA : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [1, 12]");
				expectedResult.add("\nMS : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [13, 23]");
				expectedResult.add("\nMS : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, 81, 133, 194, -321, -32, 38, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [13, 18]");
				expectedResult.add("\n\tLPA : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -321, -32, 38, 81, 133, 194, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [13, 18]");
				expectedResult.add("\nMS : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -321, -32, 38, 81, 133, 194, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [19, 23]");
				expectedResult.add("\nMS : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -321, -32, 38, 81, 133, 194, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [19, 21]");
				expectedResult.add("\nMS : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -321, -32, 38, 81, 133, 194, -312, -340, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [19, 20]");
				expectedResult.add("\n\tLPA : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -321, -32, 38, 81, 133, 194, -340, -312, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [19, 20]");
				expectedResult.add("\n\tLPA : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -321, -32, 38, 81, 133, 194, -340, -312, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [19, 21]");
				expectedResult.add("\nMS : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -321, -32, 38, 81, 133, 194, -340, -312, -221, 242, 96, 238, -253, 185, 401, -476, -119, 21] in [22, 23]");
				expectedResult.add("\n\tLPA : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -321, -32, 38, 81, 133, 194, -340, -312, -221, 96, 242, 238, -253, 185, 401, -476, -119, 21] in [22, 23]");
				expectedResult.add("\n\tLPA : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -321, -32, 38, 81, 133, 194, -340, -312, -221, 96, 242, 238, -253, 185, 401, -476, -119, 21] in [19, 23]");
				expectedResult.add("\n\tLPA : [263, -384, -257, -219, -208, -99, 75, 227, 269, 269, 303, 304, 479, -340, -321, -312, -221, -32, 38, 81, 96, 133, 194, 242, 238, -253, 185, 401, -476, -119, 21] in [13, 23]");
				expectedResult.add("\n\tLPA : [263, -384, -340, -321, -312, -257, -221, -219, -208, -99, -32, 38, 75, 81, 96, 133, 194, 227, 242, 269, 269, 303, 304, 479, 238, -253, 185, 401, -476, -119, 21] in [1, 23]");
			}
			mergesort.sort(array, fastLoggingResult, 1, 23);
			assertArrayEquals(sortedArray, array);
			assertEquals(expectedResult, fastLoggingResult.getOutputs());


			array = new int[]{251, 198, -96, 98, -213, 409, -33, -310, -422, 380, -381, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345};
			sortedArray = new int[]{251, 198, -96, 98, -213, 409, -33, -422, -381, -310, -215, 180, 196, 380, 480, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345};
			fastLoggingResult = new FastLoggingResult();
			expectedResult = new ArrayList<>();
			{
				expectedResult.add("\nMS : [251, 198, -96, 98, -213, 409, -33, -310, -422, 380, -381, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [7, 14]");
				expectedResult.add("\nMS : [251, 198, -96, 98, -213, 409, -33, -310, -422, 380, -381, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [7, 10]");
				expectedResult.add("\nMS : [251, 198, -96, 98, -213, 409, -33, -310, -422, 380, -381, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [7, 8]");
				expectedResult.add("\n\tLPA : [251, 198, -96, 98, -213, 409, -33, -422, -310, 380, -381, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [7, 8]");
				expectedResult.add("\nMS : [251, 198, -96, 98, -213, 409, -33, -422, -310, 380, -381, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [9, 10]");
				expectedResult.add("\n\tLPA : [251, 198, -96, 98, -213, 409, -33, -422, -310, -381, 380, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [9, 10]");
				expectedResult.add("\n\tLPA : [251, 198, -96, 98, -213, 409, -33, -422, -381, -310, 380, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [7, 10]");
				expectedResult.add("\nMS : [251, 198, -96, 98, -213, 409, -33, -422, -381, -310, 380, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [11, 14]");
				expectedResult.add("\nMS : [251, 198, -96, 98, -213, 409, -33, -422, -381, -310, 380, 180, -215, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [11, 12]");
				expectedResult.add("\n\tLPA : [251, 198, -96, 98, -213, 409, -33, -422, -381, -310, 380, -215, 180, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [11, 12]");
				expectedResult.add("\nMS : [251, 198, -96, 98, -213, 409, -33, -422, -381, -310, 380, -215, 180, 480, 196, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [13, 14]");
				expectedResult.add("\n\tLPA : [251, 198, -96, 98, -213, 409, -33, -422, -381, -310, 380, -215, 180, 196, 480, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [13, 14]");
				expectedResult.add("\n\tLPA : [251, 198, -96, 98, -213, 409, -33, -422, -381, -310, 380, -215, 180, 196, 480, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [11, 14]");
				expectedResult.add("\n\tLPA : [251, 198, -96, 98, -213, 409, -33, -422, -381, -310, -215, 180, 196, 380, 480, -492, -456, 420, -390, -475, -113, -54, 183, -17, 73, 56, -79, -402, 25, -291, 371, 111, 5, 365, 187, -345] in [7, 14]");
			}
			mergesort.sort(array, fastLoggingResult, 7, 14);
			assertArrayEquals(sortedArray, array);
			assertEquals(expectedResult, fastLoggingResult.getOutputs());


			array = new int[]{430, 297, -101, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79};
			sortedArray = new int[]{-489, -374, -348, -322, -305, -151, -126, -101, -65, -48, 37, 51, 68, 148, 177, 251, 266, 276, 297, 313, 332, 430, 463, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79};
			fastLoggingResult = new FastLoggingResult();
			expectedResult = new ArrayList<>();
			{
				expectedResult.add("\nMS : [430, 297, -101, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 22]");
				expectedResult.add("\nMS : [430, 297, -101, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 11]");
				expectedResult.add("\nMS : [430, 297, -101, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 5]");
				expectedResult.add("\nMS : [430, 297, -101, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 2]");
				expectedResult.add("\nMS : [430, 297, -101, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 1]");
				expectedResult.add("\n\tLPA : [297, 430, -101, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 1]");
				expectedResult.add("\n\tLPA : [-101, 297, 430, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 2]");
				expectedResult.add("\nMS : [-101, 297, 430, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [3, 5]");
				expectedResult.add("\nMS : [-101, 297, 430, 251, -65, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [3, 4]");
				expectedResult.add("\n\tLPA : [-101, 297, 430, -65, 251, 148, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [3, 4]");
				expectedResult.add("\n\tLPA : [-101, 297, 430, -65, 148, 251, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [3, 5]");
				expectedResult.add("\n\tLPA : [-101, -65, 148, 251, 297, 430, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 5]");
				expectedResult.add("\nMS : [-101, -65, 148, 251, 297, 430, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [6, 11]");
				expectedResult.add("\nMS : [-101, -65, 148, 251, 297, 430, -126, 313, 463, -489, 276, 177, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [9, 11]");
				expectedResult.add("\n\tLPA : [-101, -65, 148, 251, 297, 430, -126, 313, 463, -489, 177, 276, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [9, 11]");
				expectedResult.add("\n\tLPA : [-101, -65, 148, 251, 297, 430, -489, -126, 177, 276, 313, 463, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [6, 11]");
				expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 11]");
				expectedResult.add("\nMS : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [12, 22]");
				expectedResult.add("\nMS : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [12, 17]");
				expectedResult.add("\nMS : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [12, 14]");
				expectedResult.add("\nMS : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -305, -374, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [12, 13]");
				expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [12, 13]");
				expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [12, 14]");
				expectedResult.add("\nMS : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [15, 17]");
				expectedResult.add("\nMS : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, 37, 68, -151, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [15, 16]");
				expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, 37, -151, 68, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [15, 16]");
				expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, 37, -151, 68, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [15, 17]");
				expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, -151, 37, 68, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [12, 17]");
				expectedResult.add("\nMS : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, -151, 37, 68, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [18, 22]");
				expectedResult.add("\nMS : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, -151, 37, 68, 266, -322, 51, -348, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [18, 20]");
				expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, -151, 37, 68, 266, -348, -322, 51, -48, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [18, 20]");
				expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -305, -151, 37, 68, 266, -348, -322, -48, 51, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [18, 22]");
				expectedResult.add("\n\tLPA : [-489, -126, -101, -65, 148, 177, 251, 276, 297, 313, 430, 463, -374, -348, -322, -305, -151, -48, 37, 51, 68, 266, 332, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [12, 22]");
				expectedResult.add("\n\tLPA : [-489, -374, -348, -322, -305, -151, -126, -101, -65, -48, 37, 51, 68, 148, 177, 251, 266, 276, 297, 313, 332, 430, 463, -461, 421, -392, 94, -418, -101, 377, 103, -326, -141, -299, 388, 408, -438, 390, -456, -197, -79] in [0, 22]");
			}
			mergesort.sort(array, fastLoggingResult, 0, 22);
			assertArrayEquals(sortedArray, array);
			assertEquals(expectedResult, fastLoggingResult.getOutputs());

			array = new int[]{-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432};
			sortedArray = new int[]{-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432};
			fastLoggingResult = new FastLoggingResult();
			expectedResult = new ArrayList<>();
			{
				expectedResult.add("\nMS : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [0, 10]");
				expectedResult.add("\n\tLPA : [-303, -298, -225, -170, -130, -4, 41, 258, 330, 330, 432] in [0, 10]");
			}
			mergesort.sort(array, fastLoggingResult, 0, 10);
			assertArrayEquals(sortedArray, array);
			assertEquals(expectedResult, fastLoggingResult.getOutputs());

		}

		/**
		 * Tests simple merge sort
		 * Without any optimisation but WITH the use of selection sort optimisation
		 * Note: This is one possible version of logging, you may fail this test if you're using a different way of logging and still have 100%
		 *
		 * @author
		 */
		@Test
		public void mergeSortOptimised() {
			Mergesort mergesort = new Mergesort(30);
			int[] array;
			int[] sortedArray;
			FastLoggingResult fastLoggingResult;
			List<String> expectedResult;

			array = new int[]{-404, 449, -99, -467, -167, 338, -421, -156, -337, 451, -460, -461, 141, -73, -231, -182, 94, -334, -205, 372, 42, -409, -56, 64, -181, -16, -64, 423, 323, 221, -306, -340, -53, 420, 217, 469, -282, 345, 163, 253, -155, -470, 345, 123, 3, 234, -295, 386, -368, -24, 442, 286, 19, -349, 293, 104, -79, -476, 113, 174, 410, 256, -484, 210, -102, 65, -259, 493, -227, -152, 62, 80, 68, 424, 312, -265, 52, -14, -370, -325, -107, -407, 476, 234, 0, -295, 160, -396, 250, 137, 294, 133, -371, -14, -79, -430, 214, -77, -371, -310, -351};
			sortedArray = new int[]{-404, 449, -99, -467, -167, 338, -421, -156, -337, 451, -460, -461, 141, -73, -231, -182, 94, -334, -205, -409, -340, -306, -181, -64, -56, -16, 42, 64, 221, 323, 372, 423, -53, 420, 217, 469, -282, 345, 163, 253, -155, -470, 345, 123, 3, 234, -295, 386, -368, -24, 442, 286, 19, -349, 293, 104, -79, -476, 113, 174, 410, 256, -484, 210, -102, 65, -259, 493, -227, -152, 62, 80, 68, 424, 312, -265, 52, -14, -370, -325, -107, -407, 476, 234, 0, -295, 160, -396, 250, 137, 294, 133, -371, -14, -79, -430, 214, -77, -371, -310, -351};
			fastLoggingResult = new FastLoggingResult();
			expectedResult = new ArrayList<>();
			{
				expectedResult.add("\nMS : [-404, 449, -99, -467, -167, 338, -421, -156, -337, 451, -460, -461, 141, -73, -231, -182, 94, -334, -205, 372, 42, -409, -56, 64, -181, -16, -64, 423, 323, 221, -306, -340, -53, 420, 217, 469, -282, 345, 163, 253, -155, -470, 345, 123, 3, 234, -295, 386, -368, -24, 442, 286, 19, -349, 293, 104, -79, -476, 113, 174, 410, 256, -484, 210, -102, 65, -259, 493, -227, -152, 62, 80, 68, 424, 312, -265, 52, -14, -370, -325, -107, -407, 476, 234, 0, -295, 160, -396, 250, 137, 294, 133, -371, -14, -79, -430, 214, -77, -371, -310, -351] in [19, 31]");
				expectedResult.add("\nSS : [-404, 449, -99, -467, -167, 338, -421, -156, -337, 451, -460, -461, 141, -73, -231, -182, 94, -334, -205, 372, 42, -409, -56, 64, -181, -16, -64, 423, 323, 221, -306, -340, -53, 420, 217, 469, -282, 345, 163, 253, -155, -470, 345, 123, 3, 234, -295, 386, -368, -24, 442, 286, 19, -349, 293, 104, -79, -476, 113, 174, 410, 256, -484, 210, -102, 65, -259, 493, -227, -152, 62, 80, 68, 424, 312, -265, 52, -14, -370, -325, -107, -407, 476, 234, 0, -295, 160, -396, 250, 137, 294, 133, -371, -14, -79, -430, 214, -77, -371, -310, -351] in [19, 31]");
			}
			mergesort.sort(array, fastLoggingResult, 19, 31);
			assertArrayEquals(sortedArray, array);
			assertEquals(expectedResult, fastLoggingResult.getOutputs());


			array = new int[]{-318, 24, -110, 75, 293, 59, 291, 349, -377, 465, -166, 379, -476, 124, 270, 406, -79, 379, 404, -311, -290, 65, 128, 130, 415, 154, -368, 261, -306, 126, -145, -165, -97, -106, -334, 375, 344, -348, -382, 345, 154, -393, -73, -228, 448, -461, -370, 218, 187, 63, 303, 407, 151, -96, 69, 338, -410, -445, 442, -336, -409, -328, 303, -165, 387, 58, 285, -424, 428, -30, -277, -274, 401, 268, 300, -350, 410, 225, 132, -192, -315, -205, 23, -429, 403, -33, -194, 206, -69, 165, 39, -269, 368, -365, 247, -392, 313, 351, 103, -158, -427, 3, -312, 249, -408, 435};
			sortedArray = new int[]{-318, 24, -110, 75, 293, 59, 291, 349, -377, 465, -166, 379, -476, 124, 270, -311, -290, -79, 65, 128, 130, 379, 404, 406, 415, 154, -368, 261, -306, 126, -145, -165, -97, -106, -334, 375, 344, -348, -382, 345, 154, -393, -73, -228, 448, -461, -370, 218, 187, 63, 303, 407, 151, -96, 69, 338, -410, -445, 442, -336, -409, -328, 303, -165, 387, 58, 285, -424, 428, -30, -277, -274, 401, 268, 300, -350, 410, 225, 132, -192, -315, -205, 23, -429, 403, -33, -194, 206, -69, 165, 39, -269, 368, -365, 247, -392, 313, 351, 103, -158, -427, 3, -312, 249, -408, 435};
			fastLoggingResult = new FastLoggingResult();
			expectedResult = new ArrayList<>();
			{
				expectedResult.add("\nMS : [-318, 24, -110, 75, 293, 59, 291, 349, -377, 465, -166, 379, -476, 124, 270, 406, -79, 379, 404, -311, -290, 65, 128, 130, 415, 154, -368, 261, -306, 126, -145, -165, -97, -106, -334, 375, 344, -348, -382, 345, 154, -393, -73, -228, 448, -461, -370, 218, 187, 63, 303, 407, 151, -96, 69, 338, -410, -445, 442, -336, -409, -328, 303, -165, 387, 58, 285, -424, 428, -30, -277, -274, 401, 268, 300, -350, 410, 225, 132, -192, -315, -205, 23, -429, 403, -33, -194, 206, -69, 165, 39, -269, 368, -365, 247, -392, 313, 351, 103, -158, -427, 3, -312, 249, -408, 435] in [15, 24]");
				expectedResult.add("\nSS : [-318, 24, -110, 75, 293, 59, 291, 349, -377, 465, -166, 379, -476, 124, 270, 406, -79, 379, 404, -311, -290, 65, 128, 130, 415, 154, -368, 261, -306, 126, -145, -165, -97, -106, -334, 375, 344, -348, -382, 345, 154, -393, -73, -228, 448, -461, -370, 218, 187, 63, 303, 407, 151, -96, 69, 338, -410, -445, 442, -336, -409, -328, 303, -165, 387, 58, 285, -424, 428, -30, -277, -274, 401, 268, 300, -350, 410, 225, 132, -192, -315, -205, 23, -429, 403, -33, -194, 206, -69, 165, 39, -269, 368, -365, 247, -392, 313, 351, 103, -158, -427, 3, -312, 249, -408, 435] in [15, 24]");
			}
			mergesort.sort(array, fastLoggingResult, 15, 24);
			assertArrayEquals(sortedArray, array);
			assertEquals(expectedResult, fastLoggingResult.getOutputs());


			array = new int[]{455, -46, 468, -284, -68, 274, -320, 67, 38, -45, -170, 240, 481, -405, 81, -486, 389, 483, -420, 437, -138, -198, -12, -392, 327, -222, 480, -204, 43, 88, -211, -183, 202, 210, -198, 419, -140, 161, -283, -31, -83, 278, 49, -186, -91, -47, -235, 312, -334, 212, -31, -466, -491, -146, 471, 431, -314, -173, 436, 406, 405, 377, -158, -311, 198, -459, 67, -456, -368, -364, 332, 10, -230, 430, -44, -333, -94, -92, 447, 307, 204, 42, -477, -200, 179, -280, 430, 59, -385, -142, 170, -16, -277, 375, -2, -289, -39, 167, 51, -369, 397, -2, -16, -382, 123, 245, -6, -12, 438, 135, 115};
			sortedArray = new int[]{455, -46, 468, -284, -68, 274, -320, 67, 38, -45, -170, 240, 481, -405, 81, -486, 389, 483, -420, 437, -138, -198, -12, -392, 327, -222, -211, -204, -183, 43, 88, 480, 202, 210, -198, 419, -140, 161, -283, -31, -83, 278, 49, -186, -91, -47, -235, 312, -334, 212, -31, -466, -491, -146, 471, 431, -314, -173, 436, 406, 405, 377, -158, -311, 198, -459, 67, -456, -368, -364, 332, 10, -230, 430, -44, -333, -94, -92, 447, 307, 204, 42, -477, -200, 179, -280, 430, 59, -385, -142, 170, -16, -277, 375, -2, -289, -39, 167, 51, -369, 397, -2, -16, -382, 123, 245, -6, -12, 438, 135, 115};
			fastLoggingResult = new FastLoggingResult();
			expectedResult = new ArrayList<>();
			{
				expectedResult.add("\nMS : [455, -46, 468, -284, -68, 274, -320, 67, 38, -45, -170, 240, 481, -405, 81, -486, 389, 483, -420, 437, -138, -198, -12, -392, 327, -222, 480, -204, 43, 88, -211, -183, 202, 210, -198, 419, -140, 161, -283, -31, -83, 278, 49, -186, -91, -47, -235, 312, -334, 212, -31, -466, -491, -146, 471, 431, -314, -173, 436, 406, 405, 377, -158, -311, 198, -459, 67, -456, -368, -364, 332, 10, -230, 430, -44, -333, -94, -92, 447, 307, 204, 42, -477, -200, 179, -280, 430, 59, -385, -142, 170, -16, -277, 375, -2, -289, -39, 167, 51, -369, 397, -2, -16, -382, 123, 245, -6, -12, 438, 135, 115] in [25, 31]");
				expectedResult.add("\nSS : [455, -46, 468, -284, -68, 274, -320, 67, 38, -45, -170, 240, 481, -405, 81, -486, 389, 483, -420, 437, -138, -198, -12, -392, 327, -222, 480, -204, 43, 88, -211, -183, 202, 210, -198, 419, -140, 161, -283, -31, -83, 278, 49, -186, -91, -47, -235, 312, -334, 212, -31, -466, -491, -146, 471, 431, -314, -173, 436, 406, 405, 377, -158, -311, 198, -459, 67, -456, -368, -364, 332, 10, -230, 430, -44, -333, -94, -92, 447, 307, 204, 42, -477, -200, 179, -280, 430, 59, -385, -142, 170, -16, -277, 375, -2, -289, -39, 167, 51, -369, 397, -2, -16, -382, 123, 245, -6, -12, 438, 135, 115] in [25, 31]");
			}
			mergesort.sort(array, fastLoggingResult, 25, 31);
			assertArrayEquals(sortedArray, array);
			assertEquals(expectedResult, fastLoggingResult.getOutputs());


			array = new int[]{-255, -179, 38, -364, 443, 244, 64, -299, -5, -315, 280, 40, -319, 383, 254, 22, -276, -419, -443, 22, 483, 116, -67, 427, 41, -457, -260, -270, -265, 221, -157, 467, -35, 476, 340, -101, -188, 412, -7, 348, 170, 378, -48, 410, 48, 231, -92, -150, -87, 277, -147, -119, 304, -386, -322, -410, -228, 272, -193, -291, -152, -175, -471, 169, -349, 467, -257, -83, 390, -349, 364, -136, 11, 316, -273, 83, 91, -333, 323, 295, -368, 399, -125, -144, -335, -16, 434, -336, 180, -79, 497, -479, -227, -14, -334, -333, 293, -218, 345, -106, -82, 166, 19, -155, -398, -360, -242, -345, 92, 48, -480, -493, 374, -272, -205, 343};
			sortedArray = new int[]{-255, -179, 38, -364, 443, 244, 64, -299, -5, -315, 280, 40, -319, 383, 254, 22, -276, -419, -443, 22, 483, 116, -67, 427, 41, -457, -260, -471, -410, -386, -349, -349, -322, -291, -270, -265, -257, -228, -193, -188, -175, -157, -152, -150, -147, -119, -101, -92, -87, -83, -48, -35, -7, 48, 169, 170, 221, 231, 272, 277, 304, 340, 348, 364, 378, 390, 410, 412, 467, 467, 476, -136, 11, 316, -273, 83, 91, -333, 323, 295, -368, 399, -125, -144, -335, -16, 434, -336, 180, -79, 497, -479, -227, -14, -334, -333, 293, -218, 345, -106, -82, 166, 19, -155, -398, -360, -242, -345, 92, 48, -480, -493, 374, -272, -205, 343};
			fastLoggingResult = new FastLoggingResult();
			expectedResult = new ArrayList<>();
			{
				expectedResult.add("\nMS : [-255, -179, 38, -364, 443, 244, 64, -299, -5, -315, 280, 40, -319, 383, 254, 22, -276, -419, -443, 22, 483, 116, -67, 427, 41, -457, -260, -270, -265, 221, -157, 467, -35, 476, 340, -101, -188, 412, -7, 348, 170, 378, -48, 410, 48, 231, -92, -150, -87, 277, -147, -119, 304, -386, -322, -410, -228, 272, -193, -291, -152, -175, -471, 169, -349, 467, -257, -83, 390, -349, 364, -136, 11, 316, -273, 83, 91, -333, 323, 295, -368, 399, -125, -144, -335, -16, 434, -336, 180, -79, 497, -479, -227, -14, -334, -333, 293, -218, 345, -106, -82, 166, 19, -155, -398, -360, -242, -345, 92, 48, -480, -493, 374, -272, -205, 343] in [27, 70]");
				expectedResult.add("\nMS : [-255, -179, 38, -364, 443, 244, 64, -299, -5, -315, 280, 40, -319, 383, 254, 22, -276, -419, -443, 22, 483, 116, -67, 427, 41, -457, -260, -270, -265, 221, -157, 467, -35, 476, 340, -101, -188, 412, -7, 348, 170, 378, -48, 410, 48, 231, -92, -150, -87, 277, -147, -119, 304, -386, -322, -410, -228, 272, -193, -291, -152, -175, -471, 169, -349, 467, -257, -83, 390, -349, 364, -136, 11, 316, -273, 83, 91, -333, 323, 295, -368, 399, -125, -144, -335, -16, 434, -336, 180, -79, 497, -479, -227, -14, -334, -333, 293, -218, 345, -106, -82, 166, 19, -155, -398, -360, -242, -345, 92, 48, -480, -493, 374, -272, -205, 343] in [27, 48]");
				expectedResult.add("\nSS : [-255, -179, 38, -364, 443, 244, 64, -299, -5, -315, 280, 40, -319, 383, 254, 22, -276, -419, -443, 22, 483, 116, -67, 427, 41, -457, -260, -270, -265, 221, -157, 467, -35, 476, 340, -101, -188, 412, -7, 348, 170, 378, -48, 410, 48, 231, -92, -150, -87, 277, -147, -119, 304, -386, -322, -410, -228, 272, -193, -291, -152, -175, -471, 169, -349, 467, -257, -83, 390, -349, 364, -136, 11, 316, -273, 83, 91, -333, 323, 295, -368, 399, -125, -144, -335, -16, 434, -336, 180, -79, 497, -479, -227, -14, -334, -333, 293, -218, 345, -106, -82, 166, 19, -155, -398, -360, -242, -345, 92, 48, -480, -493, 374, -272, -205, 343] in [27, 48]");
				expectedResult.add("\nMS : [-255, -179, 38, -364, 443, 244, 64, -299, -5, -315, 280, 40, -319, 383, 254, 22, -276, -419, -443, 22, 483, 116, -67, 427, 41, -457, -260, -270, -265, -188, -157, -150, -101, -92, -87, -48, -35, -7, 48, 170, 221, 231, 340, 348, 378, 410, 412, 467, 476, 277, -147, -119, 304, -386, -322, -410, -228, 272, -193, -291, -152, -175, -471, 169, -349, 467, -257, -83, 390, -349, 364, -136, 11, 316, -273, 83, 91, -333, 323, 295, -368, 399, -125, -144, -335, -16, 434, -336, 180, -79, 497, -479, -227, -14, -334, -333, 293, -218, 345, -106, -82, 166, 19, -155, -398, -360, -242, -345, 92, 48, -480, -493, 374, -272, -205, 343] in [49, 70]");
				expectedResult.add("\nSS : [-255, -179, 38, -364, 443, 244, 64, -299, -5, -315, 280, 40, -319, 383, 254, 22, -276, -419, -443, 22, 483, 116, -67, 427, 41, -457, -260, -270, -265, -188, -157, -150, -101, -92, -87, -48, -35, -7, 48, 170, 221, 231, 340, 348, 378, 410, 412, 467, 476, 277, -147, -119, 304, -386, -322, -410, -228, 272, -193, -291, -152, -175, -471, 169, -349, 467, -257, -83, 390, -349, 364, -136, 11, 316, -273, 83, 91, -333, 323, 295, -368, 399, -125, -144, -335, -16, 434, -336, 180, -79, 497, -479, -227, -14, -334, -333, 293, -218, 345, -106, -82, 166, 19, -155, -398, -360, -242, -345, 92, 48, -480, -493, 374, -272, -205, 343] in [49, 70]");
				expectedResult.add("\n\tLPA : [-255, -179, 38, -364, 443, 244, 64, -299, -5, -315, 280, 40, -319, 383, 254, 22, -276, -419, -443, 22, 483, 116, -67, 427, 41, -457, -260, -471, -410, -386, -349, -349, -322, -291, -270, -265, -257, -228, -193, -188, -175, -157, -152, -150, -147, -119, -101, -92, -87, -83, -48, -35, -7, 48, 169, 170, 221, 231, 272, 277, 304, 340, 348, 364, 378, 390, 410, 412, 467, 467, 476, -136, 11, 316, -273, 83, 91, -333, 323, 295, -368, 399, -125, -144, -335, -16, 434, -336, 180, -79, 497, -479, -227, -14, -334, -333, 293, -218, 345, -106, -82, 166, 19, -155, -398, -360, -242, -345, 92, 48, -480, -493, 374, -272, -205, 343] in [27, 70]");
			}
			mergesort.sort(array, fastLoggingResult, 27, 70);
			assertArrayEquals(sortedArray, array);
			assertEquals(expectedResult, fastLoggingResult.getOutputs());


			array = new int[]{413, -427, -397, 468, 399, 155, -5, -178, -285, -19, -16, -238, 480, 57, -449, 439, 483, -121, 91, -351, -213, 83, -417, 64, 430, 73, 47, -164, -374, -5, -323, 199, -197, -479, 263, 255, 3, 206, 117, -81, 217, -180, 112, -366, -264, -269, 286, -373, 103, -285, -309, 179, 449, 243, 449, 232, -101, 221, 407, 278, -453, 288, 352, -292, 152, -135, 307, 246, -260, 31, -352, -45, 365, 170, -366, -358, 395, 256, -369, 174, -219, 451, 412, 331, -92, 194, -211, 139, -319, -397, -77, -414, 10, -166, 359, 58, 135, 72, 170, -36, 11, 402, -361, -388, -402, -499, 40, -409, -265, 211, -59, 436, -233, 325, 491, 356, -15, 214, 256, -89, -155};
			sortedArray = new int[]{413, -427, -397, -479, -449, -417, -374, -351, -323, -285, -238, -213, -197, -180, -178, -164, -121, -81, -19, -16, -5, -5, 3, 47, 57, 64, 73, 83, 91, 112, 117, 155, 199, 206, 217, 255, 263, 399, 430, 439, 468, 480, 483, -366, -264, -269, 286, -373, 103, -285, -309, 179, 449, 243, 449, 232, -101, 221, 407, 278, -453, 288, 352, -292, 152, -135, 307, 246, -260, 31, -352, -45, 365, 170, -366, -358, 395, 256, -369, 174, -219, 451, 412, 331, -92, 194, -211, 139, -319, -397, -77, -414, 10, -166, 359, 58, 135, 72, 170, -36, 11, 402, -361, -388, -402, -499, 40, -409, -265, 211, -59, 436, -233, 325, 491, 356, -15, 214, 256, -89, -155};
			fastLoggingResult = new FastLoggingResult();
			expectedResult = new ArrayList<>();
			{
				expectedResult.add("\nMS : [413, -427, -397, 468, 399, 155, -5, -178, -285, -19, -16, -238, 480, 57, -449, 439, 483, -121, 91, -351, -213, 83, -417, 64, 430, 73, 47, -164, -374, -5, -323, 199, -197, -479, 263, 255, 3, 206, 117, -81, 217, -180, 112, -366, -264, -269, 286, -373, 103, -285, -309, 179, 449, 243, 449, 232, -101, 221, 407, 278, -453, 288, 352, -292, 152, -135, 307, 246, -260, 31, -352, -45, 365, 170, -366, -358, 395, 256, -369, 174, -219, 451, 412, 331, -92, 194, -211, 139, -319, -397, -77, -414, 10, -166, 359, 58, 135, 72, 170, -36, 11, 402, -361, -388, -402, -499, 40, -409, -265, 211, -59, 436, -233, 325, 491, 356, -15, 214, 256, -89, -155] in [3, 42]");
				expectedResult.add("\nMS : [413, -427, -397, 468, 399, 155, -5, -178, -285, -19, -16, -238, 480, 57, -449, 439, 483, -121, 91, -351, -213, 83, -417, 64, 430, 73, 47, -164, -374, -5, -323, 199, -197, -479, 263, 255, 3, 206, 117, -81, 217, -180, 112, -366, -264, -269, 286, -373, 103, -285, -309, 179, 449, 243, 449, 232, -101, 221, 407, 278, -453, 288, 352, -292, 152, -135, 307, 246, -260, 31, -352, -45, 365, 170, -366, -358, 395, 256, -369, 174, -219, 451, 412, 331, -92, 194, -211, 139, -319, -397, -77, -414, 10, -166, 359, 58, 135, 72, 170, -36, 11, 402, -361, -388, -402, -499, 40, -409, -265, 211, -59, 436, -233, 325, 491, 356, -15, 214, 256, -89, -155] in [3, 22]");
				expectedResult.add("\nSS : [413, -427, -397, 468, 399, 155, -5, -178, -285, -19, -16, -238, 480, 57, -449, 439, 483, -121, 91, -351, -213, 83, -417, 64, 430, 73, 47, -164, -374, -5, -323, 199, -197, -479, 263, 255, 3, 206, 117, -81, 217, -180, 112, -366, -264, -269, 286, -373, 103, -285, -309, 179, 449, 243, 449, 232, -101, 221, 407, 278, -453, 288, 352, -292, 152, -135, 307, 246, -260, 31, -352, -45, 365, 170, -366, -358, 395, 256, -369, 174, -219, 451, 412, 331, -92, 194, -211, 139, -319, -397, -77, -414, 10, -166, 359, 58, 135, 72, 170, -36, 11, 402, -361, -388, -402, -499, 40, -409, -265, 211, -59, 436, -233, 325, 491, 356, -15, 214, 256, -89, -155] in [3, 22]");
				expectedResult.add("\nMS : [413, -427, -397, -449, -417, -351, -285, -238, -213, -178, -121, -19, -16, -5, 57, 83, 91, 155, 399, 439, 468, 480, 483, 64, 430, 73, 47, -164, -374, -5, -323, 199, -197, -479, 263, 255, 3, 206, 117, -81, 217, -180, 112, -366, -264, -269, 286, -373, 103, -285, -309, 179, 449, 243, 449, 232, -101, 221, 407, 278, -453, 288, 352, -292, 152, -135, 307, 246, -260, 31, -352, -45, 365, 170, -366, -358, 395, 256, -369, 174, -219, 451, 412, 331, -92, 194, -211, 139, -319, -397, -77, -414, 10, -166, 359, 58, 135, 72, 170, -36, 11, 402, -361, -388, -402, -499, 40, -409, -265, 211, -59, 436, -233, 325, 491, 356, -15, 214, 256, -89, -155] in [23, 42]");
				expectedResult.add("\nSS : [413, -427, -397, -449, -417, -351, -285, -238, -213, -178, -121, -19, -16, -5, 57, 83, 91, 155, 399, 439, 468, 480, 483, 64, 430, 73, 47, -164, -374, -5, -323, 199, -197, -479, 263, 255, 3, 206, 117, -81, 217, -180, 112, -366, -264, -269, 286, -373, 103, -285, -309, 179, 449, 243, 449, 232, -101, 221, 407, 278, -453, 288, 352, -292, 152, -135, 307, 246, -260, 31, -352, -45, 365, 170, -366, -358, 395, 256, -369, 174, -219, 451, 412, 331, -92, 194, -211, 139, -319, -397, -77, -414, 10, -166, 359, 58, 135, 72, 170, -36, 11, 402, -361, -388, -402, -499, 40, -409, -265, 211, -59, 436, -233, 325, 491, 356, -15, 214, 256, -89, -155] in [23, 42]");
				expectedResult.add("\n\tLPA : [413, -427, -397, -479, -449, -417, -374, -351, -323, -285, -238, -213, -197, -180, -178, -164, -121, -81, -19, -16, -5, -5, 3, 47, 57, 64, 73, 83, 91, 112, 117, 155, 199, 206, 217, 255, 263, 399, 430, 439, 468, 480, 483, -366, -264, -269, 286, -373, 103, -285, -309, 179, 449, 243, 449, 232, -101, 221, 407, 278, -453, 288, 352, -292, 152, -135, 307, 246, -260, 31, -352, -45, 365, 170, -366, -358, 395, 256, -369, 174, -219, 451, 412, 331, -92, 194, -211, 139, -319, -397, -77, -414, 10, -166, 359, 58, 135, 72, 170, -36, 11, 402, -361, -388, -402, -499, 40, -409, -265, 211, -59, 436, -233, 325, 491, 356, -15, 214, 256, -89, -155] in [3, 42]");
			}
			mergesort.sort(array, fastLoggingResult, 3, 42);
			assertArrayEquals(sortedArray, array);
			assertEquals(expectedResult, fastLoggingResult.getOutputs());


			array = new int[]{-59, -428, -372, 101, 85, -211, -38, 338, -203, -410, 139, 175, -369, -442, 40, -449, 165, 15, -215, -180, -231, 66, 444, -396, -101, 267, -288, 150, 359, 467, 165, -309, -470, 387, -309, -497, -127, 294, 107, 358, -26, -112, 357, -61, -472, -205, 382, -164, 14, 344, -258, -223, 32, 130, -108, -229, -309, 478, -17, 42, -114, 486, 226, -345, -115, 14, -470, -448, 322, -18, -209, -446, 90, 413, -67, -296, 315, 303, -114, 473, 329, -299, 237, -408, 207, 450, 249, 349, 248, 350, 237, -487, -382, 100, -360, 358, 371, 406, -242, 133, 331, 264, 202, 289, 422, 162, 342, -47, 188, -146, 145, -53, 407, -462, -357, -244, 73, 280, 480, 412, 23, 176, -401, -402, 93, 15};
			sortedArray = new int[]{-59, -428, -372, 101, 85, -211, -38, 338, -203, -410, 139, 175, -369, -442, 40, -449, 165, 15, -215, -180, -231, 66, -396, -288, -101, 267, 444, 150, 359, 467, 165, -309, -470, 387, -309, -497, -127, 294, 107, 358, -26, -112, 357, -61, -472, -205, 382, -164, 14, 344, -258, -223, 32, 130, -108, -229, -309, 478, -17, 42, -114, 486, 226, -345, -115, 14, -470, -448, 322, -18, -209, -446, 90, 413, -67, -296, 315, 303, -114, 473, 329, -299, 237, -408, 207, 450, 249, 349, 248, 350, 237, -487, -382, 100, -360, 358, 371, 406, -242, 133, 331, 264, 202, 289, 422, 162, 342, -47, 188, -146, 145, -53, 407, -462, -357, -244, 73, 280, 480, 412, 23, 176, -401, -402, 93, 15};
			fastLoggingResult = new FastLoggingResult();
			expectedResult = new ArrayList<>();
			{
				expectedResult.add("\nMS : [-59, -428, -372, 101, 85, -211, -38, 338, -203, -410, 139, 175, -369, -442, 40, -449, 165, 15, -215, -180, -231, 66, 444, -396, -101, 267, -288, 150, 359, 467, 165, -309, -470, 387, -309, -497, -127, 294, 107, 358, -26, -112, 357, -61, -472, -205, 382, -164, 14, 344, -258, -223, 32, 130, -108, -229, -309, 478, -17, 42, -114, 486, 226, -345, -115, 14, -470, -448, 322, -18, -209, -446, 90, 413, -67, -296, 315, 303, -114, 473, 329, -299, 237, -408, 207, 450, 249, 349, 248, 350, 237, -487, -382, 100, -360, 358, 371, 406, -242, 133, 331, 264, 202, 289, 422, 162, 342, -47, 188, -146, 145, -53, 407, -462, -357, -244, 73, 280, 480, 412, 23, 176, -401, -402, 93, 15] in [22, 26]");
				expectedResult.add("\nSS : [-59, -428, -372, 101, 85, -211, -38, 338, -203, -410, 139, 175, -369, -442, 40, -449, 165, 15, -215, -180, -231, 66, 444, -396, -101, 267, -288, 150, 359, 467, 165, -309, -470, 387, -309, -497, -127, 294, 107, 358, -26, -112, 357, -61, -472, -205, 382, -164, 14, 344, -258, -223, 32, 130, -108, -229, -309, 478, -17, 42, -114, 486, 226, -345, -115, 14, -470, -448, 322, -18, -209, -446, 90, 413, -67, -296, 315, 303, -114, 473, 329, -299, 237, -408, 207, 450, 249, 349, 248, 350, 237, -487, -382, 100, -360, 358, 371, 406, -242, 133, 331, 264, 202, 289, 422, 162, 342, -47, 188, -146, 145, -53, 407, -462, -357, -244, 73, 280, 480, 412, 23, 176, -401, -402, 93, 15] in [22, 26]");
			}
			mergesort.sort(array, fastLoggingResult, 22, 26);
			assertArrayEquals(sortedArray, array);
			assertEquals(expectedResult, fastLoggingResult.getOutputs());

		}
	}

	/**
	 * This class is intended to to test individual aspects of the {@link Mergesort} implementation.
	 */
	@Nested
	@DisplayName("Individual feature tests")
	class FeatureTests {

		/**
		 * This tests if the {@link Mergesort#sort(int[], Result, int, int, int[])} uses the helper array provided.
		 * Furthermore it is tested that the method limits its use to the size of the array to be sorted.
		 *
		 * @see <a href="https://github.com/N0W0RK/TUM_GAD_Tests_SS21/issues/46">Closes Issue #46</a>
		 */
		@Test
		@DisplayName("Mergesort helper array test")
		void mergesortHelperArrayTest() {

			Random random = new Random(2);
			Mergesort mergesort = new Mergesort(0);
			Executable func = () -> {

				int size = random.nextInt((int) 1e5);
				int[] elements = random.ints(size, 0, (int) 1e5).toArray();
				int from = random.nextInt(size);
				int to = random.nextInt(size);

				if (from > to) {
					from = from ^ to;
					to = from ^ to;
					from = from ^ to;
				}

				int sortSize = to - from + 1;
				int[] helper = new int[sortSize];

				int finalTo = to;
				int finalFrom = from;
				assertDoesNotThrow(() -> mergesort.sort(elements, new SilentResult(), finalFrom, finalTo, helper),
						"Your sort function was not able to use a helper array that is not large then the sorted section. -> An Exception was thrown");
				for (int i = 0; i < helper.length; i++) {
					if (helper[i] != 0) {
						return;
					}
				}
				fail("You were supposed to use the provided helper array. The array is still all zeros after sort.");
			};

			Executable[] runs = new Executable[20];
			Arrays.fill(runs, func);

			assertAll(runs);
		}
	}
}
