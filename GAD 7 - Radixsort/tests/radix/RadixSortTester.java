package tests.radix;

import gad.radix.RadixSort;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.function.Executable;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.*;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;

public class RadixSortTester {

    @BeforeEach
    void printLine() {
        System.out.println("-------------------------");
    }

    /**
     * Arguments are generated in the form:
     * {array length, max number, seed}.
     * Tests are executed for increasing array length and increasing number size respectively.
     * Time analysis is provided for each run.
     *
     * @author Konrad G
     * @version 1.0
     */
    @Nested
    @DisplayName("Random Sorting Tests")
    class RandomSortingTests {

        //These numbers are based on performance on my system. feel free to change them to limit test execution times.
        private static final int NUM_LEN_TESTS = 8;
        private static final int NUM_SIZE_TESTS = 10;
        private static final int RUNS = 5;
        private static final OutputType OUTPUT = OutputType.ALL;

        /**
         * Generates test arguments with increasing array length with constant max number.
         *
         * @return {@link java.util.stream.Stream} of {@value NUM_LEN_TESTS} test {@link org.junit.jupiter.params.provider.Arguments}.
         */
        static Stream<Arguments> randomSortingTestsLength() {

            Random random = new Random(1234);
            int maxNumber = (int) 1e5;
            List<Arguments> args = new ArrayList<>();

            args.add(Arguments.arguments(0, maxNumber, random.nextLong()));

            for (int i = 0; i < NUM_LEN_TESTS - 1; i++) {

                args.add(Arguments.of((int) Math.pow(10, i), maxNumber, random.nextLong()));
            }

            return args.stream();
        }

        /**
         * Generates test arguments with increasing number size with constant array length.
         *
         * @return {@link java.util.stream.Stream} of {@value NUM_SIZE_TESTS} test {@link org.junit.jupiter.params.provider.Arguments}.
         */
        static Stream<Arguments> randomSortingTestsSize() {

            Random random = new Random(42069);
            int len = (int) 1e5;
            List<Arguments> args = new ArrayList<>();


            for (int i = 0; i < NUM_SIZE_TESTS; i++) {

                args.add(Arguments.of(len, (int) Math.pow(10, i), random.nextLong()));
            }

            return args.stream();
        }

        /**
         * Tests arguments generated by {@link #randomSortingTestsLength()}.
         *
         * @param arrayLength Length of generated array.
         * @param maxNumber   Maximum size of number in the array.
         * @param seed        Random seed for filling test array.
         */
        @DisplayName("Random Sorting Test Length")
        @ParameterizedTest(name = "{index} | Sorts correct {0} elements with max size {1}")
        @MethodSource
        void randomSortingTestsLength(int arrayLength, int maxNumber, long seed) {

            testAndBenchmark(() -> {
                Random random = new Random(seed);
                return random.ints(arrayLength, 0, maxNumber).toArray();
            });
        }

        /**
         * Tests arguments generated by {@link #randomSortingTestsSize()}.
         * Numbers will always be in a range of {@code max/min = 100}.
         *
         * @param arrayLength Length of the generated array
         * @param maxNumber Maximum size of number in array
         * @param seed Random seed for filling test array
         */
        @DisplayName("Random Sorting Test Size")
        @ParameterizedTest(name = "{index} | Sorts correct {0} elements with max size {1}")
        @MethodSource
        void randomSortingTestsSize(int arrayLength, int maxNumber, long seed) {

            testAndBenchmark(() -> {
                Random random = new Random(seed);
                return random.ints(arrayLength, Math.max(0, maxNumber / 100), maxNumber).toArray();
            });
        }

        /**
         * Function to test sorting algorithm with different input arrays.
         * Arrays are generated by a lambda function parsed via {@link ArrayGenerator}.<br>
         *<p>
         * The level of output can be controlled by setting {@code OUTPUT}:
         * <ul>
         *  <li>{@code ALL}: Prints average execution time and individual execution time.</li>
         *  <li>{@code AVERAGE}: Only prints average execution time.</li>
         *  <li>{@code NONE}: No timing information is printed. Timings are still taken and therefore produce execution overhead.</li>
         * </ul>
         *</p>
         *
         * @param generator Function for generating the test array
         */
        private void testAndBenchmark(ArrayGenerator generator) {
            List<Long> durations = new ArrayList<>();

            Executable[] tests = new Executable[RUNS];
            Executable func = () -> {
                int[] elements = generator.generate();
                int[] sortedCopy = Arrays.copyOf(elements, elements.length);
                Arrays.sort(sortedCopy);

                long start = System.nanoTime();
                RadixSort.sort(elements, new TestResult());
                durations.add(System.nanoTime() - start);

                CustomAssertions.assertArrayEquals(sortedCopy, elements, "Array was not sorted correctly");
            };
            Arrays.fill(tests, func);

            assertAll("Following tests failed:", tests);

            StringBuilder sb = new StringBuilder();
            sb.append(String.format("Sorting %d runs took on average %.4fms%n", RUNS, durations.stream().mapToLong(Long::longValue).summaryStatistics().getAverage() * 1e-6));
            if (OUTPUT.equals(OutputType.ALL)) {
                sb.append(String.format("Each individual run took (in ms): %s", Arrays.toString(durations.stream().map(e -> e * 1e-6).toArray())));
            }
            if (!OUTPUT.equals(OutputType.NONE)) {
                System.out.println(sb);
            }
        }

        interface ArrayGenerator {
            int[] generate();
        }
    }


    @Nested
    @DisplayName{"Aamin's Tests"}
    class aaminsTests {
}
